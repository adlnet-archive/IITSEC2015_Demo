{
	"extends": "box2.vwf",
	"source": "vwf/model/threejs/box.js",
	"type": "subDriver/threejs",
	"sequence": 0,
	"random": {
		"s0": 0.134394,
		"s1": 0.921757,
		"s2": 0.045269,
		"c": 1
	},
	"properties": {
		"___physics_activation_state": 4,
		"___physics_deactivation_time": 0,
		"___physics_velocity_linear": [
			-0.061771541833877563,
			-0.16220879554748535,
			-0.000026102707124664448
		],
		"___physics_velocity_angular": [
			0.03684181347489357,
			0.08852542191743851,
			0.000580933759920299
		],
		"DisplayName": "FAC_SLAVE",
		"EditorData": {
			"_controllingCamera": {
				"displayname": "Controlling Camera",
				"property": "controllingCamera",
				"type": "nodeid"
			},
			"bullets_50_cal": {
				"displayname": "Bullets (50 cal)",
				"max": 100000,
				"min": 1,
				"property": "bullets_50_cal",
				"type": "slider"
			},
			"fuel": {
				"displayname": "Fuel",
				"max": 1000,
				"min": 1,
				"property": "fuel",
				"type": "slider"
			},
			"fuelConsumptionRate": {
				"displayname": "Fuel Consumption Rate",
				"max": 1,
				"min": 0,
				"property": "fuelConsumptionRate",
				"step": 0.01,
				"type": "slider"
			},
			"health": {
				"displayname": "Health",
				"max": 1000,
				"min": 1,
				"property": "health",
				"type": "slider"
			},
			"hostile": {
				"displayname": "Hostile",
				"property": "hostile",
				"type": "check"
			},
			"hullStrength": {
				"displayname": "Hull Strength",
				"max": 1000,
				"min": 1,
				"property": "hullStrength",
				"type": "slider"
			},
			"rangeToTarget": {
				"displayname": "Range to Target",
				"max": 5000,
				"min": 0,
				"property": "rangeToTarget",
				"step": 100,
				"type": "slider"
			},
			"rockets": {
				"displayname": "Rockets",
				"max": 25,
				"min": 0,
				"property": "rockets",
				"type": "slider"
			}
		},
		"___physics_angular_velocity": [
			-0.0205620388669852,
			0.137373529226051,
			0.000692897715996474
		],
		"___physics_damping": 0.4,
		"___physics_enabled": true,
		"___physics_linear_velocity": [
			-0.115731220145219,
			0.602527779520543,
			-0.000487978426872444
		],
		"___physics_mass": 8051.2,
		"___sourceAssetTimestamp": "Mon Oct 05 2015 15:41:39 GMT-0400 (Eastern Daylight Time)",
		"_keysDown": [],
		"_length": 7,
		"activeState": "active",
		"bullets_50_cal": 1000,
		"controllingCamera": "SandboxCamera-vwf-N373ec60b",
		"counter": 14738,
		"currentState": null,
		"editorData": {
			"controllingCamera": {
				"displayName": "controllingCamera",
				"type": "nodeID"
			}
		},
		"explosionDef": {
			"continues": "/sas/assets/d3402bc3",
			"properties": {
				"transform": [
					1,
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					1
				]
			}
		},
		"facLeaderMovementCandidate": [],
		"facPeerMovementCandidate": [
			[
				-9.29690361022949,
				-8.78372955322266,
				20.6695251464844
			],
			"box2-vwf-Nc62144e3",
			[
				-0.564283907413483,
				-0.824362516403198,
				-0.00332754687406123
			]
		],
		"fuel": 100,
		"fuelConsumptionRate": 0.01,
		"health": 100,
		"height": 1.2,
		"hostile": true,
		"hullStrength": 100,
		"materialDef": {
			"alpha": 1,
			"ambient": {
				"b": 1,
				"g": 1,
				"r": 1
			},
			"blendMode": 1,
			"color": {
				"a": 1,
				"b": 1,
				"g": 1,
				"r": 1
			},
			"depthtest": true,
			"depthwrite": true,
			"emit": {
				"b": 0,
				"g": 0,
				"r": 0
			},
			"fog": true,
			"layers": [
				{
					"alpha": 1,
					"blendMode": 0,
					"mapInput": 0,
					"mapTo": 1,
					"offsetx": 0,
					"offsety": 0,
					"rot": 0,
					"scalex": 1,
					"scaley": 1,
					"src": "checker.jpg"
				}
			],
			"metal": false,
			"reflect": 0.8,
			"shadeless": false,
			"shading": true,
			"shadow": true,
			"shininess": 15,
			"side": 0,
			"specularColor": {
				"b": 0.57735,
				"g": 0.57735,
				"r": 0.57735
			},
			"specularLevel": 1,
			"type": "phong",
			"vertexColors": false,
			"wireframe": false
		},
		"missileDef": {
			"continues": "/sas/assets/73e8a4a3",
			"properties": {
				"fired": true,
				"transform": [
					-0.241058230400085,
					0.0219730380922556,
					0.969229340553284,
					0,
					-0.139989301562309,
					0.987488389015198,
					-0.0572049580514431,
					0,
					-0.959318161010742,
					-0.149620994925499,
					-0.235202088952065,
					0,
					4.95079517364502,
					-1.64401972293854,
					1.5334906578064,
					1
				]
			}
		},
		"owner": "ADLteam",
		"physicsAPI": {},
		"rangeToTarget": 1000,
		"rockets": 5,
		"smokeDef": {
			"continues": "/sas/assets/aeb3d1dd",
			"properties": {
				"targetEntity": "-sas-assets-73e8a4a3-N8008a8f",
				"transform": [
					1,
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					1
				]
			}
		},
		"sourceAssetId": "f997b70e",
		"states": {
			"approaching": {
				"name": "approaching",
				"properties": {},
				"transitionFunction": "approachingTransition",
				"transitions": [
					"approaching",
					"moving_away",
					"idle",
					"out_of_gas",
					"fire_rocket",
					"colliding",
					"defeated"
				],
				"updateFunction": "approachingUpdate"
			},
			"colliding": {
				"name": "colliding",
				"properties": {},
				"transitionFunction": "collidingTransition",
				"transitions": [
					"colliding",
					"defeated"
				],
				"updateFunction": "collidingUpdate"
			},
			"defeated": {
				"name": "defeated",
				"properties": {},
				"transitionFunction": "defeatedTransition",
				"transitions": [
					"defeated"
				],
				"updateFunction": "defeatedUpdate"
			},
			"fire_rocket": {
				"name": "fire_rocket",
				"properties": {},
				"transitionFunction": "fire_rocketTransition",
				"transitions": [
					"approaching",
					"fire_rocket",
					"moving_away",
					"idle",
					"colliding",
					"defeated"
				],
				"updateFunction": "fire_rocketUpdate"
			},
			"idle": {
				"name": "idle",
				"properties": {},
				"transitionFunction": "idleTransition",
				"transitions": [
					"moving_away",
					"idle",
					"out_of_gas",
					"colliding",
					"defeated"
				],
				"updateFunction": "idleUpdate"
			},
			"moving_away": {
				"name": "moving_away",
				"properties": {},
				"transitionFunction": "moving_awayTransition",
				"transitions": [
					"moving_away",
					"idle",
					"out_of_gas",
					"colliding",
					"defeated"
				],
				"updateFunction": "moving_awayUpdate"
			},
			"out_of_gas": {
				"name": "out_of_gas",
				"properties": {},
				"transitionFunction": "out_of_gasTransition",
				"transitions": [
					"out_of_gas",
					"colliding",
					"defeated"
				],
				"updateFunction": "out_of_gasUpdate"
			}
		},
		"transform": [
			0.34133610129356384,
			0.9378132224082947,
			0,
			0,
			-0.9378132224082947,
			0.34133610129356384,
			0,
			0,
			0,
			0,
			0.9980000257492065,
			0,
			-17.5,
			-17.75,
			20,
			1
		],
		"type": "Primitive",
		"visible": false,
		"warningsReceived": 0,
		"width": 2.5,
		"worldTransform": [
			0.34133610129356384,
			0.9378132224082947,
			0,
			0,
			-0.9378132224082947,
			0.34133610129356384,
			0,
			0,
			0,
			0,
			0.9980000257492065,
			0,
			-17.5,
			-17.75,
			20,
			1
		],
		"tickCount": 0
	},
	"methods": {
		"FACMovementDirection": {
			"body": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                            // set equal to \"\" after adding calculations:\n                                            var movement = \"closing\";\n                                            // Perform calculations to determine approaching or moving away states:\n                                            //     movement = \"closing\" if distance to target is getting smaller\n                                            //     movement = \"none\" if distance to target hasn't changed\n                                            //     movement = \"increasing\" if distance to target is getting larger\n                                            switch (movement)\n                                            {\n                                                case \"closing\":\n                                                    this.currentState = this.states[\"approaching\"];\n                                                    return \"approaching\";\n                                                case \"none\":\n                                                    this.currentState = this.states[\"idle\"];\n                                                    return \"idle\";\n                                                case \"increasing\":\n                                                    this.currentState = this.states[\"moving_away\"];\n                                                    return \"moving_away\";\n                                            }    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
			"parameters": []
		},
		"_keyDown": {
			"body": "return;\n    \n    if (!this.verifyCamera()) return;\n    if (this.currentState === null)\n    {\n        console.log(\"Set initial state\");\n        this.currentState = this.states[\"approaching\"];\n    }\n    if (this._keysDown.indexOf(e.key.char) == -1)\n    {\n        this._keysDown.push(e.key.char);\n    }",
			"parameters": [
				"e",
				"d"
			]
		},
		"_keyUp": {
			"body": "return;\n\n    if (!this.verifyCamera()) return;\n    if (this._keysDown.indexOf(e.key.char) !== -1)\n    {\n        this._keysDown.splice(this._keysDown.indexOf(e.key.char), 1);\n    }\n    if (e.key.char == \" \")\n    {\n        if (this.rockets > 0)\n        {\n            this.activateState(\"fire_rocket\");\n            console.log(\"rockets: \" + this.rockets);\n        }\n    }",
			"parameters": [
				"e",
				"d"
			]
		},
		"activateState": {
			"body": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                            //console.log(\"activateState\");\n                                            var state = this.states[statename];\n\n                                            if (this.currentState.transitions.indexOf(statename) == -1)\n                                            {\n                                                console.log(\"invalid transition!\");\n                                                return;\n                                            }\n\n                                            if (state.transitionFunction)\n                                                this[state.transitionFunction](this.currentState);\n\n                                            this.currentState = state;\n\n                                            for (var i in state.properties)\n                                            {\n                                                console.log(state.properties[i]);\n                                                this[i] = state.properties[i];\n                                            }    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
			"parameters": [
				"statename"
			]
		},
		"approachingTransition": {
			"body": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                         //console.log(\"approachingTransition\");\n                            this.approachingUpdate(this.currentState); \n\n\n\n\n\n\n\n\n\n\n\n\n",
			"parameters": []
		},
		"approachingUpdate": {
			"body": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                         //console.log(\"approachingUpdate\");\n                            this.currentState = this.states[\"approaching\"]; \n\n\n\n\n\n\n\n\n\n\n\n\n",
			"parameters": [
				"statename"
			]
		},
		"collidingTransition": {
			"body": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                            console.log(\"collidingTransition\");\n                                            this.currentState = this.states[\"colliding\"];    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
			"parameters": []
		},
		"collidingUpdate": {
			"body": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                            console.log(\"collidingUpdate\");\n                                            this.currentState = this.states[\"colliding\"];    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
			"parameters": [
				"statename"
			]
		},
		"consumeFuel": {
			"body": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                            if (this.fuel <= 0.0)\n                                            {\n                                                this.currentState = this.states[\"out_of_gas\"];\n                                            }\n                                            else\n                                            {\n                                                this.fuel = this.fuel - this.fuelConsumptionRate;\n                                                console.log(\"fuel: \" + this.fuel);\n                                            }    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
			"parameters": []
		},
		"defeatedTransition": {
			"body": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                            console.log(\"defeatedTransition\");\n                                            this.currentState = this.states[\"defeated\"];    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
			"parameters": []
		},
		"defeatedUpdate": {
			"body": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                            console.log(\"defeatedUpdate\");\n                                            this.currentState = this.states[\"defeated\"];    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
			"parameters": [
				"statename"
			]
		},
		"facLeaderFire": {
			"body": "console.log(\"slave firing!\");\n\n    if (this.rockets > 0)\n    {\n        this.currentState = this.states[\"fire_rocket\"];\n    }\n    else\n    {\n        this.currentState = this.states[\"moving_away\"];\n    }\n    \n    this.activateState(\"fire_rocket\");",
			"parameters": []
		},
		"facLeaderInput": {
			"body": "//if (this.facLeaderMovementCandidate.length == 0)\n    //{\n        this.facLeaderMovementCandidate = args;\n    //}\n    /*else\n    {\n        //console.log(\"weighted leader input\");\n\n        var current_pos = this.facLeaderMovementCandidate[0];\n        var target_pos = args[0];\n\n        current_pos = MATH.scaleVec3(current_pos, 1000);\n        target_pos = MATH.scaleVec3(target_pos, 1);\n\n        var new_target = MATH.addVec3(current_pos, target_pos);\n        new_target = MATH.scaleVec3(new_target, 1 / 1001);\n        this.facLeaderMovementCandidate = [new_target];\n    }*/",
			"parameters": [
				"args"
			]
		},
		"facPeerInput": {
			"body": "//console.log(\"facPeerInput Received: \" + args);\n\n    if (args[1] == this.id) return;\n\n    /*if (this.facPeerMovementCandidate.length > 0)\n    {\n        var current_pos = this.transformAPI.getPosition();\n        var last_pos = this.facPeerMovementCandidate;\n        var incoming_pos = args[0];\n\n        if (MATH.distanceVec3(current_pos, incoming_pos) < MATH.distanceVec3(current_pos, last_pos))\n        {\n            this.facPeerMovementCandidate = args;\n        }\n    }\n    else\n    {*/\n    this.facPeerMovementCandidate = args;\n    //}",
			"parameters": [
				"args"
			]
		},
		"fire_rocketTransition": {
			"body": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                            console.log(\"fire_rocketTransition\");\n                                            this.fire_rocketUpdate(this.currentState);    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
			"parameters": []
		},
		"fire_rocketUpdate": {
			"body": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                            console.log(\"fire_rocketUpdate\");\n                                            this.launchMissile();\n                                            this.playMissileLaunch();\n                                            this.rockets = this.rockets - 1;\n                                            if (this.rockets > 0)\n                                            {\n                                                this.currentState = this.states[\"fire_rocket\"];\n                                                console.log(\"rocketUpdate state fire \");\n                                            }\n                                            else\n                                            {\n                                                this.currentState = this.states[\"idle\"];\n                                                console.log(\"rocketUpdate state idle\");\n                                            }    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
			"parameters": [
				"statename"
			]
		},
		"hit": {
			"body": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                         var pos = args[0];\n                                            var force = args[1];\n                                            if (typeof force == 'number')\n                                                this.health -= force;\n                                            else\n                                                this.health -= 101;\n\n                                            if (this.health < 0)\n                                            {\n                                                var def = this.explosionDef;\n                                                var pos = this.transformAPI.getWorldPosition();\n                                                def.properties.transform[12] = pos[0];\n                                                def.properties.transform[13] = pos[1];\n                                                def.properties.transform[14] = pos[2];\n                                                def.properties.fuse = 1;\n                                                vwf.createChild(vwf.application(), GUID(), _DataManager.getCleanNodePrototype(def), null);\n                                                this.parent.children.delete(this);\n                                            } \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
			"parameters": [
				"args"
			]
		},
		"idleTransition": {
			"body": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                           console.log(\"idleTransition\");\n                                            this.currentState = this.states[\"idle\"];   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
			"parameters": []
		},
		"idleUpdate": {
			"body": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                           console.log(\"idleUpdate\");\n                                            this.currentState = this.states[\"idle\"];   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
			"parameters": [
				"statename"
			]
		},
		"launchMissile": {
			"body": "var def = this.missileDef;\n    var pos = this.children_by_name.MissileLauncher.worldTransform.slice();\n\n    pos[14] += 0;\n    def.properties.transform = pos;\n    // def.properties.___physics_velocity_linear = this.physicsAPI.getLinearVelocity();\n    def.properties.fired = true;\n    var now = performance.now();\n    // console.profile(\"launch\");\n    var smokeDef = this.smokeDef;\n    vwf.createChild(vwf.application(), GUID(), _DataManager.getCleanNodePrototype(def), null, function(id)\n    {\n        smokeDef.properties.targetEntity = id;\n        vwf.createChild(vwf.application(), GUID(), _DataManager.getCleanNodePrototype(smokeDef), null, function()\n        {\n            console.log(performance.now() - now);\n        });\n    });",
			"parameters": []
		},
		"moveBackwards": {
			"body": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                       console.log(\"move backwards\");\n                          \n                          var mass = this.physicsAPI.getMass();    \n                          \n                          this.consumeFuel();\n                          if (this.currentState && this.currentState.name === this.states[\"out_of_gas\"].name)\n                          {\n                              console.log(\"(S) out of gas!\");\n                              this.activateState(\"out_of_gas\");\n                          }\n                          else\n                          {\n                              var force = this.transformAPI.localToGlobal(10 * mass, 0, 0);\n                              this.physicsAPI.addForceAtCenter(force[0], force[1], force[2]);\n                              this.playMotorRunning();\n                              switch (this.FACMovementDirection())\n                              {\n                                  case \"approaching\":\n                                      this.activateState(\"approaching\");\n                                      break;\n                                  case \"idle\":\n                                      this.activateState(\"idle\");\n                                      break;\n                                  case \"moving_away\":\n                                      this.activateState(\"moving_away\");\n                                      break;\n                              }\n                          } \n\n\n\n\n\n\n\n\n\n\n\n",
			"parameters": []
		},
		"moveForward": {
			"body": "console.log(\"move forward\");\n\n    var mass = this.physicsAPI.getMass();\n\n    this.consumeFuel();\n    if (this.currentState && this.currentState.name === this.states[\"out_of_gas\"].name)\n    {\n        console.log(\"(W) out of gas!\");\n        this.activateState(\"out_of_gas\");\n    }\n    else\n    {\n        var force = this.transformAPI.localToGlobal(-10 * mass, 0, 0);\n        this.physicsAPI.addForceAtCenter(force[0], force[1], force[2]);\n        this.playMotorRunning();\n        switch (this.FACMovementDirection())\n        {\n            case \"approaching\":\n                this.activateState(\"approaching\");\n                break;\n            case \"idle\":\n                this.activateState(\"idle\");\n                break;\n            case \"moving_away\":\n                this.activateState(\"moving_away\");\n                break;\n        }\n    }",
			"parameters": [
				"mass"
			]
		},
		"moving_awayTransition": {
			"body": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                           console.log(\"moving_awayTransition\");\n                                            this.moving_awayUpdate(this.currentState);   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
			"parameters": []
		},
		"moving_awayUpdate": {
			"body": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                           console.log(\"moving_awayUpdate\");\n                                            this.currentState = this.states[\"moving_away\"];   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
			"parameters": [
				"statename"
			]
		},
		"out_of_gasTransition": {
			"body": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                           console.log(\"out_of_gasTransition\");\n                                            //this.currentState = this.states[\"out_of_gas\"];\n                                            this.out_of_gasUpdate(this.currentState);   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
			"parameters": []
		},
		"out_of_gasUpdate": {
			"body": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                           console.log(\"out_of_gasUpdate\");\n                                            console.log(statename);\n                                            if (this.fuel <= 0)\n                                            {\n                                                this.currentState = this.states[\"out_of_gas\"];\n                                                console.log(\"out_of_gasUpdate now out_of_gas state\");\n                                            }\n                                            else if (this.hullStrength <= 0)\n                                            {\n                                                this.currentState = this.states[\"defeated\"];\n                                                console.log(\"out_of_gasUpdate now defaeted state\");\n                                            }   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
			"parameters": [
				"statename"
			]
		},
		"playBulletHittingMetal": {
			"body": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                           console.log(\"playBulletHittingMetal\");\n                                            this.audioAPI.playSound(\"\", false, 100);   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
			"parameters": []
		},
		"playBulletHittingWater": {
			"body": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                           console.log(\"playBulletHittingWater\");\n                                            this.audioAPI.playSound(\"\", false, 100);   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
			"parameters": []
		},
		"playBulletWhizzingBy": {
			"body": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                           console.log(\"playBulletWhizzingBy\");\n                                            this.audioAPI.playSound(\"\", false, 100);   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
			"parameters": []
		},
		"playExplosion": {
			"body": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                           console.log(\"playExplosion\");\n                                            // #1:\n                                            //this.audioAPI.playSound(\"/sas/assets/8d358349\", false, 100);\n                                            // #2:\n                                            //this.audioAPI.playSound(\"/sas/assets/d714ebe1\", false, 100);\n                                            // #3:\n                                            this.audioAPI.playSound(\"/sas/assets/3c6b353e\", false, 100);   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
			"parameters": []
		},
		"playHelicopter": {
			"body": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                           //console.log(\"playHelicopter\");\n                                            // #1:\n                                            //this.audioAPI.playSound(\"/sas/assets/af90534a\", false, 100);\n                                            //#2:\n                                            this.audioAPI.playSound(\"/sas/assets/dc81768a\", false, 100);   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
			"parameters": []
		},
		"playMissileLaunch": {
			"body": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                           console.log(\"playMissileLaunch\");\n                                            // #1:\n                                            //this.audioAPI.playSound(\"/sas/assets/744acf2e\", false, 100);\n                                            // #2:\n                                            //this.audioAPI.playSound(\"/sas/assets/4334801b\", false, 100);\n                                            // #3:\n                                            //this.audioAPI.playSound(\"/sas/assets/10b027bd\", false, 100);\n                                            // #4:\n                                            //this.audioAPI.playSound(\"/sas/assets/94d508e3\", false, 100);\n                                            // #5:\n                                            this.audioAPI.playSound(\"/sas/assets/263beb86\", false, 100);   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
			"parameters": []
		},
		"playMotorIdle": {
			"body": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                           console.log(\"playMotorIdle\");\n                                            this.audioAPI.playSound(\"\", false, 100);   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
			"parameters": []
		},
		"playMotorRunning": {
			"body": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                     //console.log(\"playMotorRunning\");\n                        // #1:\n                        //this.audioAPI.playSound(\"/sas/assets/2cb9fef9\", false, 100);\n                        // #2:\n                        //this.audioAPI.playSound(\"/sas/assets/994ee0c8\", false, 100);\n                        // #3:\n                        var sound = vwf.callMethod(this.id, \"getSound\", [\"/sas/assets/c253157d\"]);\n\n                        if (sound == null || !sound.isPlaying())\n                        {\n                            this.audioAPI.playSound(\"/sas/assets/c253157d\", false, 100);\n                        } \n\n\n\n\n\n\n\n\n\n\n",
			"parameters": []
		},
		"playMotorSputtering": {
			"body": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                           console.log(\"playMotorSputtering\");\n                                            this.audioAPI.playSound(\"\", false, 100);   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
			"parameters": []
		},
		"playWarning": {
			"body": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                           console.log(\"playWarning\");\n                                            this.audioAPI.playSound(\"\", false, 100);   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
			"parameters": []
		},
		"ready": {
			"body": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                                                                             // The scene is now completely loaded. This will fire on each client when the client joins, so it`s not a great place to create objects\n                                            this.Scene.unbind(\"keyDown\",this._kd);\n                                            this.Scene.unbind(\"keyUp\",this._ku);\n                                            var self = this;\n                                            this._kd = function(e,d){self._keyDown(e,d)};\n                                            this._ku = function(e,d){self._keyUp(e,d)};\n                                            this.Scene.bind(\"keyDown\",this._kd);\n                                            this.Scene.bind(\"keyUp\",this._ku);                                                     \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
			"parameters": []
		},
		"verifyCamera": {
			"body": "var cam = this.Scene.clientAPI.getCameraForClient(vwf.client());\n\n    if (!cam || cam.id != this.controllingCamera) return false;\n    return true;",
			"parameters": []
		},
		"movementDecision": {
			"body": "// Have I reached the goal?  If so, stop.  If not, move.\n    var my_pos = this.transformAPI.getWorldPosition();\n    var leader_info = this.facLeaderMovementCandidate;\n    \n    var distance = 500;\n    if (leader_info.length > 0)\n    {\n        var goal_pos = leader_info[0];\n        distance = MATH.distanceVec3(goal_pos, my_pos);\n    }\n\n    //console.log(\"goal_pos for (\" + this.id + \") is: \" + goal_pos);\n    //console.log(\"distance to goal for (\" + this.id + \") is: \" + distance);\n\n    if (distance < 50)\n    {\n        // reached the goal!\n        //console.log(\"(\" + this.id + \") Reached the goal!  Attempting to stop!\");\n        return;\n    }\n    else\n    {\n        // let's move, but where?\n        if (this.facPeerMovementCandidate.length > 0)\n        {\n            // Move to avoid peer, which trumps\n            this.moveToAvoidPeer();\n\n            // Clear movement candidates\n            this.facPeerMovementCandidate = [];\n\n            return;\n        }\n        else\n        {\n            if (leader_info.length == 0)\n            {\n                // No input to move on\n                return;\n            }\n            else\n            {\n                this.moveTowardLeader();\n            }\n        }\n    }",
			"parameters": []
		},
		"moveTowardLeader": {
			"body": "//console.log(\"Move Toward Leader (\" + this.id + \")\");\n\n    var max_distance = 30;\n    var mass = this.physicsAPI.getMass();\n\n    // Get leader world position\n    var leader_pos = this.facLeaderMovementCandidate[0];\n\n    // Get my world position\n    var my_pos = this.transformAPI.getWorldPosition();\n\n    // Get the distance between me and the leader\n    var distance = MATH.distanceVec3(leader_pos, my_pos);\n    //console.log(\"facFollowBehavior: distance: \" + distance);\n\n    // If there is a big gap, go towards leader\n    if (distance > max_distance)\n    {\n        // Get the direction to the leader\n        var direction = MATH.subVec3(my_pos, leader_pos);\n\n        // We're not worried about the Z dimension\n        direction[2] = 0;\n\n        // Normalize the vector for the direction\n        var norm_direction = MATH.toUnitVec3(direction);\n\n        // Rotate the global normal direction to the local normal direction\n        norm_direction = this.transformAPI.globalToLocalRotation(norm_direction);\n\n        var x = norm_direction[0];\n        var y = norm_direction[1];\n\n        //console.log(\"x: \" + x);\n        //console.log(\"y: \" + y);\n\n        if (x < 1.01 && x > .99)\n        {\n            // we are heading toward the leader, no adjustment necessary   \n        }\n        else\n        {\n            // Turn towards the leader\n            // Because the model forward is x, anything with a positive y is to the model's left\n            if (y > 0)\n            {\n                if (x > 0) // 1st quadrant, minor turn\n                {\n                    this.turnLeft(.5);\n                }\n                else // 2nd quadrant, turn aggresively\n                {\n                    this.turnLeft(2);\n                }\n            }\n            else\n            {\n                if (x > 0) // 4th quadrant, minor turn\n                {\n                    this.turnRight(.5);\n                }\n                else // 3rd quadrant, turn aggressively \n                {\n                    this.turnRight(2);\n                }\n            }\n        }\n\n        // Go forward\n        var force = this.transformAPI.localToGlobalRotation(-10 * mass, 0, 0);\n        this.physicsAPI.addForceAtCenter(force);\n        this.playMotorRunning();\n    }\n\n    return;",
			"parameters": []
		},
		"turnLeft": {
			"body": "//console.log(\"Turn Left\");\n    var mass = this.physicsAPI.getMass();\n\n    var vel = this.physicsAPI.getLinearVelocity();\n    vel = this.transformAPI.globalToLocalRotation(vel);\n    var speedTorqueFactor = (Math.abs(vel[0]) / 3);\n\n    this.physicsAPI.addTorque(0, 0, peerValue * speedTorqueFactor * mass * 3);\n    var force = this.transformAPI.localToGlobal(peerValue * speedTorqueFactor * mass, 0, 0);\n    this.physicsAPI.addTorque(force);",
			"parameters": [
				"peerValue"
			]
		},
		"turnRight": {
			"body": "//console.log(\"Turn Right \" + peerValue);\n    var mass = this.physicsAPI.getMass();\n\n    var vel = this.physicsAPI.getLinearVelocity();\n    vel = this.transformAPI.globalToLocalRotation(vel);\n    var speedTorqueFactor = (Math.abs(vel[0]) / 3);\n\n    this.physicsAPI.addTorque(0, 0, peerValue * -speedTorqueFactor * mass * 3);\n    var force = this.transformAPI.localToGlobal(peerValue * -speedTorqueFactor * mass, 0, 0);\n    this.physicsAPI.addTorque(force);",
			"parameters": [
				"peerValue"
			]
		},
		"moveToAvoidPeer": {
			"body": "var peer_info = this.facPeerMovementCandidate;\n    \n    if (peer_info[1] == this.id) return;\n\n    var safe_distance = 40;\n    var mass = this.physicsAPI.getMass();\n\n    // Get peer world position\n    var peer_pos = peer_info[0];\n\n    // Get my world position\n    var my_pos = this.transformAPI.getWorldPosition();\n\n    // Get the distance between me and the leader\n    var distance = MATH.distanceVec3(peer_pos, my_pos);\n    //console.log(\"facFollowBehavior: distance: \" + distance);\n\n    if (distance < safe_distance)\n    {\n        //console.log(\"Move to Avoid Peer (\" + this.id + \")\");\n        var direction = MATH.subVec3(my_pos, peer_pos);\n        //console.log(\"diff: \" + direction);\n\n        direction[2] = 0;\n\n        var norm_direction = MATH.toUnitVec3(direction);\n\n        norm_direction = this.transformAPI.globalToLocalRotation(norm_direction);\n\n        var x = norm_direction[0];\n        var y = norm_direction[1];\n\n        //console.log(\"x: \" + x);\n        //console.log(\"y: \" + y);\n\n        var peer_heading = this.transformAPI.globalToLocalRotation(peer_info[2]);\n\n        //console.log(peer_heading);\n\n        // if the peer is headed right at me, then I should turn right\n        if (peer_heading[0] > 0 && Math.abs(peer_heading[1]) < .25)\n        {\n            //console.log(\"peer heading at me, turn right!\");\n            this.turnRight(1);\n        }\n        else\n        {\n            if (y >= 0)\n            {\n                if (x > 0) // 1st quadrant\n                {\n                    this.turnRight(1);\n                }\n                else // 2nd quadrant\n                {\n                    // 2nd quadrant -- angled sufficiently away\n                    if (this.facLeaderMovementCandidate.length > 0)\n                        this.moveTowardLeader();\n\n                    return;\n                }\n            }\n            else\n            {\n                if (x > 0) // 4th quardrant\n                {\n                    this.turnLeft(1);\n                }\n                else // 3rd quadrant\n                {\n                    // 3rd quadrant -- angled sufficiently away\n                    if (this.facLeaderMovementCandidate.length > 0)\n                        this.moveTowardLeader();\n\n                    return;\n                }\n            }\n        }\n    }\n\n    // Go forward\n    var force = this.transformAPI.localToGlobalRotation(-5 * mass, 0, 0);\n    this.physicsAPI.addForceAtCenter(force);\n    this.playMotorRunning();\n\n    return;",
			"parameters": []
		},
		"tick": {
			"body": "var my_position = this.transformAPI.getPosition();\n\n\n    this.tickCount++;\n    \n    if (this.tickCount > 3)\n    {\n        // Broadcast position and orientation to nearby peers\n        var local_forward = this.transformAPI.localToGlobalRotation(-1, 0, 0);\n\n        this.broadcast(\"facPeerInput\", [my_position, this.id, local_forward], 50);\n\n        this.tickCount = 0;\n    }\n\n    var waterDepth = 20;\n    var hullThick = 2.2;\n    var depthFloor = waterDepth + hullThick;\n    // The tick function is called 20 times every second.\n    // Write code here to animate over time\n    this.physicsAPI.addForceAtCenter(0, 0, 9.8);\n    this.physicsAPI.wake();\n    var mass = this.physicsAPI.getMass();\n    var corners = [\n        [this._length / 2, this.width / 2, 0],\n        [this._length / 2, -this.width / 2, 0],\n        [-this._length / 2, this.width / 2, 0],\n        [-this._length / 2, -this.width / 2, 0],\n    ];\n\n    this.counter++;\n    var rocking = -mass / 5;\n    this.physicsAPI.addForceOffset([0, 0, rocking], [Math.sin(this.counter / 30) * this._length, Math.cos(this.counter / 15) * this.width, 0]);\n    this.physicsAPI.addForceOffset([0, 0, rocking], [Math.cos(this.counter / 10) * this._length, Math.sin(this.counter / 10) * this.width, 0]);\n\n    for (var i = 0; i < corners.length; i++)\n    {\n        var corner = corners[i];\n        var worldCorner = this.transformAPI.localToGlobal(corner);\n        var depth = depthFloor - worldCorner[2];\n        depth = Math.min(depth, 5);\n        if (depth > 0)\n        {\n\n            this.physicsAPI.addForceOffset([0, 0, depth * mass * 9.8 / 3], Vec3.subtract(worldCorner, my_position, []));\n            var vel = this.physicsAPI.getLinearVelocity();\n            var torque = this.physicsAPI.getAngularVelocity();\n            //    vel[0] *= .6;\n            // vel[1] *= .6;\n            vel[2] *= 1 - depth / 50;\n\n            torque[0] *= 1 - depth / 100;\n            torque[1] *= 1 - depth / 100;\n            torque[2] *= 1 - depth / 100;\n            this.physicsAPI.setAngularVelocity(torque);\n            this.physicsAPI.setLinearVelocity(vel);\n        }\n        //  if (depth < 0)\n        {\n\n            this.physicsAPI.addForceOffset([0, 0, -mass * 9.8 / 4], Vec3.subtract(worldCorner, my_position, []));\n            var vel = this.physicsAPI.getLinearVelocity();\n            var torque = this.physicsAPI.getAngularVelocity();\n        }\n\n    }\n\n    var depth = depthFloor - my_position[2]\n    depth = Math.min(depth, 5);\n    if (depth > 0)\n    {\n\n        var vel = this.physicsAPI.getLinearVelocity();\n        vel = this.transformAPI.globalToLocalRotation(vel);\n        vel[0] *= 1.0 - depth / 100;\n        vel[1] *= 1.0 - depth / 30;\n        vel = this.transformAPI.localToGlobalRotation(vel);\n        this.physicsAPI.setLinearVelocity(vel);\n\n    }\n\n    if (this._keysDown.length == 0)\n    {\n        // No user input detected, so move based on AI\n        this.movementDecision();\n        return;\n    }\n\n    if (this._keysDown.indexOf(\"W\") !== -1)\n    {\n        this.consumeFuel();\n        if (this.currentState.name === this.states[\"out_of_gas\"].name)\n        {\n            console.log(\"(W) out of gas!\");\n            this.activateState(\"out_of_gas\");\n        }\n        else\n        {\n            var force = this.transformAPI.localToGlobal(-10 * mass, 0, 0);\n            this.physicsAPI.addForceAtCenter(force[0], force[1], force[2]);\n            this.playMotorRunning();\n            switch (this.FACMovementDirection())\n            {\n                case \"approaching\":\n                    this.activateState(\"approaching\");\n                    break;\n                case \"idle\":\n                    this.activateState(\"idle\");\n                    break;\n                case \"moving_away\":\n                    this.activateState(\"moving_away\");\n                    break;\n            }\n        }\n    }\n    if (this._keysDown.indexOf(\"S\") !== -1)\n    {\n        this.consumeFuel();\n        if (this.currentState.name === this.states[\"out_of_gas\"].name)\n        {\n            console.log(\"(S) out of gas!\");\n            this.activateState(\"out_of_gas\");\n        }\n        else\n        {\n            var force = this.transformAPI.localToGlobal(10 * mass, 0, 0);\n            this.physicsAPI.addForceAtCenter(force[0], force[1], force[2]);\n            this.playMotorRunning();\n            switch (this.FACMovementDirection())\n            {\n                case \"approaching\":\n                    this.activateState(\"approaching\");\n                    break;\n                case \"idle\":\n                    this.activateState(\"idle\");\n                    break;\n                case \"moving_away\":\n                    this.activateState(\"moving_away\");\n                    break;\n            }\n        }\n    }\n    var vel = this.physicsAPI.getLinearVelocity();\n    vel = this.transformAPI.globalToLocalRotation(vel);\n    var speedTorqueFactor = (Math.abs(vel[0]) / 3);\n    if (this._keysDown.indexOf(\"A\") !== -1)\n    {\n\n        this.physicsAPI.addTorque(0, 0, speedTorqueFactor * mass * 3);\n        var force = this.transformAPI.localToGlobal(speedTorqueFactor * mass, 0, 0);\n        this.physicsAPI.addTorque(force);\n    }\n    if (this._keysDown.indexOf(\"D\") !== -1)\n    {\n        this.physicsAPI.addTorque(0, 0, -speedTorqueFactor * mass * 3);\n        var force = this.transformAPI.localToGlobal(-speedTorqueFactor * mass, 0, 0);\n        this.physicsAPI.addTorque(force);\n    }\n    if (this._keysDown.indexOf(\" \") !== -1)\n    {\n        if (this.rockets > 0)\n        {\n            this.currentState = this.states[\"fire_rocket\"];\n        }\n        else\n        {\n            this.currentState = this.states[\"moving_away\"];\n        }\n    }",
			"parameters": []
		}
	},
	"children": {
		"N958e2662": {
			"extends": "asset.vwf",
			"source": "/sas/assets/c1064312",
			"type": "subDriver/threejs/asset/vnd.collada+xml",
			"sequence": 0,
			"random": {
				"s0": 0.375302,
				"s1": 0.872168,
				"s2": 0.110384,
				"c": 1
			},
			"properties": {
				"___physics_activation_state": 1,
				"___physics_deactivation_time": 0,
				"___physics_velocity_linear": [
					0,
					0,
					0
				],
				"___physics_velocity_angular": [
					0,
					0,
					0
				],
				"materialDef": {
					"alpha": 1,
					"ambient": {
						"b": 0.584,
						"g": 0.584,
						"r": 0.584
					},
					"blendMode": 1,
					"color": {
						"b": 1,
						"g": 1,
						"r": 1
					},
					"depthtest": true,
					"depthwrite": true,
					"emit": {
						"b": 0,
						"g": 0,
						"r": 0
					},
					"fog": true,
					"layers": [
						{
							"alpha": 1,
							"mapInput": 0,
							"mapTo": 1,
							"offsetx": 0,
							"offsety": 0,
							"scalex": 1,
							"scaley": 1,
							"src": "/sas/assets/7e6084c4"
						}
					],
					"metal": false,
					"reflect": 0.001,
					"shading": true,
					"shininess": 0.004002,
					"side": 0,
					"specularColor": {
						"b": 0,
						"g": 0,
						"r": 0
					},
					"specularLevel": 1,
					"type": "phong",
					"vertexColors": false,
					"wireframe": false
				},
				"DisplayName": "./vwfdatamanager.svc/DataFile/Navy/AttackSpeedBoat.dae1",
				"___assetServerOriginalID": "N958e2662",
				"owner": "ADLteam",
				"transform": [
					-9.999999974752427e-7,
					1,
					-9.999999974752427e-7,
					0,
					-1.0000009536743164,
					-9.999999974752427e-7,
					-9.999999974752427e-7,
					0,
					-9.999999974752427e-7,
					0,
					1,
					0,
					0.5,
					0,
					-0.5,
					1
				]
			}
		},
		"N8cf5a8e2": {
			"extends": "http://vwf.example.com/node3.vwf",
			"sequence": 0,
			"random": {
				"s0": 0.022454,
				"s1": 0.002702,
				"s2": 0.55584,
				"c": 1
			},
			"properties": {
				"DisplayName": "enginePos",
				"___assetServerOriginalID": "N8cf5a8e2",
				"glyphURL": "../vwf/view/editorview/images/icons/sphere.png",
				"owner": "ADLteam",
				"transform": [
					1,
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					-9.999999974752427e-7,
					0,
					1,
					0,
					3,
					0,
					-0.75,
					1
				],
				"transformAPI": {
					"COORDINATES": {
						"GLOBAL": "global",
						"LOCAL": "local",
						"PARENT": "parent"
					}
				},
				"worldTransform": [
					0.34133610129356384,
					0.9378132224082947,
					0,
					0,
					-0.9378132224082947,
					0.34133610129356384,
					0,
					0,
					-3.413360900594853e-7,
					-9.378132403980999e-7,
					0.9980000257492065,
					0,
					-16.47599220275879,
					-14.93656063079834,
					19.25149917602539,
					1
				]
			}
		},
		"N83e3ec00": {
			"extends": "box2.vwf",
			"source": "vwf/model/threejs/box.js",
			"type": "subDriver/threejs",
			"sequence": 0,
			"random": {
				"s0": 0.198099663946778,
				"s1": 0.0275812551844865,
				"s2": 0.352169041289017,
				"c": 1
			},
			"properties": {
				"___physics_activation_state": 1,
				"___physics_deactivation_time": 0,
				"___physics_velocity_linear": [
					0,
					0,
					0
				],
				"___physics_velocity_angular": [
					0,
					0,
					0
				],
				"DisplayName": "box7",
				"___assetServerOriginalID": "N83e3ec00",
				"_length": 3.45,
				"castShadows": false,
				"height": 1.13,
				"materialDef": {
					"alpha": 0,
					"ambient": {
						"b": 1,
						"g": 1,
						"r": 1
					},
					"blendMode": 1,
					"color": {
						"a": 0,
						"b": 1,
						"g": 1,
						"r": 1
					},
					"depthtest": true,
					"depthwrite": true,
					"emit": {
						"b": 0,
						"g": 0,
						"r": 0
					},
					"fog": true,
					"layers": [],
					"metal": false,
					"reflect": 0.8,
					"shadeless": false,
					"shading": true,
					"shadow": true,
					"shininess": 15,
					"side": 0,
					"specularColor": {
						"b": 0.577350269189626,
						"g": 0.577350269189626,
						"r": 0.577350269189626
					},
					"specularLevel": 1,
					"type": "phong",
					"vertexColors": false,
					"wireframe": false
				},
				"owner": "ADLteam",
				"renderDepth": 7,
				"transform": [
					1,
					0,
					9.999999974752427e-7,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					1,
					0,
					1,
					0,
					-0.2499990016222,
					1
				],
				"type": "Primitive",
				"width": 2.18
			}
		},
		"N8c4837dd": {
			"extends": "box2.vwf",
			"source": "vwf/model/threejs/box.js",
			"type": "subDriver/threejs",
			"sequence": 0,
			"random": {
				"s0": 0.778299,
				"s1": 0.286493,
				"s2": 0.191579,
				"c": 1
			},
			"properties": {
				"___physics_activation_state": 1,
				"___physics_deactivation_time": 0,
				"___physics_velocity_linear": [
					0,
					0,
					0
				],
				"___physics_velocity_angular": [
					0,
					0,
					0
				],
				"DisplayName": "MissileLauncher",
				"___assetServerOriginalID": "N8c4837dd",
				"height": 1.61,
				"materialDef": {
					"alpha": 1,
					"ambient": {
						"b": 1,
						"g": 1,
						"r": 1
					},
					"color": {
						"a": 1,
						"b": 1,
						"g": 1,
						"r": 1
					},
					"emit": {
						"b": 0,
						"g": 0,
						"r": 0
					},
					"layers": [
						{
							"alpha": 1,
							"blendMode": 0,
							"mapInput": 0,
							"mapTo": 1,
							"offsetx": 0,
							"offsety": 0,
							"rot": 0,
							"scalex": 1,
							"scaley": 1,
							"src": "checker.jpg"
						}
					],
					"reflect": 0.8,
					"shadeless": false,
					"shadow": true,
					"shininess": 15,
					"specularColor": {
						"b": 0.57735,
						"g": 0.57735,
						"r": 0.57735
					},
					"specularLevel": 1
				},
				"owner": "ADLteam",
				"transform": [
					0.08618500083684921,
					-0.022557999938726425,
					0.9960219860076904,
					0,
					0.0010019999463111162,
					-0.9997419714927673,
					-0.02273000031709671,
					0,
					0.9962769746780396,
					0.002956999931484461,
					-0.08614099770784378,
					0,
					1,
					0,
					1.5,
					1
				],
				"type": "Primitive",
				"visible": false,
				"width": 1.36,
				"worldTransform": [
					0.05057324096560478,
					0.07312557101249695,
					0.9940299391746521,
					0,
					0.9379132390022278,
					-0.3403083384037018,
					-0.02268454059958458,
					0,
					0.3372921943664551,
					0.9353310465812683,
					-0.08596871793270111,
					0,
					-17.15866470336914,
					-16.81218719482422,
					21.496999740600586,
					1
				]
			},
			"events": {
				"pointerClick": {
					"parameters": [
						"                                                                eventData",
						"                                                                nodeData                                                                "
					],
					"body": "\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n                                            this.parent.launchMissile()                     "
				}
			}
		}
	}
}