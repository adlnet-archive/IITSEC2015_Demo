{
	"extends": "http://vwf.example.com/node3.vwf",
	"sequence": 0,
	"random": {
		"s0": 0.29352508392185,
		"s1": 0.883330501848832,
		"s2": 0.402575579239056,
		"c": 1
	},
	"properties": {
		"DisplayName": "xAPISender",
		"EditorData": {
			"baseURL": {
				"displayname": "Base URL",
				"property": "baseURL",
				"type": "text"
			}
		},
		"___sourceAssetTimestamp": "Thu Nov 05 2015 15:24:52 GMT-0500 (Eastern Standard Time)",
		"baseURL": "https://sandbox.adlnet.gov/",
		"glyphURL": "../vwf/view/editorview/images/icons/sphere.png",
		"owner": "ADLteam",
		"sourceAssetId": "6acb0557",
		"stmtId": "",
		"transform": [
			1,
			0,
			0,
			0,
			0,
			1,
			0,
			0,
			0,
			0,
			1,
			0,
			-73.90245819091797,
			14.370853424072266,
			0.20895880460739136,
			1
		],
		"worldTransform": [
			1,
			0,
			0,
			0,
			0,
			1,
			0,
			0,
			0,
			0,
			1,
			0,
			-73.90245819091797,
			14.370853424072266,
			0.20895880460739136,
			1
		]
	},
	"methods": {
		"send50Cal": {
			"body": "/*\n    Code for sending xAPI statements from 50 Cal in demo\n    The 50 Cal fires bullets, simulated by raycast,\n    so in the instant it is fired, we know what it has hit.\n    We don't want to send a statement every bullet, we'd like\n    to send a statement every burst. Am using a boolean variable\n    to do this.  Want to also collect info from every bullet and\n    send the collective info in the burst statement.  So let's \n    pin down what the statement should look like, and what we\n    want to collect from the bullets and send with the burst.\n    Seems simple enough.\n    */\n\n    //vars to make it work, but to be ignored when pasting into place\n    var origin, dir, hit, started, ended;\n\n    //1 - Burst Statement\n    var sender = this.Scene.children_by_name.xAPISender;\n    if (sender)\n    {\n\n        // sender.xAPISend(\"fired\", \"object\", \"Small Craft Action Team\",\n        //     result /*optional - see result object*/ ,\n        //     conExt /*optional - see context.extesions object*/ );\n\n        //2 - Info from bullets - still inside the if sender\n        var startT, dur, roundsFired, numHits, hits;\n        if (!started)\n        {\n            startT = this.Scene.time;\n            hits = [];\n            ended = false;\n            started = true;\n            roundsFired = 0;\n            this.burstCount++; //make this a property\n        }\n        roundsFired++;\n        if (hit /*we have hit something significant*/ )\n        {\n            numHits++;\n            var newObj = true;\n            for (var i in hits)\n            {\n                if (hits[i] === hit)\n                    newObj = false;\n            }\n            if (newObj)\n                hits.push(hit); //or hit.node, or hit.node.DisplayName\n        }\n        // if (ended) //there might be a better word/way to accomplish\n        {\n            started = false;\n            dur = this.Scene.time - startT;\n\n            //3 - build objects for statement\n            var result = {\n                score:\n                {\n                    max: /*roundsFired ||*/ 140,\n                    raw: /*numHits ||*/ 45,\n                    min: 0,\n                    scaled: numHits / roundsFired || 0.321 //remove or 0.321 when in place\n                },\n                success: (hits.length > 0),\n                duration: \"PT\" + Math.floor(dur) + \"S\", //a real end - start number of the burst\n                response: \"scaled is the hit/fired ratio\"\n            };\n            var conExt = {\n                \"https://sandbox.adlnet.gov/context/extensions/scene/time/\": Math.floor(this.Scene.time * 1000) / 1000,\n                \"https://sandbox.adlnet.gov/context/extensions/objectHit\": JSON.stringify(hits) || \"broadside of barn\", //hit.node.DisplayName/hit.node.id\n                \"https://sandbox.adlnet.gov/context/extensions/userControlled\": \"\" + (this.isUserControlled || true),\n                \"https://sandbox.adlnet.gov/context/extensions/target\": this.targetID || \"no target\",\n                \"https://sandbox.adlnet.gov/context/extensions/shipStatus\": this.Scene.children_by_name[\"DDG51\"].engine || \"status error\",\n            };\n\n            //4 - Send it - inside if(ended),  inside if(sender)\n            sender.xAPISend(\"fired\", \"burst\" + (this.burstCount || 0), \"Small Craft Action Team\",\n                result /*optional - see result object*/ ,\n                conExt /*optional - see context.extesions object*/ );\n        } //if(ended)\n\n    } //if(sender)\n\n    /*\n    result object - object to be appended as result\n    {\n     \"score\": { \"scaled\": float, \"raw\": int, \"min\": int, \"max\": int },\n     \"success\": boolean,\n     \"completion\": boolean,\n     \"response\": string,\n     \"duration\": ISO 8601 duration\n     \"extensions\": { \"key must be valid URI\": value (any JSON type)}\n    }\n    */\n\n    /*\n    conExt - object to be appended to context.extensions\n    {\n     \"key must be valid URI\": value (any JSON type),\n     include:\n       \"https://sandbox.adlnet.gov/context/extensions/scene/time/\": this.Scene.time,\n    }\n    */",
			"parameters": []
		},
		"send5Inch": {
			"body": "console.log(\"send 5 Inch statement\");\n    //vars to make it work until it goes where it belongs\n    var hit, pos;\n\n    var sender = this.Scene.children_by_name.xAPISender;\n    if (sender)\n    {\n        var result = {\n            success: (hit) || true,\n            response: \"success = hit - t, or miss - f\"\n        };\n        var conExt = {\n            \"https://sandbox.adlnet.gov/context/extensions/scene/time/\": Math.floor(this.Scene.time * 1000) / 1000,\n            \"https://sandbox.adlnet.gov/context/extensions/position/\": pos || \"this is where the position goes\",\n            \"https://sandbox.adlnet.gov/context/extensions/target/\": this.targetID || \"this is where the targetID goes\",\n            \"https://sandbox.adlnet.gov/context/extensions/objectHit/\": pos || \"broadside of barn\",\n            \"https://sandbox.adlnet.gov/context/extensions/userControlled/\": this.isUserControlled,\n            \"https://sandbox.adlnet.gov/context/extensions/shipstatus/\": this.Scene.children_by_name['DDG51'].engine || 'status error',\n        };\n        sender.xAPISend('fired', 'shell', this.DisplayName || \"TAO 5 Inch Gun\", result, conExt, null);\n    }",
			"parameters": []
		},
		"sendMissileLaunch": {
			"body": "console.log(\"send Missile Launch\");\n    //vars to make it work outside of where it belongs\n    var obstacle, pos;\n\n    var sender = this.Scene.children_by_name.xAPISender;\n    if (sender)\n    {\n        var missId = ADL.ruuid();\n        // def.stmtId = missId; //make sure to include this once added to fac and seahawk\n        var conExt = {\n            \"https://sandbox.adlnet.gov/context/extensions/target\": this.target_data || \"no target\",\n            \"https://sandbox.adlnet.gov/context/extensions/missileId\": \"Missile#2\", //(this.id + this.DisplayName) || \"Missile#2\",\n            \"https://sandbox.adlnet.gov/context/extensions/firePosition\": pos || \"this is where the missile began\",\n            \"https://sandbox.adlnet.gov/context/extensions/scene/time/\": Math.floor(this.Scene.time * 1000) / 1000,\n        };\n        sender.xAPISend(\"launched\", (this.DisplayName + this.ID) /*missile.DisplayName*/ , 'Seahawk or FAC', null, conExt, missId);\n    }",
			"parameters": []
		},
		"xAPISend": {
			"body": "//xAPISend in the xAPISender entity\n    //Sends an xAPI sttement for tracking in an lrs\n    // \n    //Accepts:\n    //verbage - verb / action - string\n    //obj - xapi object, can be a string or an object\n    //role - role assumed in the simulation - string\n    //res - object to be added as result - object\n    // {\n    //  \"score\": { \"scaled\": float, \"raw\": int, \"min\": int, \"max\": int },\n    //  \"success\": boolean,\n    //  \"completion\": boolean,\n    //  \"response\": string,\n    //  \"duration\": ISO 8601 duration\n    //  \"extensions\": { \"key must be valid URI\": value (any JSON type) }\n    // }\n    //conExt - object to be appended to context.extensions\n    // { \"key must be valid URI\": value (any JSON type),\n    //   include:\n    //     \"https://sandbox.adlnet.gov/context/extensions/scene/time/\": this.Scene.time,\n    // }\n    //stmtId - ruuid for tracking multiple related statements\n    // in this case used with missile - launch and hit\n    // \n    //Returns:\n    //contructs and sends an xapi statement to an lrs\n\n    // console.log(role + \" xAPI Send\");\n\n    //1 - Registration for the run of this game\n    if (!this.Scene.attempt)\n    {\n        this.Scene.attempt = ADL.ruuid();\n    }\n\n    //2 - Wrapper setup\n    var conf = {\n        \"endpoint\": \"https://lrs.adlnet.gov/xapi/\",\n        \"auth\": \"Basic \" + toBase64('iitsecDemo:1234'),\n    };\n    this.Scene.___xAPI.configure(conf);\n\n    //3 - Who is playing\n    var actor = {\n        account:\n        {\n            name: _UserManager.GetCurrentUserName(),\n            homePage: this.baseURL, //\"https://sandbox.adlnet.gov/\",\n        },\n        name: _UserManager.GetCurrentUserName(),\n    };\n\n    //4 - Verb = did\n    var v = encodeURI(verbage);\n    var verb = {\n        id: this.baseURL + \"verbs/\" + v,\n        display:\n        {\n            \"en-US\": v || \"default\",\n        }\n    };\n\n    //5 - Object - to whom - What happened and where\n    var object;\n    if (verbage === 'started')\n    {\n        //if this is the start of the demo we give a special object\n        obj = window.location.toString() + \"attempt/\" + this.Scene.attempt;\n        object = {\n            id: obj,\n            definition:\n            {\n                name:\n                {\n                    \"en-US\": encodeURI(this.Scene.attempt)\n                },\n                description:\n                {\n                    \"en-US\": _DataManager.getInstanceData().title\n                }\n            }\n        };\n    }\n    else //otherwise we proceed to put together a typical object\n    {\n        //if they give us an object, send it on\n        if (obj && typeof obj === 'object')\n        {\n            object = obj;\n        }\n        //otherwise attach the string like so, and . . . \n        else\n        {\n            object = {\n                id: this.baseURL + \"objects/\" + (encodeURI(obj) || \"object\"),\n                definition:\n                {\n                    name:\n                    {\n                        \"en-US\": encodeURI(obj)\n                    }\n                }\n            };\n        }\n    }\n\n    //6 - Additional context\n    var contextActivities = {\n        \"category\": [\n            {\n                \"id\": this.baseURL + \"event/2015/iitsecdemo\"\n            },\n            {\n                \"id\": this.baseURL + \"role/\" + (encodeURI(role) || \"default\")\n            },\n        ],\n        \"grouping\": [\n            {\n                \"id\": window.location.toString(),\n            },\n            {\n                \"id\": window.location.toString() + \"attempt/\" + this.Scene.attempt\n            },\n        ],\n        \"other\": [\n            {\n                \"id\": _DataManager.getCurrentApplication(),\n                definition:\n                {\n                    type: this.baseURL + \"world\"\n                }\n            }\n        ],\n    };\n\n    //8 - Roll it all into one statement\n    var stmt = new ADL.XAPIStatement(actor, verb, object);\n\n    stmt.addParentActivity(new ADL.XAPIStatement.Activity(window.location.toString(), _DataManager.getInstanceData().title, _DataManager.getInstanceData.description, this.Scene.attempt));\n    stmt.context.contextActivities = contextActivities;\n\n    if (conExt) //6.5 - add context.extesions\n    {\n        stmt.context.extensions = conExt;\n    }\n    else\n    {\n        stmt.context.extensions = {\n            \"https://sandbox.adlnet.gov/context/extensions/scene/time/\": this.Scene.time,\n        };\n    }\n\n    if (res) stmt.result = res; //7 - add a result\n    stmt.timestamp = new Date().toISOString();\n\n    if (stmtId) //6.75 Statment ID for tracking projectiles\n    {\n        stmt.context.statement = {\n            objectType: \"StatementRef\",\n            id: stmtId\n        }\n    }\n    // console.log(JSON.stringify(stmt, null, 4));\n\n    this.Scene.___xAPI.sendStatement(null, stmt);",
			"parameters": [
				"verbage",
				"obj",
				"role",
				"res",
				"conExt",
				"stmtId"
			]
		},
		"sendMissileHit": {
			"body": "console.log(\"send Missile Hit\");\n    //vars to make it work outside of where it belongs\n    var obstacle;\n\n    var sender = this.Scene.children_by_name.xAPISender;\n    if (sender)\n    {\n        var result = {\n            success: (objHit === this.target_data) || false, //hit = t, miss = f\n            // response: \"You betchya\"\n        };\n        var conExt = {\n            \"https://sandbox.adlnet.gov/context/extensions/target\": this.target_data,\n            \"https://sandbox.adlnet.gov/context/extensions/objectHit\": objHit || \"obstacle\", //(obstacle.id + obstacle.DisplayName) || \"obstacle\",\n            \"https://sandbox.adlnet.gov/context/extensions/missileId\": \"Missile#2\", //(this.id + this.DisplayName) || \"Missile#2\",\n            \"https://sandbox.adlnet.gov/context/extensions/position\": this.transformAPI.getWorldPosition(),\n            \"https://sandbox.adlnet.gov/context/extensions/scene/time/\": Math.floor(this.Scene.time * 1000) / 1000,\n        };\n        sender.xAPISend(\"hit\", 'What the missile hit' /*obstacle.DisplayName*/ , (this.DisplayName + this.ID), result, conExt, this.stmtId /*this.stmtId*/ );\n    }",
			"parameters": [
				"objHit"
			]
		},
		"senderSnippet": {
			"body": "/*Generic code for sending xAPI statements from demo*/\n\n    var sender = this.Scene.children_by_name.xAPISender;\n    if (sender)\n    {\n        sender.xAPISend(\"verb\", \"object\", \"role\",\n            null /*optional - see result object*/ ,\n            null /*optional - see context.extesions object*/ ,\n            null /*optional - statement Id for grouping statements like missile launch and hit*/ );\n    }\n\n    /*\n    result object - object to be appended as result\n    {\n     \"score\": { \"scaled\": float, \"raw\": int, \"min\": int, \"max\": int },\n     \"success\": boolean,\n     \"completion\": boolean,\n     \"response\": string,\n     \"duration\": ISO 8601 duration\n     \"extensions\": { \"key must be valid URI\": value (any JSON type)}\n    }\n    */\n\n    /*\n    conExt - object to be appended to context.extensions\n    {\n     \"key must be valid URI\": value (any JSON type),\n     include:\n       \"https://sandbox.adlnet.gov/context/extensions/scene/time/\": this.Scene.time,\n    }\n    */",
			"parameters": []
		}
	}
}