{
	"extends": "SandboxCamera.vwf",
	"source": "vwf/model/threejs/camera.js",
	"type": "subDriver/threejs",
	"sequence": 0,
	"random": {
		"s0": 0.898159096715972,
		"s1": 0.551168398233131,
		"s2": 0.348852874245495,
		"c": 1
	},
	"properties": {
		"": null,
		"DisplayName": "FreeCamera",
		"EditorData": {
			"acceleration": {
				"displayname": "Keypress Acceleration",
				"max": 1,
				"min": 0,
				"property": "acceleration",
				"step": 0.1,
				"type": "slider"
			},
			"velocity": {
				"displayname": "Initial Velocity",
				"max": 5,
				"min": 0,
				"property": "velocity",
				"step": 0.1,
				"type": "vector"
			}
		},
		"___sourceAssetTimestamp": "Wed Nov 04 2015 15:58:45 GMT-0500 (Eastern Standard Time)",
		"acceleration": 0.1,
		"lastX": 0.410759493670886,
		"lastY": 0.90927624872579,
		"owner": "ADLteam",
		"relX": 0,
		"relY": 0,
		"sourceAssetId": "4f23110d",
		"transform": [
			1,
			0,
			0,
			0,
			0,
			0.9990000128746033,
			0,
			0,
			0,
			0,
			1,
			0,
			3.3910000324249268,
			0.46000000834465027,
			3,
			1
		],
		"velocity": [
			0,
			0
		],
		"worldTransform": [
			1,
			0,
			0,
			0,
			0,
			0.9990000128746033,
			0,
			0,
			0,
			0,
			1,
			0,
			3.3910000324249268,
			0.46000000834465027,
			3,
			1
		]
	},
	"methods": {
		"deinitialize": {
			"body": "\n  this.Scene.unbind('keyUp', this.keyUp);\n      //This function was created for you by the system. \n      //Deinitialize is called when the object is being destroyed.\n      // Clean up here if your object allocated any resources manually during initialize.\n",
			"parameters": []
		},
		"handleMovement": {
			"body": "var maxV = 1.3;\n    this.velocity[0] = 0;\n    this.velocity[1] = 0;\n\n    if (this.key.D)\n        this.velocity[0] = maxV;\n    if (this.key.A)\n        this.velocity[0] = -maxV;\n    if (this.key.W)\n        this.velocity[1] = maxV;\n    if (this.key.S)\n        this.velocity[1] = -maxV;\n\n    if (!(this.velocity[0] == 0 && this.velocity[1] == 0))\n    {\n        console.log(\"Key pressed on free camera\", e, this.velocity, this.acceleration);\n        this.transformAPI.move(this.velocity[0], this.velocity[1], 0, this.transformAPI.COORDINATES.LOCAL);\n    }",
			"parameters": []
		},
		"ready": {
			"body": "this.Scene.unbind('keyUp', this._keyUp);\n    this.Scene.unbind('keyDown', this._keyDown);\n    this.Scene.unbind('pointerMove', this.pointermoved);\n    this.Scene.unbind('pointerDown', this.pointerdown);\n    this.Scene.unbind('pointerUp', this.pointerup);\n\n    var self = this;\n    this.key = {\n        W: false,\n        A: false,\n        S: false,\n        D: false\n    };\n    this.pointer = false;\n    this.velocity = [0, 0];\n\n    this.pointermoved = function(event)\n    {\n        self.relX = self.lastX - event.position[0];\n        self.relY = self.lastY - event.position[1];\n        self.lastX = event.position[0];\n        self.lastY = event.position[1];\n\n        console.log(\"Pointer moved\", self.relX);\n    }\n    this.pointerdown = function(event)\n    {\n        self.pointer = true;\n        self.lastX = event.position[0];\n        self.lastY = event.position[1];\n\n        console.log(\"Pointer down\", self.relX);\n    }\n    this.pointerup = function(event)\n    {\n        self.pointer = false;\n    }\n\n    this._keyDown = function(e, d)\n    {\n        console.log(\"Key down\");\n        if (e.key.key in self.key) self.key[e.key.key] = true;\n    }\n\n    this._keyUp = function(e, d)\n    {\n        if (e.key.key in self.key) self.key[e.key.key] = false;\n    };\n\n    this.Scene.bind('keyUp', this._keyUp);\n    this.Scene.bind('keyDown', this._keyDown);\n    this.Scene.bind('pointerMove', this.pointermoved);\n    this.Scene.bind('pointerDown', this.pointerdown);\n    this.Scene.bind('pointerUp', this.pointerup);\n    //This function was created for you by the system. \n    //The scene is now completely loaded. This will fire on each client when the client joins, so it`s not a great place to create objects",
			"parameters": []
		},
		"tick": {
			"body": "if (this.pointer)\n    {\n        this.transformAPI.rotateZ(this.relX * 500, this.transformAPI.COORDINATES.GLOBAL);\n        this.transformAPI.rotateX(this.relY * 200, this.transformAPI.COORDINATES.LOCAL);\n        this.relX = 0;\n        this.relY = 0;\n    }\n\n    this.handleMovement();",
			"parameters": []
		}
	}
}