{
	"extends": "box2.vwf",
	"source": "vwf/model/threejs/box.js",
	"type": "subDriver/threejs",
	"sequence": 0,
	"random": {
		"s0": 0.422687349608168,
		"s1": 0.08382592583075166,
		"s2": 0.025831252802163363,
		"c": 158251
	},
	"properties": {
		"___physics_activation_state": 4,
		"___physics_deactivation_time": 0,
		"___physics_velocity_linear": [
			-0.01912243291735649,
			0.10449027270078659,
			-0.0032515337225049734
		],
		"___physics_velocity_angular": [
			0.02765009179711342,
			-0.1445750892162323,
			0.00038580354885198176
		],
		"DisplayName": "FAC_MASTER5",
		"EditorData": {
			"_controllingCamera": {
				"displayname": "Controlling Camera",
				"property": "controllingCamera",
				"type": "nodeid"
			},
			"aiState": {
				"displayname": "AI Behavior",
				"labels": [
					"attack",
					"flee",
					"wait"
				],
				"property": "aiActiveState",
				"type": "choice",
				"values": [
					"attack",
					"flee",
					"wait"
				]
			},
			"aiTargetID": {
				"displayname": "Target Object",
				"property": "aiTargetID",
				"type": "nodeid"
			},
			"bullets_50_cal": {
				"displayname": "Bullets (50 cal)",
				"max": 100000,
				"min": 1,
				"property": "bullets_50_cal",
				"type": "slider"
			},
			"fuel": {
				"displayname": "Fuel",
				"max": 1000,
				"min": 1,
				"property": "fuel",
				"type": "slider"
			},
			"fuelConsumptionRate": {
				"displayname": "Fuel Consumption Rate",
				"max": 1,
				"min": 0,
				"property": "fuelConsumptionRate",
				"step": 0.01,
				"type": "slider"
			},
			"health": {
				"displayname": "Health",
				"max": 1000,
				"min": 1,
				"property": "health",
				"type": "slider"
			},
			"hostile": {
				"displayname": "Hostile",
				"property": "hostile",
				"type": "check"
			},
			"hullStrength": {
				"displayname": "Hull Strength",
				"max": 1000,
				"min": 1,
				"property": "hullStrength",
				"type": "slider"
			},
			"rangeToTarget": {
				"displayname": "Range to Target",
				"max": 5000,
				"min": 0,
				"property": "rangeToTarget",
				"step": 100,
				"type": "slider"
			},
			"rockets": {
				"displayname": "Rockets",
				"max": 25,
				"min": 0,
				"property": "rockets",
				"type": "slider"
			}
		},
		"___physics_angular_velocity": [
			-0.0205620388669852,
			0.137373529226051,
			0.000692897715996474
		],
		"___physics_damping": 0.4,
		"___physics_enabled": true,
		"___physics_linear_velocity": [
			-0.115731220145219,
			0.602527779520543,
			-0.000487978426872444
		],
		"___physics_mass": 8051.2,
		"___sourceAssetTimestamp": "Thu Nov 05 2015 11:29:53 GMT-0500 (Eastern Standard Time)",
		"_keysDown": [],
		"_length": 7,
		"activeState": "active",
		"aiActiveState": "attack",
		"aiStates": {
			"attack": {
				"updateFunc": "aiAttack"
			},
			"circle": {
				"updateFunc": "aiCircle"
			},
			"circlecc": {
				"updateFunc": "aiCirclecc"
			},
			"defeated": {
				"updateFunc": "aiDefeated"
			},
			"fire": {
				"updateFunc": "aiFire"
			},
			"flee": {
				"updateFunc": "aiFlee"
			},
			"moveAway": {
				"updateFunc": "aiMoveAway"
			},
			"shoot": {
				"updateFunc": "aiShoot"
			},
			"wait": {
				"updateFunc": "aiWait"
			}
		},
		"aiTargetID": "asset-vwf-N2df8a11e",
		"bullets_50_cal": 987,
		"controllingCamera": "SandboxCamera-vwf-N97c41375",
		"counter": 14602,
		"currentState": {
			"name": "idle",
			"properties": {},
			"transitionFunction": "idleTransition",
			"transitions": [
				"moving_away",
				"idle",
				"out_of_gas",
				"colliding",
				"defeated"
			],
			"updateFunction": "idleUpdate"
		},
		"destroyedFACDef": {
			"extends": "SandboxParticleSystem.vwf",
			"properties": {
				"DisplayName": "ParticleSystem1",
				"alphaRange": 0,
				"alphaTest": 0,
				"colorRange": [
					0,
					0,
					0,
					0
				],
				"depthTest": false,
				"emitterType": "point",
				"endAlpha": 0.04,
				"endColor": [
					0,
					0,
					0,
					0.04
				],
				"endSize": 0.95,
				"gravity": 0.77,
				"image": "../vwfDataManager.svc/texture?UID=water.png",
				"maxAcceleration": [
					0,
					0,
					9.82
				],
				"maxLifeTime": 1,
				"maxRate": 0.614,
				"maxVelocity": [
					1,
					1,
					0
				],
				"minAcceleration": [
					0,
					0,
					9.82
				],
				"minLifeTime": 1,
				"minVelocity": [
					-1,
					-1,
					0
				],
				"owner": "ADLteam",
				"particleCount": 200,
				"rotation": [
					1,
					0,
					0,
					0
				],
				"sizeRange": 0.02,
				"solver": "AnalyticShader",
				"startAlpha": 1,
				"startColor": [
					1,
					1,
					1,
					1
				],
				"startSize": 0.17,
				"textureTiles": 4,
				"transform": [
					1,
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					1
				],
				"type": "ParticleSystem",
				"velocityMode": "cartesian"
			},
			"random": {
				"c": 1,
				"s0": 0.0699641346000135,
				"s1": 0.0342938848771155,
				"s2": 0.282638816628605
			},
			"sequence": 0
		},
		"editorData": {
			"controllingCamera": {
				"displayName": "controllingCamera",
				"type": "nodeID"
			}
		},
		"explosionDef": {
			"continues": "/sas/assets/d3402bc3",
			"properties": {
				"transform": [
					1,
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					1
				]
			}
		},
		"fuel": 100,
		"fuelConsumptionRate": 0.01,
		"health": 100,
		"height": 1.2,
		"hostile": true,
		"hullStrength": 100,
		"isSlave": false,
		"materialDef": {
			"alpha": 1,
			"ambient": {
				"b": 1,
				"g": 1,
				"r": 1
			},
			"blendMode": 1,
			"color": {
				"a": 1,
				"b": 1,
				"g": 1,
				"r": 1
			},
			"depthtest": true,
			"depthwrite": true,
			"emit": {
				"b": 0,
				"g": 0,
				"r": 0
			},
			"fog": true,
			"layers": [
				{
					"alpha": 1,
					"blendMode": 0,
					"mapInput": 0,
					"mapTo": 1,
					"offsetx": 0,
					"offsety": 0,
					"rot": 0,
					"scalex": 1,
					"scaley": 1,
					"src": "checker.jpg"
				}
			],
			"metal": false,
			"reflect": 0.8,
			"shadeless": false,
			"shading": true,
			"shadow": true,
			"shininess": 15,
			"side": 0,
			"specularColor": {
				"b": 0.57735,
				"g": 0.57735,
				"r": 0.57735
			},
			"specularLevel": 1,
			"type": "phong",
			"vertexColors": false,
			"wireframe": false
		},
		"missileDef": {
			"continues": "/sas/assets/73e8a4a3",
			"properties": {
				"fired": true,
				"hostile": true,
				"launchedBy": "",
				"transform": [
					-0.0762954279780388,
					-0.237075358629227,
					0.965390503406525,
					0,
					-0.99064576625824,
					0.0857895240187645,
					-0.0572697445750237,
					0,
					-0.0695339739322662,
					-0.964585840702057,
					-0.242373660206795,
					0,
					3.59735655784607,
					-5.4985818862915,
					1.50930178165436,
					1
				]
			}
		},
		"owner": "ADLteam",
		"physicsAPI": {},
		"radarTracked": true,
		"rangeToTarget": 1000,
		"rockets": 5,
		"smokeDef": {
			"continues": "/sas/assets/aeb3d1dd",
			"properties": {
				"targetEntity": "-sas-assets-73e8a4a3-N4527da8",
				"transform": [
					1,
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					1
				]
			}
		},
		"sourceAssetId": "1ad6adad",
		"states": {
			"approaching": {
				"name": "approaching",
				"properties": {},
				"transitionFunction": "approachingTransition",
				"transitions": [
					"approaching",
					"moving_away",
					"idle",
					"out_of_gas",
					"fire_rocket",
					"colliding",
					"defeated"
				],
				"updateFunction": "approachingUpdate"
			},
			"colliding": {
				"name": "colliding",
				"properties": {},
				"transitionFunction": "collidingTransition",
				"transitions": [
					"colliding",
					"defeated"
				],
				"updateFunction": "collidingUpdate"
			},
			"defeated": {
				"name": "defeated",
				"properties": {},
				"transitionFunction": "defeatedTransition",
				"transitions": [
					"defeated"
				],
				"updateFunction": "defeatedUpdate"
			},
			"fire_rocket": {
				"name": "fire_rocket",
				"properties": {},
				"transitionFunction": "fire_rocketTransition",
				"transitions": [
					"approaching",
					"fire_rocket",
					"moving_away",
					"idle",
					"colliding",
					"defeated"
				],
				"updateFunction": "fire_rocketUpdate"
			},
			"idle": {
				"name": "idle",
				"properties": {},
				"transitionFunction": "idleTransition",
				"transitions": [
					"moving_away",
					"idle",
					"out_of_gas",
					"colliding",
					"defeated"
				],
				"updateFunction": "idleUpdate"
			},
			"moving_away": {
				"name": "moving_away",
				"properties": {},
				"transitionFunction": "moving_awayTransition",
				"transitions": [
					"moving_away",
					"idle",
					"out_of_gas",
					"colliding",
					"defeated"
				],
				"updateFunction": "moving_awayUpdate"
			},
			"out_of_gas": {
				"name": "out_of_gas",
				"properties": {},
				"transitionFunction": "out_of_gasTransition",
				"transitions": [
					"out_of_gas",
					"colliding",
					"defeated"
				],
				"updateFunction": "out_of_gasUpdate"
			}
		},
		"tickCount": 0,
		"transform": [
			-0.08684134483337402,
			-0.9932061433792114,
			-0.0030323993414640427,
			0,
			0.9916055202484131,
			-0.08680711686611176,
			0.03462764248251915,
			0,
			-0.034794799983501434,
			1.679644583418849e-7,
			0.9963926672935486,
			0,
			7.3971967697143555,
			-4.82191801071167,
			20.034221649169922,
			1
		],
		"type": "Primitive",
		"visible": false,
		"warningsReceived": 0,
		"width": 2.5,
		"worldPosition": [
			7.3971967697143555,
			-4.82191801071167,
			20.034221649169922
		],
		"worldTransform": [
			-0.08684134483337402,
			-0.9932061433792114,
			-0.0030323993414640427,
			0,
			0.9916055202484131,
			-0.08680711686611176,
			0.03462764248251915,
			0,
			-0.034794799983501434,
			1.679644583418849e-7,
			0.9963926672935486,
			0,
			7.3971967697143555,
			-4.82191801071167,
			20.034221649169922,
			1
		],
		"userControlCounter": 0
	},
	"methods": {
		"FACMovementDirection": {
			"body": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                // set equal to \"\" after adding calculations:\n                                var movement = \"closing\";\n                                // Perform calculations to determine approaching or moving away states:\n                                //     movement = \"closing\" if distance to target is getting smaller\n                                //     movement = \"none\" if distance to target hasn't changed\n                                //     movement = \"increasing\" if distance to target is getting larger\n                                switch (movement)\n                                {\n                                    case \"closing\":\n                                        this.currentState = this.states[\"approaching\"];\n                                        return \"approaching\";\n                                    case \"none\":\n                                        this.currentState = this.states[\"idle\"];\n                                        return \"idle\";\n                                    case \"increasing\":\n                                        this.currentState = this.states[\"moving_away\"];\n                                        return \"moving_away\";\n                                }    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
			"parameters": []
		},
		"activateState": {
			"body": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                //console.log(\"activateState\");\n                                var state = this.states[statename];\n\n                                if (this.currentState.transitions.indexOf(statename) == -1)\n                                {\n                                    console.log(\"invalid transition!\");\n                                    return;\n                                }\n\n                                if (state.transitionFunction)\n                                    this[state.transitionFunction](this.currentState);\n\n                                this.currentState = state;\n\n                                for (var i in state.properties)\n                                {\n                                    console.log(state.properties[i]);\n                                    this[i] = state.properties[i];\n                                }    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
			"parameters": [
				"statename"
			]
		},
		"aiAttack": {
			"body": "var attachRange = 100;\n    var target = this.Scene.findNodeByID(this.aiTargetID);\n    var targetPos;\n    if (target)\n    {\n        targetPos = target.transformAPI.getWorldPosition();\n        targetPos = this.transformAPI.globalToLocal(targetPos);\n        if (MATH.lengthVec3(targetPos) > 100)\n        {\n            if (targetPos[1] > 0)\n                this.doTurn('right')\n            else\n                this.doTurn('left');\n        }\n        else\n        {\n            if(this.random() < .5)\n            this.aiActiveState = \"circle\";\n            else\n            this.aiActiveState = \"circlecc\";\n        }\n        if (MATH.lengthVec3(targetPos) > 10)\n        {\n            this.doMoveForward();\n        }\n    }",
			"parameters": []
		},
		"aiCircle": {
			"body": "var attackRange = 300;\n    var target = this.Scene.findNodeByID(this.aiTargetID);\n    var targetPos;\n    if (target)\n    {\n        targetPos = target.transformAPI.getWorldPosition();\n        targetPos = this.transformAPI.globalToLocal(targetPos);\n        if (MATH.lengthVec3(targetPos) < attackRange)\n        {\n            if (targetPos[0] > 0)\n                this.doTurn('right')\n            else\n                this.doTurn('left');\n        }\n        else\n        {\n            this.aiActiveState = 'attack';\n        }\n\n        if (MATH.lengthVec3(targetPos) < 150)\n        {\n            this.aiActiveState = \"moveAway\";\n        }\n\n        if (MATH.lengthVec3(targetPos) > 10)\n        {\n            this.doMoveForward();\n        }\n        if (this.random() > .995)\n            this.aiActiveState = \"circlecc\";\n\n        if (this.random() > .996)\n            this.aiActiveState = \"fire\";\n    }",
			"parameters": []
		},
		"aiCirclecc": {
			"body": "var attackRange = 300;\n    var target = this.Scene.findNodeByID(this.aiTargetID);\n    var targetPos;\n    if (target)\n    {\n        targetPos = target.transformAPI.getWorldPosition();\n        targetPos = this.transformAPI.globalToLocal(targetPos);\n        if (MATH.lengthVec3(targetPos) < attackRange)\n        {\n            if (targetPos[0] < 0)\n                this.doTurn('right')\n            else\n                this.doTurn('left');\n        }\n        else\n        {\n            this.aiActiveState = 'attack';\n        }\n\n        if (MATH.lengthVec3(targetPos) < 150)\n        {\n            this.aiActiveState = \"moveAway\";\n        }\n\n        if (MATH.lengthVec3(targetPos) > 10)\n        {\n            this.doMoveForward();\n        }\n        if (this.random() > .995)\n            this.aiActiveState = \"circle\";\n\n        if (this.random() > .996)\n            this.aiActiveState = \"fire\";\n\n    }",
			"parameters": []
		},
		"aiFire": {
			"body": "var attachRange = 100;\n    var target = this.Scene.findNodeByID(this.aiTargetID);\n    var targetPos;\n    if (target)\n    {\n        targetPos = target.transformAPI.getWorldPosition();\n        targetPos = this.transformAPI.globalToLocal(targetPos);\n\n        if (targetPos[1] > 0)\n            this.doTurn('right')\n        else\n            this.doTurn('left');\n\n        if (Math.abs(targetPos[1]) < .2)\n        {\n            console.log(\"FIRE!\");\n            this.launchMissile();\n            if (this.random() < .5)\n                this.aiActiveState = \"circle\";\n            else\n                this.aiActiveState = \"circlecc\";\n        }\n\n        this.doMoveForward();\n\n    }",
			"parameters": []
		},
		"aiMoveAway": {
			"body": "var attackRange = 100;\n    var target = this.Scene.findNodeByID(this.aiTargetID);\n    var targetPos;\n    if (target)\n    {\n        targetPos = target.transformAPI.getWorldPosition();\n        targetPos = this.transformAPI.globalToLocal(targetPos);\n        if (MATH.lengthVec3(targetPos) < attackRange)\n        {\n            if (targetPos[1] < 0)\n                this.doTurn('right')\n            else\n                this.doTurn('left');\n        }\n        else\n        {\n            if (this.random() < .5)\n                this.aiActiveState = \"circle\";\n            else\n                this.aiActiveState = \"circlecc\";\n        }\n       \n        this.doMoveForward();\n        \n    }",
			"parameters": []
		},
		"approachingTransition": {
			"body": "//console.log(\"approachingTransition\");\n    this.approachingUpdate(this.currentState);",
			"parameters": []
		},
		"approachingUpdate": {
			"body": "//console.log(\"approachingUpdate\");\n    this.currentState = this.states[\"approaching\"];",
			"parameters": [
				"statename"
			]
		},
		"collidingTransition": {
			"body": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                console.log(\"collidingTransition\");\n                                this.currentState = this.states[\"colliding\"];    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
			"parameters": []
		},
		"collidingUpdate": {
			"body": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                console.log(\"collidingUpdate\");\n                                this.currentState = this.states[\"colliding\"];    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
			"parameters": [
				"statename"
			]
		},
		"consumeFuel": {
			"body": "if (this.fuel <= 0.0)\n    {\n        this.currentState = this.states[\"out_of_gas\"];\n    }\n    else\n    {\n        this.fuel = this.fuel - this.fuelConsumptionRate;\n        //console.log(\"fuel: \" + this.fuel);\n    }",
			"parameters": []
		},
		"createExplosion": {
			"body": "console.log(\"explosion!!\");\n    var def = this.explosionDef;\n    var pos = this.transformAPI.getWorldPosition();\n    def.properties.transform[12] = pos[0];\n    def.properties.transform[13] = pos[1];\n    def.properties.transform[14] = pos[2];\n    def.properties.fuse = 1;\n    vwf.createChild(vwf.application(), GUID(), _DataManager.getCleanNodePrototype(def), null);",
			"parameters": []
		},
		"defeatedTransition": {
			"body": "console.log(\"defeatedTransition\");\n    this.currentState = this.states[\"defeated\"];\n\n    var sender = this.Scene.children_by_name.xAPISender;\n    if (sender)\n    {\n        sender.xAPISend(\"is-defeated\", this.DisplayName, \"FastAttackCraft\", null);\n    }",
			"parameters": []
		},
		"defeatedUpdate": {
			"body": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                console.log(\"defeatedUpdate\");\n                                this.currentState = this.states[\"defeated\"];    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
			"parameters": [
				"statename"
			]
		},
		"doBuoyancy": {
			"body": "var waterDepth = 20;\n    var hullThick = 2.2;\n    var depthFloor = waterDepth + hullThick;\n    // The tick function is called 20 times every second.\n    // Write code here to animate over time\n    this.physicsAPI.addForceAtCenter(0, 0, 9.8);\n    this.physicsAPI.wake();\n    var mass = this.physicsAPI.getMass();\n    var corners = [\n        [this._length / 2, this.width / 2, 0],\n        [this._length / 2, -this.width / 2, 0],\n        [-this._length / 2, this.width / 2, 0],\n        [-this._length / 2, -this.width / 2, 0],\n    ];\n\n    this.counter++;\n    var rocking = -mass / 5;\n    this.physicsAPI.addForceOffset([0, 0, rocking], [Math.sin(this.counter / 30) * this._length, Math.cos(this.counter / 15) * this.width, 0]);\n    this.physicsAPI.addForceOffset([0, 0, rocking], [Math.cos(this.counter / 10) * this._length, Math.sin(this.counter / 10) * this.width, 0]);\n\n    for (var i = 0; i < corners.length; i++)\n    {\n        var corner = corners[i];\n        var worldCorner = this.transformAPI.localToGlobal(corner);\n        var depth = depthFloor - worldCorner[2];\n        depth = Math.min(depth, 5);\n        if (depth > 0)\n        {\n\n            this.physicsAPI.addForceOffset([0, 0, depth * mass * 9.8 / 3], Vec3.subtract(worldCorner, this.transformAPI.getPosition(), []));\n            var vel = this.physicsAPI.getLinearVelocity();\n            var torque = this.physicsAPI.getAngularVelocity();\n            //    vel[0] *= .6;\n            // vel[1] *= .6;\n            vel[2] *= 1 - depth / 50;\n\n            torque[0] *= 1 - depth / 100;\n            torque[1] *= 1 - depth / 100;\n            torque[2] *= 1 - depth / 100;\n            this.physicsAPI.setAngularVelocity(torque);\n            this.physicsAPI.setLinearVelocity(vel);\n        }\n        //  if (depth < 0)\n        {\n\n            this.physicsAPI.addForceOffset([0, 0, -mass * 9.8 / 4], Vec3.subtract(worldCorner, this.transformAPI.getPosition(), []));\n            var vel = this.physicsAPI.getLinearVelocity();\n            var torque = this.physicsAPI.getAngularVelocity();\n        }\n\n    }\n\n    var depth = depthFloor - this.transformAPI.getPosition()[2]\n    depth = Math.min(depth, 5);\n    if (depth > 0)\n    {\n\n        var vel = this.physicsAPI.getLinearVelocity();\n        vel = this.transformAPI.globalToLocalRotation(vel);\n        vel[0] *= 1.0 - depth / 100;\n        vel[1] *= 1.0 - depth / 30;\n        vel = this.transformAPI.localToGlobalRotation(vel);\n        this.physicsAPI.setLinearVelocity(vel);\n\n    }",
			"parameters": []
		},
		"doMoveBackward": {
			"body": "var mass = this.physicsAPI.getMass();\n    this.consumeFuel();\n    switch (this.currentState.name)\n    {\n        case \"out_of_gas\":\n            \n            this.activateState(\"out_of_gas\");\n            break;\n        case \"defeated\":\n            \n            this.activateState(\"defeated\");\n            break;\n        default:\n            var force = this.transformAPI.localToGlobal(10 * mass, 0, 0);\n            this.physicsAPI.addForceAtCenter(force[0], force[1], force[2]);\n            this.playMotorRunning();\n            switch (this.FACMovementDirection())\n            {\n                case \"approaching\":\n                    this.activateState(\"approaching\");\n                    break;\n                case \"idle\":\n                    this.activateState(\"idle\");\n                    break;\n                case \"moving_away\":\n                    this.activateState(\"moving_away\");\n                    break;\n            }\n            break;\n    }",
			"parameters": []
		},
		"doMoveForward": {
			"body": "this.consumeFuel();\n    var mass = this.physicsAPI.getMass();\n    switch (this.currentState.name)\n    {\n        case \"out_of_gas\":\n            \n            this.activateState(\"out_of_gas\");\n            break;\n        case \"defeated\":\n            \n            this.activateState(\"defeated\");\n            break;\n        default:\n            var force = this.transformAPI.localToGlobal(-10 * mass, 0, 0);\n            this.physicsAPI.addForceAtCenter(force[0], force[1], force[2]);\n            this.playMotorRunning();\n            switch (this.FACMovementDirection())\n            {\n                case \"approaching\":\n                    this.activateState(\"approaching\");\n                    break;\n                case \"idle\":\n                    this.activateState(\"idle\");\n                    break;\n                case \"moving_away\":\n                    this.activateState(\"moving_away\");\n                    break;\n            }\n            break;\n    }",
			"parameters": []
		},
		"doTurn": {
			"body": "var direction = 1;\n     var mass = this.physicsAPI.getMass();\n    if (dir == 'left')\n    {\n        direction = 1;\n    }\n    if (dir == 'right')\n    {\n        direction = -1;\n    }\n    var vel = this.physicsAPI.getLinearVelocity();\n    vel = this.transformAPI.globalToLocalRotation(vel);\n    var speedTorqueFactor = (Math.abs(vel[0]) / 3);\n\n    this.physicsAPI.addTorque(0, 0, direction * speedTorqueFactor * mass * 3);\n    var force = this.transformAPI.localToGlobal(speedTorqueFactor * mass, 0, 0);\n    this.physicsAPI.addTorque(force);",
			"parameters": [
				"dir"
			]
		},
		"doUserInput": {
			"body": "if (this._keysDown.indexOf(\"W\") !== -1)\n    {\n        this.doMoveForward();\n    }\n    if (this._keysDown.indexOf(\"S\") !== -1)\n    {\n        this.doMoveBackward();\n    }\n\n    if (this._keysDown.indexOf(\"A\") !== -1)\n    {\n        this.doTurn('left');\n    }\n    if (this._keysDown.indexOf(\"D\") !== -1)\n    {\n         this.doTurn('right');\n    }\n    if (this._keysDown.indexOf(\" \") !== -1)\n    {\n        if (this.rockets > 0)\n        {\n            this.currentState = this.states[\"fire_rocket\"];\n        }\n        else\n        {\n            this.currentState = this.states[\"moving_away\"];\n        }\n    }",
			"parameters": []
		},
		"fire_rocketTransition": {
			"body": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                console.log(\"fire_rocketTransition\");\n                                this.fire_rocketUpdate(this.currentState);    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
			"parameters": []
		},
		"fire_rocketUpdate": {
			"body": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                console.log(\"fire_rocketUpdate\");\n                                this.launchMissile();\n                                this.playMissileLaunch();\n                                this.rockets = this.rockets - 1;\n                                if (this.rockets > 0)\n                                {\n                                    this.currentState = this.states[\"fire_rocket\"];\n                                    console.log(\"rocketUpdate state fire \");\n                                }\n                                else\n                                {\n                                    this.currentState = this.states[\"idle\"];\n                                    console.log(\"rocketUpdate state idle\");\n                                }    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
			"parameters": [
				"statename"
			]
		},
		"idleTransition": {
			"body": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                               console.log(\"idleTransition\");\n                                this.currentState = this.states[\"idle\"];   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
			"parameters": []
		},
		"idleUpdate": {
			"body": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                               console.log(\"idleUpdate\");\n                                this.currentState = this.states[\"idle\"];   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
			"parameters": [
				"statename"
			]
		},
		"moving_awayTransition": {
			"body": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                               console.log(\"moving_awayTransition\");\n                                this.moving_awayUpdate(this.currentState);   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
			"parameters": []
		},
		"moving_awayUpdate": {
			"body": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                               console.log(\"moving_awayUpdate\");\n                                this.currentState = this.states[\"moving_away\"];   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
			"parameters": [
				"statename"
			]
		},
		"notifyPeers": {
			"body": "var my_position = this.transformAPI.getPosition();\n    this.tickCount++;\n    if (this.tickCount == 4 || this.tickCount == 8)\n    {\n        var local_forward = this.transformAPI.localToGlobalRotation(-1, 0, 0);\n\n        this.broadcast(\"facPeerInput\", [my_position, this.id, local_forward], 50);\n    }\n\n    if (this.tickCount > 10)\n    {\n        var leader_projection = this.transformAPI.localToGlobal(-150, 0, 0);\n\n        this.broadcast(\"facLeaderInput\", [leader_projection], 500);\n        this.tickCount = 0;\n    }",
			"parameters": []
		},
		"out_of_gasTransition": {
			"body": "console.log(\"out_of_gasTransition\");\n    //this.currentState = this.states[\"out_of_gas\"];\n    this.out_of_gasUpdate(this.currentState);\n\n    var sender = this.Scene.children_by_name.xAPISender;\n    if (sender)\n    {\n        sender.xAPISend(\"ran-out-of-gas\", this.DisplayName, \"FastAttackCraft\", null);\n    }",
			"parameters": []
		},
		"out_of_gasUpdate": {
			"body": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                               console.log(\"out_of_gasUpdate\");\n                                console.log(statename);\n                                if (this.fuel <= 0)\n                                {\n                                    this.currentState = this.states[\"out_of_gas\"];\n                                    console.log(\"out_of_gasUpdate now out_of_gas state\");\n                                }\n                                else if (this.hullStrength <= 0)\n                                {\n                                    this.currentState = this.states[\"defeated\"];\n                                    console.log(\"out_of_gasUpdate now defaeted state\");\n                                }   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
			"parameters": [
				"statename"
			]
		},
		"playBulletHittingMetal": {
			"body": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                               console.log(\"playBulletHittingMetal\");\n                                this.audioAPI.playSound(\"\", false, 100);   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
			"parameters": []
		},
		"playBulletHittingWater": {
			"body": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                               console.log(\"playBulletHittingWater\");\n                                this.audioAPI.playSound(\"\", false, 100);   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
			"parameters": []
		},
		"playBulletWhizzingBy": {
			"body": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                               console.log(\"playBulletWhizzingBy\");\n                                this.audioAPI.playSound(\"\", false, 100);   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
			"parameters": []
		},
		"playExplosion": {
			"body": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                               console.log(\"playExplosion\");\n                                // #1:\n                                //this.audioAPI.playSound(\"/sas/assets/8d358349\", false, 100);\n                                // #2:\n                                //this.audioAPI.playSound(\"/sas/assets/d714ebe1\", false, 100);\n                                // #3:\n                                this.audioAPI.playSound(\"/sas/assets/3c6b353e\", false, 100);   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
			"parameters": []
		},
		"playHelicopter": {
			"body": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                               //console.log(\"playHelicopter\");\n                                // #1:\n                                //this.audioAPI.playSound(\"/sas/assets/af90534a\", false, 100);\n                                //#2:\n                                this.audioAPI.playSound(\"/sas/assets/dc81768a\", false, 100);   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
			"parameters": []
		},
		"playMissileLaunch": {
			"body": "console.log(\"playMissileLaunch\");\n    // #1:\n    //this.audioAPI.playSound(\"/sas/assets/744acf2e\", false, 100);\n    // #2:\n    //this.audioAPI.playSound(\"/sas/assets/4334801b\", false, 100);\n    // #3:\n    //this.audioAPI.playSound(\"/sas/assets/10b027bd\", false, 100);\n    // #4:\n    //this.audioAPI.playSound(\"/sas/assets/94d508e3\", false, 100);\n    // #5:\n    this.audioAPI.playSound(\"/sas/assets/263beb86\", false, 100);",
			"parameters": []
		},
		"playMotorIdle": {
			"body": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                               console.log(\"playMotorIdle\");\n                                this.audioAPI.playSound(\"\", false, 100);   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
			"parameters": []
		},
		"playMotorRunning": {
			"body": "\n\n\n\n\n\n\n       //console.log(\"playMotorRunning\");\n          // #1:\n          //this.audioAPI.playSound(\"/sas/assets/2cb9fef9\", false, 100);\n          // #2:\n          //this.audioAPI.playSound(\"/sas/assets/994ee0c8\", false, 100);\n          // #3:\n          var sound = vwf.callMethod(this.id, \"getSound\", [\"/sas/assets/c253157d\"]);\n\n          if (sound == null || !sound.isPlaying())\n          {\n              this.audioAPI.playSound(\"/sas/assets/c253157d\", false, 100);\n          } \n\n\n\n",
			"parameters": []
		},
		"playMotorSputtering": {
			"body": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                               console.log(\"playMotorSputtering\");\n                                this.audioAPI.playSound(\"\", false, 100);   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
			"parameters": []
		},
		"playWarning": {
			"body": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                               console.log(\"playWarning\");\n                                this.audioAPI.playSound(\"\", false, 100);   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
			"parameters": []
		},
		"ready": {
			"body": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                                                                 // The scene is now completely loaded. This will fire on each client when the client joins, so it`s not a great place to create objects\n                                this.Scene.unbind(\"keyDown\",this._kd);\n                                this.Scene.unbind(\"keyUp\",this._ku);\n                                var self = this;\n                                this._kd = function(e,d){self._keyDown(e,d)};\n                                this._ku = function(e,d){self._keyUp(e,d)};\n                                this.Scene.bind(\"keyDown\",this._kd);\n                                this.Scene.bind(\"keyUp\",this._ku);                                                     \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
			"parameters": []
		},
		"verifyCamera": {
			"body": "if(!this.controllingCamera)\n        return true;\n    var cam = this.Scene.clientAPI.getCameraForClient(vwf.client());\n\n    if (!cam || cam.id != this.controllingCamera) return false;\n    return true;",
			"parameters": []
		},
		"launchMissile": {
			"body": "var def = this.missileDef;\n    var pos = this.children_by_name.MissileLauncher.worldTransform.slice();\n\n    pos[14] += 0;\n    def.properties.transform = pos;\n    // def.properties.___physics_velocity_linear = this.physicsAPI.getLinearVelocity();\n    def.properties.fired = true;\n    var now = performance.now();\n    // console.profile(\"launch\");\n\n    var sender = this.Scene.children_by_name.xAPISender;\n    if (sender)\n    {\n        // var postion = sender.baseURL + \"position/\";\n        // var result = {\n        //     extensions:\n        //     {\n        //         position:\n        //         {\n        //             pos\n        //         },\n        //     }\n        // };\n        sender.xAPISend(\"fired\", \"FACMissile\", \"FastAttackCraft\", null);    //result);\n    }\n\n    var smokeDef = this.smokeDef;\n    vwf.createChild(vwf.application(), GUID(), _DataManager.getCleanNodePrototype(def), null, function(id)\n    {\n        smokeDef.properties.targetEntity = id;\n        vwf.createChild(vwf.application(), GUID(), _DataManager.getCleanNodePrototype(smokeDef), null, function()\n        {\n            console.log(performance.now() - now);\n        });\n    });",
			"parameters": []
		},
		"hit": {
			"body": "console.log(\"hit state: \" + this.currentState.name);\n    if (this.currentState.name == \"defeated\") return;\n\n    var pos = args[0];\n    var force = args[1];\n    if (typeof force == 'number')\n    {\n        this.health -= force;\n        console.log(\"(hit) \" + this.health);\n    }\n    else\n    {\n        this.health -= 101;\n    }\n    if (this.health < 0)\n    {\n        this.hostile = false;\n        this.createExplosion();\n        this.destroyFAC();\n    var sender = this.Scene.children_by_name.xAPISender;\n    if (sender)\n    {\n        sender.xAPISend(\"is destroyed\", this.DisplayName + this.id, \"Fast Attack Craft\",\n            null /*optional - see result object*/ ,\n            null /*optional - see context.extesions object*/ );\n    }\n    }",
			"parameters": [
				"args"
			]
		},
		"_keyDown": {
			"body": "if (!this.verifyCamera()) return;\n    this.userControlCounter = 100;\n    if (this.currentState === null)\n    {\n        console.log(\"Set initial state\");\n        this.currentState = this.states[\"approaching\"];\n    }\n    if (this._keysDown.indexOf(e.key.char) == -1)\n    {\n        this._keysDown.push(e.key.char);\n    }",
			"parameters": [
				"e",
				"d"
			]
		},
		"_keyUp": {
			"body": "if (!this.verifyCamera()) return;\n    this.userControlCounter = 100;\n    if (this._keysDown.indexOf(e.key.char) !== -1)\n    {\n        this._keysDown.splice(this._keysDown.indexOf(e.key.char), 1);\n    }\n    if (e.key.char == \" \")\n    {\n        if (this.rockets > 0)\n        {\n            this.activateState(\"fire_rocket\");\n            console.log(\"rockets: \" + this.rockets);\n\n            console.log(\"Broadcasting leader fire...\");\n            // this.broadcast(\"facLeaderFire\", [], 500);\n        }\n    }",
			"parameters": [
				"e",
				"d"
			]
		},
		"isUserControlled": {
			"body": "var thisCam = this.controllingCamera;\n\n    return this.userControlCounter > 0 && this.Scene.clientAPI.getClientForCamera(thisCam).length > 0;",
			"parameters": []
		},
		"tick": {
			"body": "this.userControlCounter--;\n    this.doBuoyancy();\n    this.notifyPeers();\n    if (this.isUserControlled())\n    {\n        this.isSlave = false;\n        this.doUserInput();\n    }\n    else\n    {\n        this.isSlave = true;\n        this.doAIBehaviors();\n    }",
			"parameters": []
		},
		"aiWait": {
			"body": "console.log(\"aiWait\");",
			"parameters": []
		},
		"aiFlee": {
			"body": "console.log(\"aiFlee\");",
			"parameters": []
		},
		"aiDefeated": {
			"body": "console.log(\"aiDefeated\");",
			"parameters": []
		},
		"randomIntFromInterval": {
			"body": "return Math.floor(Math.random()*(max-min+1)+min);",
			"parameters": [
				"min",
				"max"
			]
		},
		"destroyFAC": {
			"body": "var def = this.destroyedFACDef;\n    var val1 = this.randomIntFromInterval(1, 360);\n    var val2 = this.randomIntFromInterval(1, 90);\n    var val3 = this.randomIntFromInterval(1, 360);\n    console.log(\"FAC blown up\");\n    this.currentState = this.states[\"defeated\"];\n    this.activeState = \"defeated\";\n    this.aiActiveState = \"defeated\";\n    vwf.createChild(this.id, GUID(), _DataManager.getCleanNodePrototype(def), null);\n    if (this.isSlave)\n        this.children_by_name[\"3D_model\"].transformAPI.setRotation(val1, val2, val3);\n    else\n        this.children_by_name[\"3D_model\"].transformAPI.setRotation(180, 45, 90);\n    this.children_by_name.WaterBlocker.visible = false;\n    var sender = this.Scene.children_by_name.xAPISender;\n    if (sender)\n    {\n        sender.xAPISend(\"is-defeated\", this.DisplayName, \"FastAttackCraft\", null);\n    }",
			"parameters": []
		},
		"doAIBehaviors": {
			"body": "var pos = this.transformAPI.getWorldPosition();\n    //dont' do the AI code if it's not at the water surface\n    if (Math.abs(pos[2] - 20) > 2)\n        return;\n    var state = this.aiStates[this.aiActiveState];\n    console.log(this.aiActiveState);\n    if (state)\n    {\n        if (this[state.updateFunc])\n            this[state.updateFunc]();\n    }",
			"parameters": []
		}
	},
	"children": {
		"N8c4837dd": {
			"extends": "box2.vwf",
			"source": "vwf/model/threejs/box.js",
			"type": "subDriver/threejs",
			"sequence": 0,
			"random": {
				"s0": 0.778299,
				"s1": 0.286493,
				"s2": 0.191579,
				"c": 1
			},
			"properties": {
				"___physics_activation_state": 1,
				"___physics_deactivation_time": 0,
				"___physics_velocity_linear": [
					0,
					0,
					0
				],
				"___physics_velocity_angular": [
					0,
					0,
					0
				],
				"DisplayName": "MissileLauncher",
				"___assetServerOriginalID": "N8c4837dd",
				"height": 1.61,
				"materialDef": {
					"alpha": 1,
					"ambient": {
						"b": 1,
						"g": 1,
						"r": 1
					},
					"blendMode": 1,
					"color": {
						"a": 1,
						"b": 1,
						"g": 1,
						"r": 1
					},
					"depthtest": true,
					"depthwrite": true,
					"emit": {
						"b": 0,
						"g": 0,
						"r": 0
					},
					"fog": true,
					"layers": [
						{
							"alpha": 1,
							"blendMode": 0,
							"mapInput": 0,
							"mapTo": 1,
							"offsetx": 0,
							"offsety": 0,
							"rot": 0,
							"scalex": 1,
							"scaley": 1,
							"src": "checker.jpg"
						}
					],
					"metal": false,
					"reflect": 0.8,
					"shadeless": false,
					"shading": true,
					"shadow": true,
					"shininess": 15,
					"side": 0,
					"specularColor": {
						"b": 0.57735,
						"g": 0.57735,
						"r": 0.57735
					},
					"specularLevel": 1,
					"type": "phong",
					"vertexColors": false,
					"wireframe": false
				},
				"owner": "ADLteam",
				"transform": [
					0.24060429632663727,
					-0.021820155903697014,
					0.9703761339187622,
					0,
					0.0010019970359280705,
					-0.9997419714927673,
					-0.022729994729161263,
					0,
					0.9706209301948547,
					0.006441246252506971,
					-0.24052102863788605,
					0,
					1.000000238418579,
					0.000001158783902610594,
					1.4999992847442627,
					1
				],
				"type": "Primitive",
				"visible": false,
				"width": 1.36,
				"worldTransform": [
					-0.07629542797803879,
					-0.23707535862922668,
					0.9653905034065247,
					0,
					-0.9906457662582397,
					0.0857895240187645,
					-0.05726974457502365,
					0,
					-0.06953397393226624,
					-0.9645858407020569,
					-0.24237366020679474,
					0,
					7.258164405822754,
					-5.815124034881592,
					21.52577781677246,
					1
				]
			}
		},
		"N8cf5a8e2": {
			"extends": "http://vwf.example.com/node3.vwf",
			"sequence": 0,
			"random": {
				"s0": 0.022454,
				"s1": 0.002702,
				"s2": 0.55584,
				"c": 1
			},
			"properties": {
				"DisplayName": "enginePos",
				"___assetServerOriginalID": "N8cf5a8e2",
				"glyphURL": "../vwf/view/editorview/images/icons/sphere.png",
				"owner": "ADLteam",
				"transform": [
					1,
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					-9.999999974752427e-7,
					0,
					1,
					0,
					3,
					0,
					-0.75,
					1
				],
				"transformAPI": {
					"COORDINATES": {
						"GLOBAL": "global",
						"LOCAL": "local",
						"PARENT": "parent"
					}
				},
				"worldTransform": [
					-0.08684134483337402,
					-0.9932061433792114,
					-0.0030323993414640427,
					0,
					0.9916055202484131,
					-0.08680711686611176,
					0.03462764248251915,
					0,
					-0.03479471430182457,
					0.0000011611706440817215,
					0.9963926672935486,
					0,
					7.162768840789795,
					-7.801536560058594,
					19.277830123901367,
					1
				]
			}
		},
		"Ned0c4c0a": {
			"extends": "asset.vwf",
			"source": "http://54.175.234.78:3030/assets/a31ba113",
			"type": "subDriver/threejs/asset/vnd.gltf+json",
			"sequence": 0,
			"random": {
				"s0": 0.434828226920217,
				"s1": 0.189991779392585,
				"s2": 0.484111914644018,
				"c": 1
			},
			"properties": {
				"___physics_activation_state": 1,
				"___physics_deactivation_time": 0,
				"___physics_velocity_linear": [
					0,
					0,
					0
				],
				"___physics_velocity_angular": [
					0,
					0,
					0
				],
				"materialDef": {
					"alpha": 1,
					"ambient": {
						"b": 0.584,
						"g": 0.584,
						"r": 0.584
					},
					"blendMode": 1,
					"color": {
						"b": 1,
						"g": 1,
						"r": 1
					},
					"depthtest": true,
					"depthwrite": true,
					"emit": {
						"b": 0,
						"g": 0,
						"r": 0
					},
					"fog": true,
					"layers": [
						{
							"alpha": 1,
							"mapInput": 0,
							"mapTo": 1,
							"offsetx": 0,
							"offsety": 0,
							"scalex": 1,
							"scaley": 1,
							"src": "/sas/assets/7e6084c4"
						}
					],
					"metal": false,
					"reflect": 0.001,
					"shading": true,
					"shininess": 0.004002,
					"side": 0,
					"specularColor": {
						"b": 0,
						"g": 0,
						"r": 0
					},
					"specularLevel": 1,
					"type": "phong",
					"vertexColors": false,
					"wireframe": false
				},
				"DisplayName": "3D_model",
				"___assetServerOriginalID": "Ned0c4c0a",
				"___sourceAssetTimestamp": "Tue Oct 27 2015 13:10:22 GMT-0400 (EDT)",
				"owner": "ADLteam",
				"transform": [
					-3.600903042411119e-8,
					100.39900207519531,
					0,
					0,
					-100.3010025024414,
					-3.5973883427686815e-8,
					0,
					0,
					0,
					0,
					100.29499816894531,
					0,
					0.5,
					0,
					-0.5,
					1
				],
				"worldPosition": [
					7.37117338180542,
					-5.318521022796631,
					19.534509658813477
				]
			},
			"methods": {
				"hit": {
					"body": "this.parent.hit(args);",
					"parameters": [
						"args"
					]
				}
			}
		},
		"N83e3ec00": {
			"extends": "box2.vwf",
			"source": "vwf/model/threejs/box.js",
			"type": "subDriver/threejs",
			"sequence": 0,
			"random": {
				"s0": 0.198099663946778,
				"s1": 0.0275812551844865,
				"s2": 0.352169041289017,
				"c": 1
			},
			"properties": {
				"___physics_activation_state": 1,
				"___physics_deactivation_time": 0,
				"___physics_velocity_linear": [
					0,
					0,
					0
				],
				"___physics_velocity_angular": [
					0,
					0,
					0
				],
				"DisplayName": "WaterBlocker",
				"___assetServerOriginalID": "N83e3ec00",
				"_length": 3.45,
				"castShadows": false,
				"height": 0.18,
				"materialDef": {
					"alpha": 0,
					"ambient": {
						"b": 1,
						"g": 1,
						"r": 1
					},
					"blendMode": 1,
					"color": {
						"a": 0,
						"b": 1,
						"g": 1,
						"r": 1
					},
					"depthtest": true,
					"depthwrite": true,
					"emit": {
						"b": 0,
						"g": 0,
						"r": 0
					},
					"fog": true,
					"layers": [],
					"metal": false,
					"reflect": 0.8,
					"shadeless": false,
					"shading": true,
					"shadow": true,
					"shininess": 15,
					"side": 0,
					"specularColor": {
						"b": 0.577350269189626,
						"g": 0.577350269189626,
						"r": 0.577350269189626
					},
					"specularLevel": 1,
					"type": "phong",
					"vertexColors": false,
					"wireframe": false
				},
				"owner": "ADLteam",
				"renderDepth": 11,
				"transform": [
					1,
					0,
					9.999999974752427e-7,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					1,
					0,
					1,
					0,
					-0.2499990016222,
					1
				],
				"type": "Primitive",
				"width": 2.18
			}
		}
	}
}