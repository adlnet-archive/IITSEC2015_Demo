{
	"extends": "box2.vwf",
	"source": "vwf/model/threejs/box.js",
	"type": "subDriver/threejs",
	"sequence": 0,
	"random": {
		"s0": 0.134394,
		"s1": 0.921757,
		"s2": 0.045269,
		"c": 1
	},
	"properties": {
		"___physics_activation_state": 4,
		"___physics_deactivation_time": 0,
		"___physics_velocity_linear": [
			-0.01912243291735649,
			0.10449027270078659,
			-0.0032515337225049734
		],
		"___physics_velocity_angular": [
			0.02765009179711342,
			-0.1445750892162323,
			0.00038580354885198176
		],
		"DisplayName": "FAC_MASTER",
		"EditorData": {
			"_controllingCamera": {
				"displayname": "Controlling Camera",
				"property": "controllingCamera",
				"type": "nodeid"
			},
			"bullets_50_cal": {
				"displayname": "Bullets (50 cal)",
				"max": 100000,
				"min": 1,
				"property": "bullets_50_cal",
				"type": "slider"
			},
			"fuel": {
				"displayname": "Fuel",
				"max": 1000,
				"min": 1,
				"property": "fuel",
				"type": "slider"
			},
			"fuelConsumptionRate": {
				"displayname": "Fuel Consumption Rate",
				"max": 1,
				"min": 0,
				"property": "fuelConsumptionRate",
				"step": 0.01,
				"type": "slider"
			},
			"health": {
				"displayname": "Health",
				"max": 1000,
				"min": 1,
				"property": "health",
				"type": "slider"
			},
			"hostile": {
				"displayname": "Hostile",
				"property": "hostile",
				"type": "check"
			},
			"hullStrength": {
				"displayname": "Hull Strength",
				"max": 1000,
				"min": 1,
				"property": "hullStrength",
				"type": "slider"
			},
			"rangeToTarget": {
				"displayname": "Range to Target",
				"max": 5000,
				"min": 0,
				"property": "rangeToTarget",
				"step": 100,
				"type": "slider"
			},
			"rockets": {
				"displayname": "Rockets",
				"max": 25,
				"min": 0,
				"property": "rockets",
				"type": "slider"
			}
		},
		"___physics_angular_velocity": [
			-0.0205620388669852,
			0.137373529226051,
			0.000692897715996474
		],
		"___physics_damping": 0.4,
		"___physics_enabled": true,
		"___physics_linear_velocity": [
			-0.115731220145219,
			0.602527779520543,
			-0.000487978426872444
		],
		"___physics_mass": 8051.2,
		"_keysDown": [],
		"_length": 7,
		"activeState": "active",
		"bullets_50_cal": 987,
		"controllingCamera": "SandboxCamera-vwf-N373ec60b",
		"counter": 14602,
		"currentState": null,
		"editorData": {
			"controllingCamera": {
				"displayName": "controllingCamera",
				"type": "nodeID"
			}
		},
		"explosionDef": {
			"continues": "/sas/assets/d3402bc3",
			"properties": {
				"transform": [
					1,
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					1
				]
			}
		},
		"fuel": 100,
		"fuelConsumptionRate": 0.01,
		"health": 100,
		"height": 1.2,
		"hostile": true,
		"hullStrength": 100,
		"materialDef": {
			"alpha": 1,
			"ambient": {
				"b": 1,
				"g": 1,
				"r": 1
			},
			"blendMode": 1,
			"color": {
				"a": 1,
				"b": 1,
				"g": 1,
				"r": 1
			},
			"depthtest": true,
			"depthwrite": true,
			"emit": {
				"b": 0,
				"g": 0,
				"r": 0
			},
			"fog": true,
			"layers": [
				{
					"alpha": 1,
					"blendMode": 0,
					"mapInput": 0,
					"mapTo": 1,
					"offsetx": 0,
					"offsety": 0,
					"rot": 0,
					"scalex": 1,
					"scaley": 1,
					"src": "checker.jpg"
				}
			],
			"metal": false,
			"reflect": 0.8,
			"shadeless": false,
			"shading": true,
			"shadow": true,
			"shininess": 15,
			"side": 0,
			"specularColor": {
				"b": 0.57735,
				"g": 0.57735,
				"r": 0.57735
			},
			"specularLevel": 1,
			"type": "phong",
			"vertexColors": false,
			"wireframe": false
		},
		"missileDef": {
			"continues": "/sas/assets/73e8a4a3",
			"properties": {
				"fired": true,
				"transform": [
					-0.241058230400085,
					0.0219730380922556,
					0.969229340553284,
					0,
					-0.139989301562309,
					0.987488389015198,
					-0.0572049580514431,
					0,
					-0.959318161010742,
					-0.149620994925499,
					-0.235202088952065,
					0,
					4.95079517364502,
					-1.64401972293854,
					1.5334906578064,
					1
				]
			}
		},
		"owner": "ADLteam",
		"physicsAPI": {},
		"rangeToTarget": 1000,
		"rockets": 5,
		"sourceAssetId": "1ad6adad",
		"states": {
			"approaching": {
				"name": "approaching",
				"properties": {},
				"transitionFunction": "approachingTransition",
				"transitions": [
					"approaching",
					"moving_away",
					"idle",
					"out_of_gas",
					"fire_rocket",
					"colliding",
					"defeated"
				],
				"updateFunction": "approachingUpdate"
			},
			"colliding": {
				"name": "colliding",
				"properties": {},
				"transitionFunction": "collidingTransition",
				"transitions": [
					"colliding",
					"defeated"
				],
				"updateFunction": "collidingUpdate"
			},
			"defeated": {
				"name": "defeated",
				"properties": {},
				"transitionFunction": "defeatedTransition",
				"transitions": [
					"defeated"
				],
				"updateFunction": "defeatedUpdate"
			},
			"fire_rocket": {
				"name": "fire_rocket",
				"properties": {},
				"transitionFunction": "fire_rocketTransition",
				"transitions": [
					"approaching",
					"fire_rocket",
					"moving_away",
					"idle",
					"colliding",
					"defeated"
				],
				"updateFunction": "fire_rocketUpdate"
			},
			"idle": {
				"name": "idle",
				"properties": {},
				"transitionFunction": "idleTransition",
				"transitions": [
					"moving_away",
					"idle",
					"out_of_gas",
					"colliding",
					"defeated"
				],
				"updateFunction": "idleUpdate"
			},
			"moving_away": {
				"name": "moving_away",
				"properties": {},
				"transitionFunction": "moving_awayTransition",
				"transitions": [
					"moving_away",
					"idle",
					"out_of_gas",
					"colliding",
					"defeated"
				],
				"updateFunction": "moving_awayUpdate"
			},
			"out_of_gas": {
				"name": "out_of_gas",
				"properties": {},
				"transitionFunction": "out_of_gasTransition",
				"transitions": [
					"out_of_gas",
					"colliding",
					"defeated"
				],
				"updateFunction": "out_of_gasUpdate"
			}
		},
		"transform": [
			-0.4981963336467743,
			-0.8635994791984558,
			-0.002325864741578698,
			0,
			0.8629013299942017,
			-0.4978981912136078,
			0.038828615099191666,
			0,
			-0.034794799983501434,
			0.0173894502222538,
			0.9962409138679504,
			0,
			3.75,
			-3.5,
			20.75,
			1
		],
		"type": "Primitive",
		"visible": false,
		"warningsReceived": 0,
		"width": 2.5,
		"worldTransform": [
			-0.4981963336467743,
			-0.8635994791984558,
			-0.002325864741578698,
			0,
			0.8629013299942017,
			-0.4978981912136078,
			0.038828615099191666,
			0,
			-0.034794799983501434,
			0.0173894502222538,
			0.9962409138679504,
			0,
			3.75,
			-3.5,
			20.75,
			1
		],
		"smokeDef": {
			"continues": "/sas/assets/aeb3d1dd",
			"properties": {
				"targetEntity": "-sas-assets-73e8a4a3-N8008a8f",
				"transform": [
					1,
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					1
				]
			}
		},
		"___sourceAssetTimestamp": "Thu Oct 01 2015 19:04:59 GMT-0400 (Eastern Daylight Time)"
	},
	"methods": {
		"FACMovementDirection": {
			"body": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                // set equal to \"\" after adding calculations:\n                                var movement = \"closing\";\n                                // Perform calculations to determine approaching or moving away states:\n                                //     movement = \"closing\" if distance to target is getting smaller\n                                //     movement = \"none\" if distance to target hasn't changed\n                                //     movement = \"increasing\" if distance to target is getting larger\n                                switch (movement)\n                                {\n                                    case \"closing\":\n                                        this.currentState = this.states[\"approaching\"];\n                                        return \"approaching\";\n                                    case \"none\":\n                                        this.currentState = this.states[\"idle\"];\n                                        return \"idle\";\n                                    case \"increasing\":\n                                        this.currentState = this.states[\"moving_away\"];\n                                        return \"moving_away\";\n                                }    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
			"parameters": []
		},
		"_keyDown": {
			"body": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                if (!this.verifyCamera()) return;\n                                if (this.currentState === null)\n                                {\n                                    console.log(\"Set initial state\");\n                                    this.currentState = this.states[\"approaching\"];\n                                }\n                                if (this._keysDown.indexOf(e.key.char) == -1)\n                                {\n                                    this._keysDown.push(e.key.char);\n                                }    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
			"parameters": [
				"e",
				"d"
			]
		},
		"activateState": {
			"body": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                //console.log(\"activateState\");\n                                var state = this.states[statename];\n\n                                if (this.currentState.transitions.indexOf(statename) == -1)\n                                {\n                                    console.log(\"invalid transition!\");\n                                    return;\n                                }\n\n                                if (state.transitionFunction)\n                                    this[state.transitionFunction](this.currentState);\n\n                                this.currentState = state;\n\n                                for (var i in state.properties)\n                                {\n                                    console.log(state.properties[i]);\n                                    this[i] = state.properties[i];\n                                }    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
			"parameters": [
				"statename"
			]
		},
		"collidingTransition": {
			"body": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                console.log(\"collidingTransition\");\n                                this.currentState = this.states[\"colliding\"];    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
			"parameters": []
		},
		"collidingUpdate": {
			"body": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                console.log(\"collidingUpdate\");\n                                this.currentState = this.states[\"colliding\"];    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
			"parameters": [
				"statename"
			]
		},
		"defeatedTransition": {
			"body": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                console.log(\"defeatedTransition\");\n                                this.currentState = this.states[\"defeated\"];    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
			"parameters": []
		},
		"defeatedUpdate": {
			"body": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                console.log(\"defeatedUpdate\");\n                                this.currentState = this.states[\"defeated\"];    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
			"parameters": [
				"statename"
			]
		},
		"fire_rocketTransition": {
			"body": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                console.log(\"fire_rocketTransition\");\n                                this.fire_rocketUpdate(this.currentState);    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
			"parameters": []
		},
		"fire_rocketUpdate": {
			"body": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                console.log(\"fire_rocketUpdate\");\n                                this.launchMissile();\n                                this.playMissileLaunch();\n                                this.rockets = this.rockets - 1;\n                                if (this.rockets > 0)\n                                {\n                                    this.currentState = this.states[\"fire_rocket\"];\n                                    console.log(\"rocketUpdate state fire \");\n                                }\n                                else\n                                {\n                                    this.currentState = this.states[\"idle\"];\n                                    console.log(\"rocketUpdate state idle\");\n                                }    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
			"parameters": [
				"statename"
			]
		},
		"hit": {
			"body": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                             var pos = args[0];\n                                var force = args[1];\n                                if (typeof force == 'number')\n                                    this.health -= force;\n                                else\n                                    this.health -= 101;\n\n                                if (this.health < 0)\n                                {\n                                    var def = this.explosionDef;\n                                    var pos = this.transformAPI.getWorldPosition();\n                                    def.properties.transform[12] = pos[0];\n                                    def.properties.transform[13] = pos[1];\n                                    def.properties.transform[14] = pos[2];\n                                    def.properties.fuse = 1;\n                                    vwf.createChild(vwf.application(), GUID(), _DataManager.getCleanNodePrototype(def), null);\n                                    this.parent.children.delete(this);\n                                } \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
			"parameters": [
				"args"
			]
		},
		"idleTransition": {
			"body": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                               console.log(\"idleTransition\");\n                                this.currentState = this.states[\"idle\"];   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
			"parameters": []
		},
		"idleUpdate": {
			"body": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                               console.log(\"idleUpdate\");\n                                this.currentState = this.states[\"idle\"];   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
			"parameters": [
				"statename"
			]
		},
		"moving_awayTransition": {
			"body": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                               console.log(\"moving_awayTransition\");\n                                this.moving_awayUpdate(this.currentState);   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
			"parameters": []
		},
		"moving_awayUpdate": {
			"body": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                               console.log(\"moving_awayUpdate\");\n                                this.currentState = this.states[\"moving_away\"];   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
			"parameters": [
				"statename"
			]
		},
		"out_of_gasTransition": {
			"body": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                               console.log(\"out_of_gasTransition\");\n                                //this.currentState = this.states[\"out_of_gas\"];\n                                this.out_of_gasUpdate(this.currentState);   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
			"parameters": []
		},
		"out_of_gasUpdate": {
			"body": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                               console.log(\"out_of_gasUpdate\");\n                                console.log(statename);\n                                if (this.fuel <= 0)\n                                {\n                                    this.currentState = this.states[\"out_of_gas\"];\n                                    console.log(\"out_of_gasUpdate now out_of_gas state\");\n                                }\n                                else if (this.hullStrength <= 0)\n                                {\n                                    this.currentState = this.states[\"defeated\"];\n                                    console.log(\"out_of_gasUpdate now defaeted state\");\n                                }   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
			"parameters": [
				"statename"
			]
		},
		"playBulletHittingMetal": {
			"body": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                               console.log(\"playBulletHittingMetal\");\n                                this.audioAPI.playSound(\"\", false, 100);   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
			"parameters": []
		},
		"playBulletHittingWater": {
			"body": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                               console.log(\"playBulletHittingWater\");\n                                this.audioAPI.playSound(\"\", false, 100);   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
			"parameters": []
		},
		"playBulletWhizzingBy": {
			"body": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                               console.log(\"playBulletWhizzingBy\");\n                                this.audioAPI.playSound(\"\", false, 100);   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
			"parameters": []
		},
		"playExplosion": {
			"body": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                               console.log(\"playExplosion\");\n                                // #1:\n                                //this.audioAPI.playSound(\"/sas/assets/8d358349\", false, 100);\n                                // #2:\n                                //this.audioAPI.playSound(\"/sas/assets/d714ebe1\", false, 100);\n                                // #3:\n                                this.audioAPI.playSound(\"/sas/assets/3c6b353e\", false, 100);   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
			"parameters": []
		},
		"playHelicopter": {
			"body": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                               //console.log(\"playHelicopter\");\n                                // #1:\n                                //this.audioAPI.playSound(\"/sas/assets/af90534a\", false, 100);\n                                //#2:\n                                this.audioAPI.playSound(\"/sas/assets/dc81768a\", false, 100);   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
			"parameters": []
		},
		"playMotorIdle": {
			"body": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                               console.log(\"playMotorIdle\");\n                                this.audioAPI.playSound(\"\", false, 100);   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
			"parameters": []
		},
		"playMotorRunning": {
			"body": "\n\n\n\n\n\n\n       //console.log(\"playMotorRunning\");\n          // #1:\n          //this.audioAPI.playSound(\"/sas/assets/2cb9fef9\", false, 100);\n          // #2:\n          //this.audioAPI.playSound(\"/sas/assets/994ee0c8\", false, 100);\n          // #3:\n          var sound = vwf.callMethod(this.id, \"getSound\", [\"/sas/assets/c253157d\"]);\n\n          if (sound == null || !sound.isPlaying())\n          {\n              this.audioAPI.playSound(\"/sas/assets/c253157d\", false, 100);\n          } \n\n\n\n",
			"parameters": []
		},
		"playMotorSputtering": {
			"body": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                               console.log(\"playMotorSputtering\");\n                                this.audioAPI.playSound(\"\", false, 100);   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
			"parameters": []
		},
		"playWarning": {
			"body": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                               console.log(\"playWarning\");\n                                this.audioAPI.playSound(\"\", false, 100);   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
			"parameters": []
		},
		"ready": {
			"body": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                                                                 // The scene is now completely loaded. This will fire on each client when the client joins, so it`s not a great place to create objects\n                                this.Scene.unbind(\"keyDown\",this._kd);\n                                this.Scene.unbind(\"keyUp\",this._ku);\n                                var self = this;\n                                this._kd = function(e,d){self._keyDown(e,d)};\n                                this._ku = function(e,d){self._keyUp(e,d)};\n                                this.Scene.bind(\"keyDown\",this._kd);\n                                this.Scene.bind(\"keyUp\",this._ku);                                                     \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
			"parameters": []
		},
		"verifyCamera": {
			"body": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                     return true;\n\n                        var cam = this.Scene.clientAPI.getCameraForClient(vwf.client());\n\n                        if (!cam || cam.id != this.controllingCamera) return false;\n                        return true; \n\n\n\n\n\n\n\n\n\n\n",
			"parameters": []
		},
		"xAPISend": {
			"body": "console.log(\"FAC Missile Launcher xAPI Send\");\n\n    //1 - Registration for the run of this game\n    if (!this.Scene.attempt)\n    {\n        this.Scene.attempt = ADL.ruuid();\n    }\n\n    //2 - Wrapper setup\n    var conf = {\n        \"endpoint\": \"https://lrs.adlnet.gov/xapi/\",\n        \"auth\": \"Basic \" + toBase64('iitsecDemo:1234'),\n    };\n    this.Scene.___xAPI.configure(conf);\n    // this.Scene.xAPI.configure(conf);\n\n    //3 - Who is playing\n    //Change string after actor.name field to role player is assuming\n    var actor = {\n        account:\n        {\n            name: _UserManager.GetCurrentUserName() + '/Fast Attack Craft',\n            homePage: \"https://sandbox.adlnet.gov\",\n        },\n        name: _UserManager.GetCurrentUserName(),\n    };\n\n    //4 - Verb = did\n    var verb = {\n        id: \"http://vws.adlnet.gov/verbs/launched\",\n        display:\n        {\n            \"en-US\": \"launched\",\n        }\n    };\n\n    //5 What happened and where\n    //title and description of world along with name of object\n    //Change definition.name string of action to be recorded\n    var object = {\n        id: window.location.toString() + \"#\" + this.id,\n        definition:\n        {\n            name:\n            {\n                \"en-US\": _DataManager.getInstanceData().title + \"/\" + this.DisplayName + \"/\" + str,\n            },\n            description:\n            {\n                \"en-US\": _DataManager.getInstanceData().description,\n            }\n        }\n    };\n\n    //6 - Additional context\n    var contextActivities = {\n        \"grouping\": [\n            {\n                \"id\": \"http://adlnet.gov/event/2015/iitsecdemo/dev/vw\"\n            }\n        ],\n        \"category\": [\n            {\n                \"id\": \"http:adlnet.gov/event/2015/iitsecdemo\"\n            }\n        ],\n        \"other\": [\n            {\n                \"id\": _DataManager.getCurrentApplication(),\n                definition:\n                {\n                    type: \"https://sandbox.adlnet.gov/world\"\n                }\n            }\n        ]\n    };\n\n    //7 - Result of the goals\n    var result = {\n        duration: \"PT\" + Math.floor(this.Scene.time) + \"S\"\n    };\n\n    //8 - Roll it all into one statement\n\n    var stmt = new ADL.XAPIStatement(actor, verb, object);\n    stmt.addParentActivity(new ADL.XAPIStatement.Activity(window.location.toString(), _DataManager.getInstanceData().title, _DataManager.getInstanceData.description));\n\n    stmt.context.contextActivities = contextActivities;\n    stmt.context.registration = this.Scene.attempt;\n    stmt.result = result;\n\n    this.Scene.___xAPI.sendStatement(null, stmt);\n    // this.Scene.xAPI.sendStatement(null, stmt);",
			"parameters": [
				"str"
			]
		},
		"approachingTransition": {
			"body": "//console.log(\"approachingTransition\");\n    this.approachingUpdate(this.currentState);",
			"parameters": []
		},
		"approachingUpdate": {
			"body": "//console.log(\"approachingUpdate\");\n    this.currentState = this.states[\"approaching\"];",
			"parameters": [
				"statename"
			]
		},
		"consumeFuel": {
			"body": "if (this.fuel <= 0.0)\n    {\n        this.currentState = this.states[\"out_of_gas\"];\n    }\n    else\n    {\n        this.fuel = this.fuel - this.fuelConsumptionRate;\n        //console.log(\"fuel: \" + this.fuel);\n    }",
			"parameters": []
		},
		"_keyUp": {
			"body": "if (!this.verifyCamera()) return;\n    if (this._keysDown.indexOf(e.key.char) !== -1)\n    {\n        this._keysDown.splice(this._keysDown.indexOf(e.key.char), 1);\n    }\n    if (e.key.char == \" \")\n    {\n        if (this.rockets > 0)\n        {\n            this.activateState(\"fire_rocket\");\n            console.log(\"rockets: \" + this.rockets);\n\n            console.log(\"Broadcasting leader fire...\");\n            this.broadcast(\"facLeaderFire\", [], 500);\n        }\n    }",
			"parameters": [
				"e",
				"d"
			]
		},
		"playMissileLaunch": {
			"body": "console.log(\"playMissileLaunch\");\n    // #1:\n    //this.audioAPI.playSound(\"/sas/assets/744acf2e\", false, 100);\n    // #2:\n    //this.audioAPI.playSound(\"/sas/assets/4334801b\", false, 100);\n    // #3:\n    //this.audioAPI.playSound(\"/sas/assets/10b027bd\", false, 100);\n    // #4:\n    //this.audioAPI.playSound(\"/sas/assets/94d508e3\", false, 100);\n    // #5:\n    this.audioAPI.playSound(\"/sas/assets/263beb86\", false, 100);",
			"parameters": []
		},
		"launchMissile": {
			"body": "var def = this.missileDef;\n    var pos = this.children_by_name.MissileLauncher.worldTransform.slice();\n\n    pos[14] += 0;\n    def.properties.transform = pos;\n    // def.properties.___physics_velocity_linear = this.physicsAPI.getLinearVelocity();\n    def.properties.fired = true;\n    var now = performance.now();\n    // console.profile(\"launch\");\n    this.xAPISend(\"Fired Missile\");\n    var smokeDef = this.smokeDef;\n    vwf.createChild(vwf.application(), GUID(), _DataManager.getCleanNodePrototype(def), null, function(id)\n    {\n        smokeDef.properties.targetEntity = id;\n        vwf.createChild(vwf.application(), GUID(), _DataManager.getCleanNodePrototype(smokeDef), null, function()\n        {\n            console.log(performance.now() - now);\n        });\n    });",
			"parameters": []
		},
		"tick": {
			"body": "var leader_pos = this.transformAPI.getWorldPosition();\n    var leader_projection = this.transformAPI.localToGlobal(-150, 0, 0);\n\n    this.broadcast(\"facLeaderInput\", [leader_projection], 500);\n    this.broadcast(\"facPeerInput\", [leader_pos, this.id], 40);\n\n    var waterDepth = 20;\n    var hullThick = 2.2;\n    var depthFloor = waterDepth + hullThick;\n    // The tick function is called 20 times every second.\n    // Write code here to animate over time\n    this.physicsAPI.addForceAtCenter(0, 0, 9.8);\n    this.physicsAPI.wake();\n    var mass = this.physicsAPI.getMass();\n    var corners = [\n        [this._length / 2, this.width / 2, 0],\n        [this._length / 2, -this.width / 2, 0],\n        [-this._length / 2, this.width / 2, 0],\n        [-this._length / 2, -this.width / 2, 0],\n    ];\n\n    this.counter++;\n    var rocking = -mass / 5;\n    this.physicsAPI.addForceOffset([0, 0, rocking], [Math.sin(this.counter / 30) * this._length, Math.cos(this.counter / 15) * this.width, 0]);\n    this.physicsAPI.addForceOffset([0, 0, rocking], [Math.cos(this.counter / 10) * this._length, Math.sin(this.counter / 10) * this.width, 0]);\n\n    for (var i = 0; i < corners.length; i++)\n    {\n        var corner = corners[i];\n        var worldCorner = this.transformAPI.localToGlobal(corner);\n        var depth = depthFloor - worldCorner[2];\n        depth = Math.min(depth, 5);\n        if (depth > 0)\n        {\n\n            this.physicsAPI.addForceOffset([0, 0, depth * mass * 9.8 / 3], Vec3.subtract(worldCorner, this.transformAPI.getPosition(), []));\n            var vel = this.physicsAPI.getLinearVelocity();\n            var torque = this.physicsAPI.getAngularVelocity();\n            //    vel[0] *= .6;\n            // vel[1] *= .6;\n            vel[2] *= 1 - depth / 50;\n\n            torque[0] *= 1 - depth / 100;\n            torque[1] *= 1 - depth / 100;\n            torque[2] *= 1 - depth / 100;\n            this.physicsAPI.setAngularVelocity(torque);\n            this.physicsAPI.setLinearVelocity(vel);\n        }\n        //  if (depth < 0)\n        {\n\n            this.physicsAPI.addForceOffset([0, 0, -mass * 9.8 / 4], Vec3.subtract(worldCorner, this.transformAPI.getPosition(), []));\n            var vel = this.physicsAPI.getLinearVelocity();\n            var torque = this.physicsAPI.getAngularVelocity();\n        }\n\n    }\n\n    var depth = depthFloor - this.transformAPI.getPosition()[2]\n    depth = Math.min(depth, 5);\n    if (depth > 0)\n    {\n\n        var vel = this.physicsAPI.getLinearVelocity();\n        vel = this.transformAPI.globalToLocalRotation(vel);\n        vel[0] *= 1.0 - depth / 100;\n        vel[1] *= 1.0 - depth / 30;\n        vel = this.transformAPI.localToGlobalRotation(vel);\n        this.physicsAPI.setLinearVelocity(vel);\n\n    }\n\n    if (this._keysDown.indexOf(\"W\") !== -1)\n    {\n        this.consumeFuel();\n        if (this.currentState.name === this.states[\"out_of_gas\"].name)\n        {\n            console.log(\"(W) out of gas!\");\n            this.activateState(\"out_of_gas\");\n        }\n        else\n        {\n            var force = this.transformAPI.localToGlobal(-10 * mass, 0, 0);\n            this.physicsAPI.addForceAtCenter(force[0], force[1], force[2]);\n            this.playMotorRunning();\n            switch (this.FACMovementDirection())\n            {\n                case \"approaching\":\n                    this.activateState(\"approaching\");\n                    break;\n                case \"idle\":\n                    this.activateState(\"idle\");\n                    break;\n                case \"moving_away\":\n                    this.activateState(\"moving_away\");\n                    break;\n            }\n        }\n    }\n    if (this._keysDown.indexOf(\"S\") !== -1)\n    {\n        this.consumeFuel();\n        if (this.currentState.name === this.states[\"out_of_gas\"].name)\n        {\n            console.log(\"(S) out of gas!\");\n            this.activateState(\"out_of_gas\");\n        }\n        else\n        {\n            var force = this.transformAPI.localToGlobal(10 * mass, 0, 0);\n            this.physicsAPI.addForceAtCenter(force[0], force[1], force[2]);\n            this.playMotorRunning();\n            switch (this.FACMovementDirection())\n            {\n                case \"approaching\":\n                    this.activateState(\"approaching\");\n                    break;\n                case \"idle\":\n                    this.activateState(\"idle\");\n                    break;\n                case \"moving_away\":\n                    this.activateState(\"moving_away\");\n                    break;\n            }\n        }\n    }\n    var vel = this.physicsAPI.getLinearVelocity();\n    vel = this.transformAPI.globalToLocalRotation(vel);\n    var speedTorqueFactor = (Math.abs(vel[0]) / 3);\n    if (this._keysDown.indexOf(\"A\") !== -1)\n    {\n\n        this.physicsAPI.addTorque(0, 0, speedTorqueFactor * mass * 3);\n        var force = this.transformAPI.localToGlobal(speedTorqueFactor * mass, 0, 0);\n        this.physicsAPI.addTorque(force);\n    }\n    if (this._keysDown.indexOf(\"D\") !== -1)\n    {\n        this.physicsAPI.addTorque(0, 0, -speedTorqueFactor * mass * 3);\n        var force = this.transformAPI.localToGlobal(-speedTorqueFactor * mass, 0, 0);\n        this.physicsAPI.addTorque(force);\n    }\n    if (this._keysDown.indexOf(\" \") !== -1)\n    {\n        if (this.rockets > 0)\n        {\n            this.currentState = this.states[\"fire_rocket\"];\n        }\n        else\n        {\n            this.currentState = this.states[\"moving_away\"];\n        }\n    }",
			"parameters": []
		}
	},
	"children": {
		"N8c4837dd": {
			"extends": "box2.vwf",
			"source": "vwf/model/threejs/box.js",
			"type": "subDriver/threejs",
			"sequence": 0,
			"random": {
				"s0": 0.778299,
				"s1": 0.286493,
				"s2": 0.191579,
				"c": 1
			},
			"properties": {
				"___physics_activation_state": 1,
				"___physics_deactivation_time": 0,
				"___physics_velocity_linear": [
					0,
					0,
					0
				],
				"___physics_velocity_angular": [
					0,
					0,
					0
				],
				"DisplayName": "MissileLauncher",
				"___assetServerOriginalID": "N8c4837dd",
				"height": 1.61,
				"materialDef": {
					"alpha": 1,
					"ambient": {
						"b": 1,
						"g": 1,
						"r": 1
					},
					"blendMode": 1,
					"color": {
						"a": 1,
						"b": 1,
						"g": 1,
						"r": 1
					},
					"depthtest": true,
					"depthwrite": true,
					"emit": {
						"b": 0,
						"g": 0,
						"r": 0
					},
					"fog": true,
					"layers": [
						{
							"alpha": 1,
							"blendMode": 0,
							"mapInput": 0,
							"mapTo": 1,
							"offsetx": 0,
							"offsety": 0,
							"rot": 0,
							"scalex": 1,
							"scaley": 1,
							"src": "checker.jpg"
						}
					],
					"metal": false,
					"reflect": 0.8,
					"shadeless": false,
					"shading": true,
					"shadow": true,
					"shininess": 15,
					"side": 0,
					"specularColor": {
						"b": 0.57735,
						"g": 0.57735,
						"r": 0.57735
					},
					"specularLevel": 1,
					"type": "phong",
					"vertexColors": false,
					"wireframe": false
				},
				"owner": "ADLteam",
				"transform": [
					0.24060429632663727,
					-0.021820155903697014,
					0.9703761339187622,
					0,
					0.0010019970359280705,
					-0.9997419714927673,
					-0.022729994729161263,
					0,
					0.9706209301948547,
					0.006441246252506971,
					-0.24052102863788605,
					0,
					1.000000238418579,
					0.000001158783902610594,
					1.4999992847442627,
					1
				],
				"type": "Primitive",
				"visible": false,
				"width": 1.36,
				"worldTransform": [
					-0.1724608689546585,
					-0.18004721403121948,
					0.9653215408325195,
					0,
					-0.8623870015144348,
					0.4965091347694397,
					-0.06146547570824623,
					0,
					-0.46963274478912354,
					-0.8456173539161682,
					-0.24162431061267853,
					0,
					3.1996123790740967,
					-4.3375163078308105,
					22.242034912109375,
					1
				]
			},
			"events": {
				"pointerClick": {
					"parameters": [
						"eventData",
						"nodeData"
					],
					"body": "this.parent.launchMissile();"
				}
			}
		},
		"N958e2662": {
			"extends": "asset.vwf",
			"source": "/sas/assets/c1064312",
			"type": "subDriver/threejs/asset/vnd.collada+xml",
			"sequence": 0,
			"random": {
				"s0": 0.375302,
				"s1": 0.872168,
				"s2": 0.110384,
				"c": 1
			},
			"properties": {
				"___physics_activation_state": 1,
				"___physics_deactivation_time": 0,
				"___physics_velocity_linear": [
					0,
					0,
					0
				],
				"___physics_velocity_angular": [
					0,
					0,
					0
				],
				"materialDef": {
					"alpha": 1,
					"ambient": {
						"b": 0.584,
						"g": 0.584,
						"r": 0.584
					},
					"blendMode": 1,
					"color": {
						"b": 1,
						"g": 1,
						"r": 1
					},
					"depthtest": true,
					"depthwrite": true,
					"emit": {
						"b": 0,
						"g": 0,
						"r": 0
					},
					"fog": true,
					"layers": [
						{
							"alpha": 1,
							"mapInput": 0,
							"mapTo": 1,
							"offsetx": 0,
							"offsety": 0,
							"scalex": 1,
							"scaley": 1,
							"src": "/sas/assets/7e6084c4"
						}
					],
					"metal": false,
					"reflect": 0.001,
					"shading": true,
					"shininess": 0.004002,
					"side": 0,
					"specularColor": {
						"b": 0,
						"g": 0,
						"r": 0
					},
					"specularLevel": 1,
					"type": "phong",
					"vertexColors": false,
					"wireframe": false
				},
				"DisplayName": "./vwfdatamanager.svc/DataFile/Navy/AttackSpeedBoat.dae1",
				"___assetServerOriginalID": "N958e2662",
				"owner": "ADLteam",
				"transform": [
					-9.999999974752427e-7,
					1,
					-9.999999974752427e-7,
					0,
					-1.0000009536743164,
					-9.999999974752427e-7,
					-9.999999974752427e-7,
					0,
					-9.999999974752427e-7,
					0,
					1,
					0,
					0.5,
					0,
					-0.5,
					1
				]
			}
		},
		"N8cf5a8e2": {
			"extends": "http://vwf.example.com/node3.vwf",
			"sequence": 0,
			"random": {
				"s0": 0.022454,
				"s1": 0.002702,
				"s2": 0.55584,
				"c": 1
			},
			"properties": {
				"DisplayName": "enginePos",
				"___assetServerOriginalID": "N8cf5a8e2",
				"glyphURL": "../vwf/view/editorview/images/icons/sphere.png",
				"owner": "ADLteam",
				"transform": [
					1,
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					-9.999999974752427e-7,
					0,
					1,
					0,
					3,
					0,
					-0.75,
					1
				],
				"transformAPI": {
					"COORDINATES": {
						"GLOBAL": "global",
						"LOCAL": "local",
						"PARENT": "parent"
					}
				},
				"worldTransform": [
					-0.4981963336467743,
					-0.8635994791984558,
					-0.002325864741578698,
					0,
					0.8629013299942017,
					-0.4978981912136078,
					0.038828615099191666,
					0,
					-0.03479430079460144,
					0.017390314489603043,
					0.9962409138679504,
					0,
					2.2815070152282715,
					-6.103840351104736,
					19.99584197998047,
					1
				]
			},
			"children": {
				"Nafc04425": {
					"extends": "SandboxParticleSystem.vwf",
					"sequence": 0,
					"random": {
						"s0": 0.337756,
						"s1": 0.105646,
						"s2": 0.018279,
						"c": 1
					},
					"properties": {
						"DisplayName": "Wake",
						"alphaTest": 0,
						"colorRange": [
							0,
							0,
							0.231372,
							0
						],
						"damping": -0.01,
						"depthTest": false,
						"emitterPosition": [
							41.4999923706055,
							-62.0858726501465,
							19.9328174591064
						],
						"emitterSize": [
							1,
							1,
							0.4
						],
						"emitterType": "box",
						"endColor": [
							0.741176,
							0.854901,
							0.988235,
							0.24
						],
						"endSize": 3,
						"gravity": -0.02,
						"image": "../vwfDataManager.svc/texture?UID=smoke.png",
						"mamSpin": 2.6,
						"maxOrientation": 19.6,
						"maxVelocity": [
							0.01,
							0.01,
							0.01
						],
						"minOrientation": -14.8,
						"minSpin": -3.8,
						"minVelocity": [
							-0.011,
							-0.01,
							-0.01
						],
						"owner": "ADLteam",
						"renderDepth": -3,
						"sizeRange": 0.62,
						"solver": "Analytic",
						"sourceAssetId": "ee09777b",
						"startColor": [
							1,
							1,
							1,
							0.98
						],
						"transform": [
							0.577344726164327,
							0.770921653073968,
							-0.261451471581131,
							0,
							-0.766162329482909,
							0.622908430848168,
							0.144859834528399,
							0,
							0.275086081166534,
							0.116914035085497,
							0.952188403809071,
							0,
							0,
							0,
							0,
							1
						],
						"type": "ParticleSystem",
						"___assetServerOriginalID": "Nafc04425"
					},
					"methods": {
						"tick": {
							"body": "  // The tick function is called 20 times every second.\n    // Write code here to animate over time\n    try{\n    this.emitterPosition = this.Scene.children_by_name.box4.children_by_name.enginePos.transformAPI.getWorldPosition();\n    findviewnode(this.id).children[0].children[0].frustumCulled = false\n    }catch(e)\n    {\n    }  ",
							"parameters": []
						}
					}
				}
			}
		},
		"N83e3ec00": {
			"extends": "box2.vwf",
			"source": "vwf/model/threejs/box.js",
			"type": "subDriver/threejs",
			"sequence": 0,
			"random": {
				"s0": 0.198099663946778,
				"s1": 0.0275812551844865,
				"s2": 0.352169041289017,
				"c": 1
			},
			"properties": {
				"___physics_activation_state": 1,
				"___physics_deactivation_time": 0,
				"___physics_velocity_linear": [
					0,
					0,
					0
				],
				"___physics_velocity_angular": [
					0,
					0,
					0
				],
				"DisplayName": "box7",
				"___assetServerOriginalID": "N83e3ec00",
				"_length": 3.45,
				"castShadows": false,
				"height": 0.18,
				"materialDef": {
					"alpha": 0,
					"ambient": {
						"b": 1,
						"g": 1,
						"r": 1
					},
					"blendMode": 1,
					"color": {
						"a": 0,
						"b": 1,
						"g": 1,
						"r": 1
					},
					"depthtest": true,
					"depthwrite": true,
					"emit": {
						"b": 0,
						"g": 0,
						"r": 0
					},
					"fog": true,
					"layers": [],
					"metal": false,
					"reflect": 0.8,
					"shadeless": false,
					"shading": true,
					"shadow": true,
					"shininess": 15,
					"side": 0,
					"specularColor": {
						"b": 0.577350269189626,
						"g": 0.577350269189626,
						"r": 0.577350269189626
					},
					"specularLevel": 1,
					"type": "phong",
					"vertexColors": false,
					"wireframe": false
				},
				"owner": "ADLteam",
				"renderDepth": 7,
				"transform": [
					1,
					0,
					9.999999974752427e-7,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					1,
					0,
					1,
					0,
					-0.2499990016222,
					1
				],
				"type": "Primitive",
				"width": 2.18
			}
		}
	}
}