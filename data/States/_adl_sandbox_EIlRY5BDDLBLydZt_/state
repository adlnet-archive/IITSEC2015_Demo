[{"children":{"N3386e674":{"extends":"http://vwf.example.com/node3.vwf","properties":{"DisplayName":"enginePos","___assetServerOriginalID":"N8cf5a8e2","glyphURL":"../vwf/view/editorview/images/icons/sphere.png","owner":"ADLteam","transform":[1,0,0,0,0,1,0,0,-9.999999974752427e-7,0,1,0,3,0,-0.75,1],"transformAPI":{"COORDINATES":{"GLOBAL":"global","LOCAL":"local","PARENT":"parent"}},"worldTransform":[-0.999123215675354,-0.041426870971918106,0.006052142009139061,0,0.04162561520934105,-0.9984263181686401,0.03757866099476814,0,0.004486849531531334,0.03779767453670502,0.9992753267288208,0,14.658716201782227,-197.80630493164062,20.094884872436523,1]},"random":{"c":1,"s0":0.022454,"s1":0.002702,"s2":0.55584},"sequence":0,"name":"N3386e674"},"N6f3c703a":{"extends":"asset.vwf","properties":{"DisplayName":"./vwfdatamanager.svc/DataFile/Navy/AttackSpeedBoat.dae1","___assetServerOriginalID":"N958e2662","___physics_activation_state":1,"___physics_deactivation_time":0,"___physics_velocity_angular":[0,0,0],"___physics_velocity_linear":[0,0,0],"materialDef":{"alpha":1,"ambient":{"b":0.584,"g":0.584,"r":0.584},"blendMode":1,"color":{"b":1,"g":1,"r":1},"depthtest":true,"depthwrite":true,"emit":{"b":0,"g":0,"r":0},"fog":true,"layers":[{"alpha":1,"mapInput":0,"mapTo":1,"offsetx":0,"offsety":0,"scalex":1,"scaley":1,"src":"/sas/assets/7e6084c4"}],"metal":false,"reflect":0.001,"shading":true,"shininess":0.004002,"side":0,"specularColor":{"b":0,"g":0,"r":0},"specularLevel":1,"type":"phong","vertexColors":false,"wireframe":false},"owner":"ADLteam","transform":[-9.999999974752427e-7,1,-9.999999974752427e-7,0,-1.0000009536743164,-9.999999974752427e-7,-9.999999974752427e-7,0,-9.999999974752427e-7,0,1,0,0.5,0,-0.5,1]},"random":{"c":1,"s0":0.375302,"s1":0.872168,"s2":0.110384},"sequence":0,"source":"/sas/assets/c1064312","type":"subDriver/threejs/asset/vnd.collada+xml","name":"N6f3c703a"},"Nf3a8dbb6":{"extends":"box2.vwf","properties":{"DisplayName":"box7","___assetServerOriginalID":"N83e3ec00","___physics_activation_state":1,"___physics_deactivation_time":0,"___physics_velocity_angular":[0,0,0],"___physics_velocity_linear":[0,0,0],"_length":3.45,"castShadows":false,"height":1.13,"materialDef":{"alpha":0,"ambient":{"b":1,"g":1,"r":1},"blendMode":1,"color":{"a":0,"b":1,"g":1,"r":1},"depthtest":true,"depthwrite":true,"emit":{"b":0,"g":0,"r":0},"fog":true,"layers":[],"metal":false,"reflect":0.8,"shadeless":false,"shading":true,"shadow":true,"shininess":15,"side":0,"specularColor":{"b":0.577350269189626,"g":0.577350269189626,"r":0.577350269189626},"specularLevel":1,"type":"phong","vertexColors":false,"wireframe":false},"owner":"ADLteam","renderDepth":7,"transform":[1,0,9.999999974752427e-7,0,0,1,0,0,0,0,1,0,1,0,-0.2499990016222,1],"type":"Primitive","width":2.18},"random":{"c":1,"s0":0.198099663946778,"s1":0.0275812551844865,"s2":0.352169041289017},"sequence":0,"source":"vwf/model/threejs/box.js","type":"subDriver/threejs","name":"Nf3a8dbb6"},"Nfa80d119":{"events":{"pointerClick":{"body":"\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n                                            this.parent.launchMissile()                     ","parameters":["                                                                eventData","                                                                nodeData                                                                "]}},"extends":"box2.vwf","properties":{"DisplayName":"MissileLauncher","___assetServerOriginalID":"N8c4837dd","___physics_activation_state":1,"___physics_deactivation_time":0,"___physics_velocity_angular":[0,0,0],"___physics_velocity_linear":[0,0,0],"height":1.61,"materialDef":{"alpha":1,"ambient":{"b":1,"g":1,"r":1},"color":{"a":1,"b":1,"g":1,"r":1},"emit":{"b":0,"g":0,"r":0},"layers":[{"alpha":1,"blendMode":0,"mapInput":0,"mapTo":1,"offsetx":0,"offsety":0,"rot":0,"scalex":1,"scaley":1,"src":"checker.jpg"}],"reflect":0.8,"shadeless":false,"shadow":true,"shininess":15,"specularColor":{"b":0.57735,"g":0.57735,"r":0.57735},"specularLevel":1},"owner":"ADLteam","transform":[0.08618500083684921,-0.022557999938726425,0.9960219860076904,0,0.0010019999463111162,-0.9997419714927673,-0.02273000031709671,0,0.9962769746780396,0.002956999931484461,-0.08614099770784378,0,1,0,1.5,1],"type":"Primitive","visible":false,"width":1.36},"random":{"c":1,"s0":0.778299,"s1":0.286493,"s2":0.191579},"sequence":0,"source":"vwf/model/threejs/box.js","type":"subDriver/threejs","name":"Nfa80d119"}},"extends":"box2.vwf","methods":{"FACMovementDirection":{"body":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                            // set equal to \"\" after adding calculations:\n                                            var movement = \"closing\";\n                                            // Perform calculations to determine approaching or moving away states:\n                                            //     movement = \"closing\" if distance to target is getting smaller\n                                            //     movement = \"none\" if distance to target hasn't changed\n                                            //     movement = \"increasing\" if distance to target is getting larger\n                                            switch (movement)\n                                            {\n                                                case \"closing\":\n                                                    this.currentState = this.states[\"approaching\"];\n                                                    return \"approaching\";\n                                                case \"none\":\n                                                    this.currentState = this.states[\"idle\"];\n                                                    return \"idle\";\n                                                case \"increasing\":\n                                                    this.currentState = this.states[\"moving_away\"];\n                                                    return \"moving_away\";\n                                            }    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","parameters":[]},"_keyDown":{"body":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                            if (!this.verifyCamera()) return;\n                                            if (this.currentState === null)\n                                            {\n                                                console.log(\"Set initial state\");\n                                                this.currentState = this.states[\"approaching\"];\n                                            }\n                                            if (this._keysDown.indexOf(e.key.char) == -1)\n                                            {\n                                                this._keysDown.push(e.key.char);\n                                            }    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","parameters":["e","d"]},"_keyUp":{"body":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                            if (!this.verifyCamera()) return;\n                                            if (this._keysDown.indexOf(e.key.char) !== -1)\n                                            {\n                                                this._keysDown.splice(this._keysDown.indexOf(e.key.char), 1);\n                                            }\n                                            if (e.key.char == \" \")\n                                            {\n                                                if (this.rockets > 0)\n                                                {\n                                                    this.activateState(\"fire_rocket\");\n                                                    console.log(\"rockets: \" + this.rockets);\n                                                }\n                                            }    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","parameters":["e","d"]},"activateState":{"body":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                            //console.log(\"activateState\");\n                                            var state = this.states[statename];\n\n                                            if (this.currentState.transitions.indexOf(statename) == -1)\n                                            {\n                                                console.log(\"invalid transition!\");\n                                                return;\n                                            }\n\n                                            if (state.transitionFunction)\n                                                this[state.transitionFunction](this.currentState);\n\n                                            this.currentState = state;\n\n                                            for (var i in state.properties)\n                                            {\n                                                console.log(state.properties[i]);\n                                                this[i] = state.properties[i];\n                                            }    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","parameters":["statename"]},"approachingTransition":{"body":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                         //console.log(\"approachingTransition\");\n                            this.approachingUpdate(this.currentState); \n\n\n\n\n\n\n\n\n\n\n\n\n","parameters":[]},"approachingUpdate":{"body":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                         //console.log(\"approachingUpdate\");\n                            this.currentState = this.states[\"approaching\"]; \n\n\n\n\n\n\n\n\n\n\n\n\n","parameters":["statename"]},"collidingTransition":{"body":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                            console.log(\"collidingTransition\");\n                                            this.currentState = this.states[\"colliding\"];    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","parameters":[]},"collidingUpdate":{"body":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                            console.log(\"collidingUpdate\");\n                                            this.currentState = this.states[\"colliding\"];    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","parameters":["statename"]},"consumeFuel":{"body":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                            if (this.fuel <= 0.0)\n                                            {\n                                                this.currentState = this.states[\"out_of_gas\"];\n                                            }\n                                            else\n                                            {\n                                                this.fuel = this.fuel - this.fuelConsumptionRate;\n                                                console.log(\"fuel: \" + this.fuel);\n                                            }    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","parameters":[]},"defeatedTransition":{"body":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                            console.log(\"defeatedTransition\");\n                                            this.currentState = this.states[\"defeated\"];    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","parameters":[]},"defeatedUpdate":{"body":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                            console.log(\"defeatedUpdate\");\n                                            this.currentState = this.states[\"defeated\"];    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","parameters":["statename"]},"facFollowBehavior":{"body":"\n\n\n\n\n     var max_distance = 30;\n        var mass = this.physicsAPI.getMass();\n\n        // Get leader world position\n        var leader_pos = args;\n\n        // Get my world position\n        var follower_pos = this.transformAPI.getWorldPosition();\n\n        // Get the distance between me and the leader\n        var distance = MATH.distanceVec3(leader_pos, follower_pos);\n        console.log(\"facFollowBehavior: distance: \" + distance);\n\n        // If there is a big gap, go towards leader\n        if (distance > max_distance)\n        {\n            var direction = MATH.subVec3(follower_pos, leader_pos);\n            console.log(\"diff: \" + direction);\n\n            direction[2] = 0;\n\n            var norm_direction = MATH.toUnitVec3(direction);\n\n            norm_direction = this.transformAPI.globalToLocalRotation(norm_direction);\n\n            if (norm_direction[1] < 0)\n            {\n                this.moveRight(1);\n            }\n            else\n            {\n                this.moveLeft(1);\n            }\n\n            var force = this.transformAPI.localToGlobalRotation(-10 * mass, 0, 0);\n            this.physicsAPI.addForceAtCenter(force);\n            this.playMotorRunning();\n        }\n\n        return;\n\n        if (args[0].indexOf(\" \") !== -1)\n        {\n            if (this.rockets > 0)\n            {\n                this.currentState = this.states[\"fire_rocket\"];\n            }\n            else\n            {\n                this.currentState = this.states[\"moving_away\"];\n            }\n        } \n\n\n","parameters":["args"]},"facPeerPosition":{"body":"\n\n\n\n\n     console.log(\"got here\");\n\n        console.log(\"peer position: \" + args[0]);\n        console.log(\"sender: \" + args[1]);\n\n        if (args[1] == this.id) return;\n\n        var max_distance = 50;\n        var mass = this.physicsAPI.getMass();\n\n        // Get leader world position\n        var leader_pos = args[0];\n\n        // Get my world position\n        var follower_pos = this.transformAPI.getWorldPosition();\n\n        // Get the distance between me and the leader\n        var distance = MATH.distanceVec3(leader_pos, follower_pos);\n        console.log(\"facFollowBehavior: distance: \" + distance);\n\n        // If there is a big gap, go towards leader\n        if (distance < max_distance)\n        {\n            var direction = MATH.subVec3(follower_pos, leader_pos);\n            console.log(\"diff: \" + direction);\n\n            direction[2] = 0;\n\n            var norm_direction = MATH.toUnitVec3(direction);\n\n            norm_direction = this.transformAPI.globalToLocalRotation(norm_direction);\n\n            if (norm_direction[1] > 0)\n            {\n                this.moveRight(1 / distance);\n            }\n            else\n            {\n                this.moveLeft(1 / distance);\n            }\n        }\n\n        return; \n\n\n","parameters":["args"]},"fire_rocketTransition":{"body":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                            console.log(\"fire_rocketTransition\");\n                                            this.fire_rocketUpdate(this.currentState);    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","parameters":[]},"fire_rocketUpdate":{"body":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                            console.log(\"fire_rocketUpdate\");\n                                            this.launchMissile();\n                                            this.playMissileLaunch();\n                                            this.rockets = this.rockets - 1;\n                                            if (this.rockets > 0)\n                                            {\n                                                this.currentState = this.states[\"fire_rocket\"];\n                                                console.log(\"rocketUpdate state fire \");\n                                            }\n                                            else\n                                            {\n                                                this.currentState = this.states[\"idle\"];\n                                                console.log(\"rocketUpdate state idle\");\n                                            }    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","parameters":["statename"]},"hit":{"body":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                         var pos = args[0];\n                                            var force = args[1];\n                                            if (typeof force == 'number')\n                                                this.health -= force;\n                                            else\n                                                this.health -= 101;\n\n                                            if (this.health < 0)\n                                            {\n                                                var def = this.explosionDef;\n                                                var pos = this.transformAPI.getWorldPosition();\n                                                def.properties.transform[12] = pos[0];\n                                                def.properties.transform[13] = pos[1];\n                                                def.properties.transform[14] = pos[2];\n                                                def.properties.fuse = 1;\n                                                vwf.createChild(vwf.application(), GUID(), _DataManager.getCleanNodePrototype(def), null);\n                                                this.parent.children.delete(this);\n                                            } \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","parameters":["args"]},"idleTransition":{"body":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                           console.log(\"idleTransition\");\n                                            this.currentState = this.states[\"idle\"];   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","parameters":[]},"idleUpdate":{"body":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                           console.log(\"idleUpdate\");\n                                            this.currentState = this.states[\"idle\"];   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","parameters":["statename"]},"launchMissile":{"body":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                     var def = this.missileDef;\n                                        var pos = this.children_by_name.MissileLauncher.worldTransform.slice();\n\n                                        pos[14] += 0;\n                                        def.properties.transform = pos;\n                                       // def.properties.___physics_velocity_linear = this.physicsAPI.getLinearVelocity();\n                                        def.properties.fired = true;\n                                        var now = performance.now();\n                                        // console.profile(\"launch\");\n                                        vwf.createChild(vwf.application(), GUID(), _DataManager.getCleanNodePrototype(def), null, function()\n                                        {\n                                            console.log(performance.now() - now);\n                                        }); \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","parameters":[]},"moveBackwards":{"body":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                       console.log(\"move backwards\");\n                          \n                          var mass = this.physicsAPI.getMass();    \n                          \n                          this.consumeFuel();\n                          if (this.currentState && this.currentState.name === this.states[\"out_of_gas\"].name)\n                          {\n                              console.log(\"(S) out of gas!\");\n                              this.activateState(\"out_of_gas\");\n                          }\n                          else\n                          {\n                              var force = this.transformAPI.localToGlobal(10 * mass, 0, 0);\n                              this.physicsAPI.addForceAtCenter(force[0], force[1], force[2]);\n                              this.playMotorRunning();\n                              switch (this.FACMovementDirection())\n                              {\n                                  case \"approaching\":\n                                      this.activateState(\"approaching\");\n                                      break;\n                                  case \"idle\":\n                                      this.activateState(\"idle\");\n                                      break;\n                                  case \"moving_away\":\n                                      this.activateState(\"moving_away\");\n                                      break;\n                              }\n                          } \n\n\n\n\n\n\n\n\n\n\n\n","parameters":[]},"moveForward":{"body":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                       console.log(\"move forward\");\n                          \n                          var mass = this.physicsAPI.getMass();\n                          \n                          this.consumeFuel();\n                          if (this.currentState && this.currentState.name === this.states[\"out_of_gas\"].name)\n                          {\n                              console.log(\"(W) out of gas!\");\n                              this.activateState(\"out_of_gas\");\n                          }\n                          else\n                          {\n                              var force = this.transformAPI.localToGlobal(-10 * mass, 0, 0);\n                              this.physicsAPI.addForceAtCenter(force[0], force[1], force[2]);\n                              this.playMotorRunning();\n                              switch (this.FACMovementDirection())\n                              {\n                                  case \"approaching\":\n                                      this.activateState(\"approaching\");\n                                      break;\n                                  case \"idle\":\n                                      this.activateState(\"idle\");\n                                      break;\n                                  case \"moving_away\":\n                                      this.activateState(\"moving_away\");\n                                      break;\n                              }\n                          } \n\n\n\n\n\n\n\n\n\n\n\n","parameters":["mass"]},"moveLeft":{"body":"\n\n\n\n\n     console.log(\"Move Left\");\n        var mass = this.physicsAPI.getMass();\n\n        var vel = this.physicsAPI.getLinearVelocity();\n        vel = this.transformAPI.globalToLocalRotation(vel);\n        var speedTorqueFactor = (Math.abs(vel[0]) / 3);\n\n        this.physicsAPI.addTorque(0, 0, peerValue * speedTorqueFactor * mass * 3);\n        var force = this.transformAPI.localToGlobal(speedTorqueFactor * mass, 0, 0);\n        this.physicsAPI.addTorque(force); \n\n\n","parameters":["peerValue"]},"moveRight":{"body":"\n\n\n\n\n     console.log(\"move Right\");\n        var mass = this.physicsAPI.getMass();\n\n        var vel = this.physicsAPI.getLinearVelocity();\n        vel = this.transformAPI.globalToLocalRotation(vel);\n        var speedTorqueFactor = (Math.abs(vel[0]) / 3);\n\n        this.physicsAPI.addTorque(0, 0, peerValue * -speedTorqueFactor * mass * 3);\n        var force = this.transformAPI.localToGlobal(-speedTorqueFactor * mass, 0, 0);\n        this.physicsAPI.addTorque(force); \n\n\n","parameters":["peerValue"]},"moving_awayTransition":{"body":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                           console.log(\"moving_awayTransition\");\n                                            this.moving_awayUpdate(this.currentState);   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","parameters":[]},"moving_awayUpdate":{"body":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                           console.log(\"moving_awayUpdate\");\n                                            this.currentState = this.states[\"moving_away\"];   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","parameters":["statename"]},"out_of_gasTransition":{"body":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                           console.log(\"out_of_gasTransition\");\n                                            //this.currentState = this.states[\"out_of_gas\"];\n                                            this.out_of_gasUpdate(this.currentState);   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","parameters":[]},"out_of_gasUpdate":{"body":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                           console.log(\"out_of_gasUpdate\");\n                                            console.log(statename);\n                                            if (this.fuel <= 0)\n                                            {\n                                                this.currentState = this.states[\"out_of_gas\"];\n                                                console.log(\"out_of_gasUpdate now out_of_gas state\");\n                                            }\n                                            else if (this.hullStrength <= 0)\n                                            {\n                                                this.currentState = this.states[\"defeated\"];\n                                                console.log(\"out_of_gasUpdate now defaeted state\");\n                                            }   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","parameters":["statename"]},"playBulletHittingMetal":{"body":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                           console.log(\"playBulletHittingMetal\");\n                                            this.audioAPI.playSound(\"\", false, 100);   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","parameters":[]},"playBulletHittingWater":{"body":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                           console.log(\"playBulletHittingWater\");\n                                            this.audioAPI.playSound(\"\", false, 100);   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","parameters":[]},"playBulletWhizzingBy":{"body":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                           console.log(\"playBulletWhizzingBy\");\n                                            this.audioAPI.playSound(\"\", false, 100);   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","parameters":[]},"playExplosion":{"body":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                           console.log(\"playExplosion\");\n                                            // #1:\n                                            //this.audioAPI.playSound(\"/sas/assets/8d358349\", false, 100);\n                                            // #2:\n                                            //this.audioAPI.playSound(\"/sas/assets/d714ebe1\", false, 100);\n                                            // #3:\n                                            this.audioAPI.playSound(\"/sas/assets/3c6b353e\", false, 100);   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","parameters":[]},"playHelicopter":{"body":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                           //console.log(\"playHelicopter\");\n                                            // #1:\n                                            //this.audioAPI.playSound(\"/sas/assets/af90534a\", false, 100);\n                                            //#2:\n                                            this.audioAPI.playSound(\"/sas/assets/dc81768a\", false, 100);   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","parameters":[]},"playMissileLaunch":{"body":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                           console.log(\"playMissileLaunch\");\n                                            // #1:\n                                            //this.audioAPI.playSound(\"/sas/assets/744acf2e\", false, 100);\n                                            // #2:\n                                            //this.audioAPI.playSound(\"/sas/assets/4334801b\", false, 100);\n                                            // #3:\n                                            //this.audioAPI.playSound(\"/sas/assets/10b027bd\", false, 100);\n                                            // #4:\n                                            //this.audioAPI.playSound(\"/sas/assets/94d508e3\", false, 100);\n                                            // #5:\n                                            this.audioAPI.playSound(\"/sas/assets/263beb86\", false, 100);   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","parameters":[]},"playMotorIdle":{"body":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                           console.log(\"playMotorIdle\");\n                                            this.audioAPI.playSound(\"\", false, 100);   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","parameters":[]},"playMotorRunning":{"body":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                     //console.log(\"playMotorRunning\");\n                        // #1:\n                        //this.audioAPI.playSound(\"/sas/assets/2cb9fef9\", false, 100);\n                        // #2:\n                        //this.audioAPI.playSound(\"/sas/assets/994ee0c8\", false, 100);\n                        // #3:\n                        var sound = vwf.callMethod(this.id, \"getSound\", [\"/sas/assets/c253157d\"]);\n\n                        if (sound == null || !sound.isPlaying())\n                        {\n                            this.audioAPI.playSound(\"/sas/assets/c253157d\", false, 100);\n                        } \n\n\n\n\n\n\n\n\n\n\n","parameters":[]},"playMotorSputtering":{"body":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                           console.log(\"playMotorSputtering\");\n                                            this.audioAPI.playSound(\"\", false, 100);   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","parameters":[]},"playWarning":{"body":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                           console.log(\"playWarning\");\n                                            this.audioAPI.playSound(\"\", false, 100);   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","parameters":[]},"ready":{"body":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                                                                             // The scene is now completely loaded. This will fire on each client when the client joins, so it`s not a great place to create objects\n                                            this.Scene.unbind(\"keyDown\",this._kd);\n                                            this.Scene.unbind(\"keyUp\",this._ku);\n                                            var self = this;\n                                            this._kd = function(e,d){self._keyDown(e,d)};\n                                            this._ku = function(e,d){self._keyUp(e,d)};\n                                            this.Scene.bind(\"keyDown\",this._kd);\n                                            this.Scene.bind(\"keyUp\",this._ku);                                                     \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","parameters":[]},"tick":{"body":"\n\n\n\n\n\n\n       // Broadcast position to nearby peers\n          var my_position = this.transformAPI.getWorldPosition();\n          this.broadcast(\"facPeerPosition\", [my_position,this.id], 50)\n\n          var waterDepth = 20;\n          var hullThick = 2.2;\n          var depthFloor = waterDepth + hullThick;\n          // The tick function is called 20 times every second.\n          // Write code here to animate over time\n          this.physicsAPI.addForceAtCenter(0, 0, 9.8);\n          this.physicsAPI.wake();\n          var mass = this.physicsAPI.getMass();\n          var corners = [\n              [this._length / 2, this.width / 2, 0],\n              [this._length / 2, -this.width / 2, 0],\n              [-this._length / 2, this.width / 2, 0],\n              [-this._length / 2, -this.width / 2, 0],\n          ];\n\n          this.counter++;\n          var rocking = -mass / 5;\n          this.physicsAPI.addForceOffset([0, 0, rocking], [Math.sin(this.counter / 30) * this._length, Math.cos(this.counter / 15) * this.width, 0]);\n          this.physicsAPI.addForceOffset([0, 0, rocking], [Math.cos(this.counter / 10) * this._length, Math.sin(this.counter / 10) * this.width, 0]);\n\n          for (var i = 0; i < corners.length; i++)\n          {\n              var corner = corners[i];\n              var worldCorner = this.transformAPI.localToGlobal(corner);\n              var depth = depthFloor - worldCorner[2];\n              depth = Math.min(depth, 5);\n              if (depth > 0)\n              {\n\n                  this.physicsAPI.addForceOffset([0, 0, depth * mass * 9.8 / 3], Vec3.subtract(worldCorner, this.transformAPI.getPosition(), []));\n                  var vel = this.physicsAPI.getLinearVelocity();\n                  var torque = this.physicsAPI.getAngularVelocity();\n                  //    vel[0] *= .6;\n                  // vel[1] *= .6;\n                  vel[2] *= 1 - depth / 50;\n\n                  torque[0] *= 1 - depth / 100;\n                  torque[1] *= 1 - depth / 100;\n                  torque[2] *= 1 - depth / 100;\n                  this.physicsAPI.setAngularVelocity(torque);\n                  this.physicsAPI.setLinearVelocity(vel);\n              }\n              //  if (depth < 0)\n              {\n\n                  this.physicsAPI.addForceOffset([0, 0, -mass * 9.8 / 4], Vec3.subtract(worldCorner, this.transformAPI.getPosition(), []));\n                  var vel = this.physicsAPI.getLinearVelocity();\n                  var torque = this.physicsAPI.getAngularVelocity();\n              }\n\n          }\n\n          var depth = depthFloor - this.transformAPI.getPosition()[2]\n          depth = Math.min(depth, 5);\n          if (depth > 0)\n          {\n\n              var vel = this.physicsAPI.getLinearVelocity();\n              vel = this.transformAPI.globalToLocalRotation(vel);\n              vel[0] *= 1.0 - depth / 100;\n              vel[1] *= 1.0 - depth / 30;\n              vel = this.transformAPI.localToGlobalRotation(vel);\n              this.physicsAPI.setLinearVelocity(vel);\n\n          }\n\n          if (this._keysDown.indexOf(\"W\") !== -1)\n          {\n              this.consumeFuel();\n              if (this.currentState.name === this.states[\"out_of_gas\"].name)\n              {\n                  console.log(\"(W) out of gas!\");\n                  this.activateState(\"out_of_gas\");\n              }\n              else\n              {\n                  var force = this.transformAPI.localToGlobal(-10 * mass, 0, 0);\n                  this.physicsAPI.addForceAtCenter(force[0], force[1], force[2]);\n                  this.playMotorRunning();\n                  switch (this.FACMovementDirection())\n                  {\n                      case \"approaching\":\n                          this.activateState(\"approaching\");\n                          break;\n                      case \"idle\":\n                          this.activateState(\"idle\");\n                          break;\n                      case \"moving_away\":\n                          this.activateState(\"moving_away\");\n                          break;\n                  }\n              }\n          }\n          if (this._keysDown.indexOf(\"S\") !== -1)\n          {\n              this.consumeFuel();\n              if (this.currentState.name === this.states[\"out_of_gas\"].name)\n              {\n                  console.log(\"(S) out of gas!\");\n                  this.activateState(\"out_of_gas\");\n              }\n              else\n              {\n                  var force = this.transformAPI.localToGlobal(10 * mass, 0, 0);\n                  this.physicsAPI.addForceAtCenter(force[0], force[1], force[2]);\n                  this.playMotorRunning();\n                  switch (this.FACMovementDirection())\n                  {\n                      case \"approaching\":\n                          this.activateState(\"approaching\");\n                          break;\n                      case \"idle\":\n                          this.activateState(\"idle\");\n                          break;\n                      case \"moving_away\":\n                          this.activateState(\"moving_away\");\n                          break;\n                  }\n              }\n          }\n          var vel = this.physicsAPI.getLinearVelocity();\n          vel = this.transformAPI.globalToLocalRotation(vel);\n          var speedTorqueFactor = (Math.abs(vel[0]) / 3);\n          if (this._keysDown.indexOf(\"A\") !== -1)\n          {\n\n              this.physicsAPI.addTorque(0, 0, speedTorqueFactor * mass * 3);\n              var force = this.transformAPI.localToGlobal(speedTorqueFactor * mass, 0, 0);\n              this.physicsAPI.addTorque(force);\n          }\n          if (this._keysDown.indexOf(\"D\") !== -1)\n          {\n              this.physicsAPI.addTorque(0, 0, -speedTorqueFactor * mass * 3);\n              var force = this.transformAPI.localToGlobal(-speedTorqueFactor * mass, 0, 0);\n              this.physicsAPI.addTorque(force);\n          }\n          if (this._keysDown.indexOf(\" \") !== -1)\n          {\n              if (this.rockets > 0)\n              {\n                  this.currentState = this.states[\"fire_rocket\"];\n              }\n              else\n              {\n                  this.currentState = this.states[\"moving_away\"];\n              }\n          } \n\n\n\n","parameters":[]},"verifyCamera":{"body":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                              var cam = this.Scene.clientAPI.getCameraForClient(vwf.client());\n\n                                            if (!cam || cam.id != this.controllingCamera) return false;\n                                            return true;      \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","parameters":[]}},"properties":{"DisplayName":"FAC_SLAVE5","EditorData":{"_controllingCamera":{"displayname":"Controlling Camera","property":"controllingCamera","type":"nodeid"},"bullets_50_cal":{"displayname":"Bullets (50 cal)","max":100000,"min":1,"property":"bullets_50_cal","type":"slider"},"fuel":{"displayname":"Fuel","max":1000,"min":1,"property":"fuel","type":"slider"},"fuelConsumptionRate":{"displayname":"Fuel Consumption Rate","max":1,"min":0,"property":"fuelConsumptionRate","step":0.01,"type":"slider"},"health":{"displayname":"Health","max":1000,"min":1,"property":"health","type":"slider"},"hostile":{"displayname":"Hostile","property":"hostile","type":"check"},"hullStrength":{"displayname":"Hull Strength","max":1000,"min":1,"property":"hullStrength","type":"slider"},"rangeToTarget":{"displayname":"Range to Target","max":5000,"min":0,"property":"rangeToTarget","step":100,"type":"slider"},"rockets":{"displayname":"Rockets","max":25,"min":0,"property":"rockets","type":"slider"}},"___physics_activation_state":4,"___physics_angular_velocity":[-0.0205620388669852,0.137373529226051,0.000692897715996474],"___physics_damping":0.4,"___physics_deactivation_time":0,"___physics_enabled":true,"___physics_linear_velocity":[-0.115731220145219,0.602527779520543,-0.000487978426872444],"___physics_mass":8051.2,"___physics_velocity_angular":[0.02765009179711342,-0.1445750892162323,0.00038580354885198176],"___physics_velocity_linear":[-0.01912243291735649,0.10449027270078659,-0.0032515337225049734],"___sourceAssetTimestamp":"Wed Sep 30 2015 19:39:51 GMT-0400 (Eastern Daylight Time)","_keysDown":[],"_length":7,"activeState":"active","bullets_50_cal":1000,"controllingCamera":"SandboxCamera-vwf-N373ec60b","counter":14602,"currentState":null,"editorData":{"controllingCamera":{"displayName":"controllingCamera","type":"nodeID"}},"explosionDef":{"continues":"/sas/assets/d3402bc3","properties":{"transform":[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]}},"fuel":100,"fuelConsumptionRate":0.01,"health":100,"height":1.2,"hostile":true,"hullStrength":100,"materialDef":{"alpha":1,"ambient":{"b":1,"g":1,"r":1},"blendMode":1,"color":{"a":1,"b":1,"g":1,"r":1},"depthtest":true,"depthwrite":true,"emit":{"b":0,"g":0,"r":0},"fog":true,"layers":[{"alpha":1,"blendMode":0,"mapInput":0,"mapTo":1,"offsetx":0,"offsety":0,"rot":0,"scalex":1,"scaley":1,"src":"checker.jpg"}],"metal":false,"reflect":0.8,"shadeless":false,"shading":true,"shadow":true,"shininess":15,"side":0,"specularColor":{"b":0.57735,"g":0.57735,"r":0.57735},"specularLevel":1,"type":"phong","vertexColors":false,"wireframe":false},"missileDef":{"continues":"/sas/assets/d62299d5","properties":{"transform":[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]}},"owner":"ADLteam","physicsAPI":{},"rangeToTarget":1000,"rockets":5,"sourceAssetId":"f997b70e","states":{"approaching":{"name":"approaching","properties":{},"transitionFunction":"approachingTransition","transitions":["approaching","moving_away","idle","out_of_gas","fire_rocket","colliding","defeated"],"updateFunction":"approachingUpdate"},"colliding":{"name":"colliding","properties":{},"transitionFunction":"collidingTransition","transitions":["colliding","defeated"],"updateFunction":"collidingUpdate"},"defeated":{"name":"defeated","properties":{},"transitionFunction":"defeatedTransition","transitions":["defeated"],"updateFunction":"defeatedUpdate"},"fire_rocket":{"name":"fire_rocket","properties":{},"transitionFunction":"fire_rocketTransition","transitions":["approaching","fire_rocket","moving_away","idle","colliding","defeated"],"updateFunction":"fire_rocketUpdate"},"idle":{"name":"idle","properties":{},"transitionFunction":"idleTransition","transitions":["moving_away","idle","out_of_gas","colliding","defeated"],"updateFunction":"idleUpdate"},"moving_away":{"name":"moving_away","properties":{},"transitionFunction":"moving_awayTransition","transitions":["moving_away","idle","out_of_gas","colliding","defeated"],"updateFunction":"moving_awayUpdate"},"out_of_gas":{"name":"out_of_gas","properties":{},"transitionFunction":"out_of_gasTransition","transitions":["out_of_gas","colliding","defeated"],"updateFunction":"out_of_gasUpdate"}},"transform":[-0.999123215675354,-0.041426870971918106,0.006052142009139061,0,0.04162561520934105,-0.9984263181686401,0.03757866099476814,0,0.0044858502224087715,0.037797633558511734,0.9992753267288208,0,17.65945053100586,-197.65367126464844,20.82618522644043,1],"type":"Primitive","visible":false,"warningsReceived":0,"width":2.5,"worldTransform":[-0.999123215675354,-0.041426870971918106,0.006052142009139061,0,0.04162561520934105,-0.9984263181686401,0.03757866099476814,0,0.0044858502224087715,0.037797633558511734,0.9992753267288208,0,17.65945053100586,-197.65367126464844,20.82618522644043,1]},"random":{"c":1,"s0":0.134394,"s1":0.921757,"s2":0.045269},"sequence":0,"source":"vwf/model/threejs/box.js","type":"subDriver/threejs","name":"N320ba792"},{"children":{"N64a7edaa":{"events":{"pointerClick":{"body":"this.parent.launchMissile();","parameters":["eventData","nodeData"]}},"extends":"box2.vwf","properties":{"DisplayName":"MissileLauncher","___assetServerOriginalID":"N8c4837dd","___physics_activation_state":1,"___physics_deactivation_time":0,"___physics_velocity_angular":[0,0,0],"___physics_velocity_linear":[0,0,0],"height":1.61,"materialDef":{"alpha":1,"ambient":{"b":1,"g":1,"r":1},"blendMode":1,"color":{"a":1,"b":1,"g":1,"r":1},"depthtest":true,"depthwrite":true,"emit":{"b":0,"g":0,"r":0},"fog":true,"layers":[{"alpha":1,"blendMode":0,"mapInput":0,"mapTo":1,"offsetx":0,"offsety":0,"rot":0,"scalex":1,"scaley":1,"src":"checker.jpg"}],"metal":false,"reflect":0.8,"shadeless":false,"shading":true,"shadow":true,"shininess":15,"side":0,"specularColor":{"b":0.57735,"g":0.57735,"r":0.57735},"specularLevel":1,"type":"phong","vertexColors":false,"wireframe":false},"owner":"ADLteam","transform":[0.24060429632663727,-0.021820155903697014,0.9703761339187622,0,0.0010019970359280705,-0.9997419714927673,-0.022729994729161263,0,0.9706209301948547,0.006441246252506971,-0.24052102863788605,0,1.000000238418579,0.000001158783902610594,1.4999992847442627,1],"type":"Primitive","visible":false,"width":1.36,"worldTransform":[-0.24105823040008545,0.021973038092255592,0.9692293405532837,0,-0.13998930156230927,0.9874883890151978,-0.0572049580514431,0,-0.9593181610107422,-0.14962099492549896,-0.23520208895206451,0,-80.06534576416016,-283.5050048828125,22.328624725341797,1]},"random":{"c":1,"s0":0.778299,"s1":0.286493,"s2":0.191579},"sequence":0,"source":"vwf/model/threejs/box.js","type":"subDriver/threejs","name":"N64a7edaa"},"N845253ef":{"extends":"http://vwf.example.com/node3.vwf","properties":{"DisplayName":"enginePos","___assetServerOriginalID":"N8cf5a8e2","glyphURL":"../vwf/view/editorview/images/icons/sphere.png","owner":"ADLteam","transform":[1,0,0,0,0,1,0,0,-9.999999974752427e-7,0,1,0,3,0,-0.75,1],"transformAPI":{"COORDINATES":{"GLOBAL":"global","LOCAL":"local","PARENT":"parent"}},"worldTransform":[-0.9892777800559998,-0.1389492303133011,0.0048522138968110085,0,0.13903392851352692,-0.9886751770973206,0.034525297582149506,0,9.892777370623662e-7,0.03486473485827446,0.9983914494514465,0,-82.04389953613281,-283.8613586425781,20.091947555541992,1]},"random":{"c":1,"s0":0.022454,"s1":0.002702,"s2":0.55584},"sequence":0,"name":"N845253ef"},"N8f1969d5":{"extends":"box2.vwf","properties":{"DisplayName":"box7","___assetServerOriginalID":"N83e3ec00","___physics_activation_state":1,"___physics_deactivation_time":0,"___physics_velocity_angular":[0,0,0],"___physics_velocity_linear":[0,0,0],"_length":3.45,"castShadows":false,"height":0.18,"materialDef":{"alpha":0,"ambient":{"b":1,"g":1,"r":1},"blendMode":1,"color":{"a":0,"b":1,"g":1,"r":1},"depthtest":true,"depthwrite":true,"emit":{"b":0,"g":0,"r":0},"fog":true,"layers":[],"metal":false,"reflect":0.8,"shadeless":false,"shading":true,"shadow":true,"shininess":15,"side":0,"specularColor":{"b":0.577350269189626,"g":0.577350269189626,"r":0.577350269189626},"specularLevel":1,"type":"phong","vertexColors":false,"wireframe":false},"owner":"ADLteam","renderDepth":7,"transform":[1,0,9.999999974752427e-7,0,0,1,0,0,0,0,1,0,1,0,-0.2499990016222,1],"type":"Primitive","width":2.18},"random":{"c":1,"s0":0.198099663946778,"s1":0.0275812551844865,"s2":0.352169041289017},"sequence":0,"source":"vwf/model/threejs/box.js","type":"subDriver/threejs","name":"N8f1969d5"},"Nb6bc2e2a":{"extends":"asset.vwf","properties":{"DisplayName":"./vwfdatamanager.svc/DataFile/Navy/AttackSpeedBoat.dae1","___assetServerOriginalID":"N958e2662","___physics_activation_state":1,"___physics_deactivation_time":0,"___physics_velocity_angular":[0,0,0],"___physics_velocity_linear":[0,0,0],"materialDef":{"alpha":1,"ambient":{"b":0.584,"g":0.584,"r":0.584},"color":{"b":1,"g":1,"r":1},"emit":{"b":0,"g":0,"r":0},"layers":[{"alpha":1,"mapInput":0,"mapTo":1,"offsetx":0,"offsety":0,"scalex":1,"scaley":1,"src":"/sas/assets/7e6084c4"}],"reflect":0.001,"shininess":0.004002,"side":0,"specularColor":{"b":0,"g":0,"r":0},"specularLevel":1,"type":"phong","blendMode":1,"fog":true,"shading":true,"metal":false,"wireframe":false,"depthtest":true,"depthwrite":true,"vertexColors":false},"owner":"ADLteam","transform":[-9.999999974752427e-7,1,-9.999999974752427e-7,0,-1.0000009536743164,-9.999999974752427e-7,-9.999999974752427e-7,0,-9.999999974752427e-7,0,1,0,0.5,0,-0.5,1]},"random":{"c":1,"s0":0.375302,"s1":0.872168,"s2":0.110384},"sequence":0,"source":"/sas/assets/c1064312","type":"subDriver/threejs/asset/vnd.collada+xml","name":"Nb6bc2e2a"}},"extends":"box2.vwf","methods":{"FACMovementDirection":{"body":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                // set equal to \"\" after adding calculations:\n                                var movement = \"closing\";\n                                // Perform calculations to determine approaching or moving away states:\n                                //     movement = \"closing\" if distance to target is getting smaller\n                                //     movement = \"none\" if distance to target hasn't changed\n                                //     movement = \"increasing\" if distance to target is getting larger\n                                switch (movement)\n                                {\n                                    case \"closing\":\n                                        this.currentState = this.states[\"approaching\"];\n                                        return \"approaching\";\n                                    case \"none\":\n                                        this.currentState = this.states[\"idle\"];\n                                        return \"idle\";\n                                    case \"increasing\":\n                                        this.currentState = this.states[\"moving_away\"];\n                                        return \"moving_away\";\n                                }    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","parameters":[]},"_keyDown":{"body":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                if (!this.verifyCamera()) return;\n                                if (this.currentState === null)\n                                {\n                                    console.log(\"Set initial state\");\n                                    this.currentState = this.states[\"approaching\"];\n                                }\n                                if (this._keysDown.indexOf(e.key.char) == -1)\n                                {\n                                    this._keysDown.push(e.key.char);\n                                }    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","parameters":["e","d"]},"_keyUp":{"body":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                if (!this.verifyCamera()) return;\n                                if (this._keysDown.indexOf(e.key.char) !== -1)\n                                {\n                                    this._keysDown.splice(this._keysDown.indexOf(e.key.char), 1);\n                                }\n                                if (e.key.char == \" \")\n                                {\n                                    if (this.rockets > 0)\n                                    {\n                                        this.activateState(\"fire_rocket\");\n                                        console.log(\"rockets: \" + this.rockets);\n                                    }\n                                }    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","parameters":["e","d"]},"activateState":{"body":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                //console.log(\"activateState\");\n                                var state = this.states[statename];\n\n                                if (this.currentState.transitions.indexOf(statename) == -1)\n                                {\n                                    console.log(\"invalid transition!\");\n                                    return;\n                                }\n\n                                if (state.transitionFunction)\n                                    this[state.transitionFunction](this.currentState);\n\n                                this.currentState = state;\n\n                                for (var i in state.properties)\n                                {\n                                    console.log(state.properties[i]);\n                                    this[i] = state.properties[i];\n                                }    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","parameters":["statename"]},"approachingTransition":{"body":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                console.log(\"approachingTransition\");\n                                this.approachingUpdate(this.currentState);    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","parameters":[]},"approachingUpdate":{"body":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                console.log(\"approachingUpdate\");\n                                this.currentState = this.states[\"approaching\"];    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","parameters":["statename"]},"collidingTransition":{"body":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                console.log(\"collidingTransition\");\n                                this.currentState = this.states[\"colliding\"];    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","parameters":[]},"collidingUpdate":{"body":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                console.log(\"collidingUpdate\");\n                                this.currentState = this.states[\"colliding\"];    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","parameters":["statename"]},"consumeFuel":{"body":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                if (this.fuel <= 0.0)\n                                {\n                                    this.currentState = this.states[\"out_of_gas\"];\n                                }\n                                else\n                                {\n                                    this.fuel = this.fuel - this.fuelConsumptionRate;\n                                    console.log(\"fuel: \" + this.fuel);\n                                }    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","parameters":[]},"defeatedTransition":{"body":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                console.log(\"defeatedTransition\");\n                                this.currentState = this.states[\"defeated\"];    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","parameters":[]},"defeatedUpdate":{"body":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                console.log(\"defeatedUpdate\");\n                                this.currentState = this.states[\"defeated\"];    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","parameters":["statename"]},"fire_rocketTransition":{"body":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                console.log(\"fire_rocketTransition\");\n                                this.fire_rocketUpdate(this.currentState);    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","parameters":[]},"fire_rocketUpdate":{"body":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                console.log(\"fire_rocketUpdate\");\n                                this.launchMissile();\n                                this.playMissileLaunch();\n                                this.rockets = this.rockets - 1;\n                                if (this.rockets > 0)\n                                {\n                                    this.currentState = this.states[\"fire_rocket\"];\n                                    console.log(\"rocketUpdate state fire \");\n                                }\n                                else\n                                {\n                                    this.currentState = this.states[\"idle\"];\n                                    console.log(\"rocketUpdate state idle\");\n                                }    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","parameters":["statename"]},"hit":{"body":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                             var pos = args[0];\n                                var force = args[1];\n                                if (typeof force == 'number')\n                                    this.health -= force;\n                                else\n                                    this.health -= 101;\n\n                                if (this.health < 0)\n                                {\n                                    var def = this.explosionDef;\n                                    var pos = this.transformAPI.getWorldPosition();\n                                    def.properties.transform[12] = pos[0];\n                                    def.properties.transform[13] = pos[1];\n                                    def.properties.transform[14] = pos[2];\n                                    def.properties.fuse = 1;\n                                    vwf.createChild(vwf.application(), GUID(), _DataManager.getCleanNodePrototype(def), null);\n                                    this.parent.children.delete(this);\n                                } \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","parameters":["args"]},"idleTransition":{"body":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                               console.log(\"idleTransition\");\n                                this.currentState = this.states[\"idle\"];   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","parameters":[]},"idleUpdate":{"body":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                               console.log(\"idleUpdate\");\n                                this.currentState = this.states[\"idle\"];   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","parameters":["statename"]},"launchMissile":{"body":"var def = this.missileDef;\n    var pos = this.children_by_name.MissileLauncher.worldTransform.slice();\n\n    pos[14] += 0;\n    def.properties.transform = pos;\n    // def.properties.___physics_velocity_linear = this.physicsAPI.getLinearVelocity();\n    def.properties.fired = true;\n    var now = performance.now();\n    // console.profile(\"launch\");\n    var smokeDef = this.smokeDef;\n    vwf.createChild(vwf.application(), GUID(), _DataManager.getCleanNodePrototype(def), null, function(id)\n    {\n        smokeDef.properties.targetEntity = id;\n        vwf.createChild(vwf.application(), GUID(), _DataManager.getCleanNodePrototype(smokeDef), null, function()\n        {\n            console.log(performance.now() - now);\n        });\n    });","parameters":[]},"moving_awayTransition":{"body":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                               console.log(\"moving_awayTransition\");\n                                this.moving_awayUpdate(this.currentState);   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","parameters":[]},"moving_awayUpdate":{"body":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                               console.log(\"moving_awayUpdate\");\n                                this.currentState = this.states[\"moving_away\"];   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","parameters":["statename"]},"out_of_gasTransition":{"body":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                               console.log(\"out_of_gasTransition\");\n                                //this.currentState = this.states[\"out_of_gas\"];\n                                this.out_of_gasUpdate(this.currentState);   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","parameters":[]},"out_of_gasUpdate":{"body":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                               console.log(\"out_of_gasUpdate\");\n                                console.log(statename);\n                                if (this.fuel <= 0)\n                                {\n                                    this.currentState = this.states[\"out_of_gas\"];\n                                    console.log(\"out_of_gasUpdate now out_of_gas state\");\n                                }\n                                else if (this.hullStrength <= 0)\n                                {\n                                    this.currentState = this.states[\"defeated\"];\n                                    console.log(\"out_of_gasUpdate now defaeted state\");\n                                }   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","parameters":["statename"]},"playBulletHittingMetal":{"body":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                               console.log(\"playBulletHittingMetal\");\n                                this.audioAPI.playSound(\"\", false, 100);   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","parameters":[]},"playBulletHittingWater":{"body":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                               console.log(\"playBulletHittingWater\");\n                                this.audioAPI.playSound(\"\", false, 100);   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","parameters":[]},"playBulletWhizzingBy":{"body":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                               console.log(\"playBulletWhizzingBy\");\n                                this.audioAPI.playSound(\"\", false, 100);   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","parameters":[]},"playExplosion":{"body":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                               console.log(\"playExplosion\");\n                                // #1:\n                                //this.audioAPI.playSound(\"/sas/assets/8d358349\", false, 100);\n                                // #2:\n                                //this.audioAPI.playSound(\"/sas/assets/d714ebe1\", false, 100);\n                                // #3:\n                                this.audioAPI.playSound(\"/sas/assets/3c6b353e\", false, 100);   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","parameters":[]},"playHelicopter":{"body":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                               //console.log(\"playHelicopter\");\n                                // #1:\n                                //this.audioAPI.playSound(\"/sas/assets/af90534a\", false, 100);\n                                //#2:\n                                this.audioAPI.playSound(\"/sas/assets/dc81768a\", false, 100);   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","parameters":[]},"playMissileLaunch":{"body":"console.log(\"playMissileLaunch\");\n    // #1:\n    //this.audioAPI.playSound(\"/sas/assets/744acf2e\", false, 100);\n    // #2:\n    //this.audioAPI.playSound(\"/sas/assets/4334801b\", false, 100);\n    // #3:\n    //this.audioAPI.playSound(\"/sas/assets/10b027bd\", false, 100);\n    // #4:\n    //this.audioAPI.playSound(\"/sas/assets/94d508e3\", false, 100);\n    // #5:\n    this.audioAPI.playSound(\"/sas/assets/263beb86\", false, 100);\n    this.xAPISend(\"Fired Missile\");","parameters":[]},"playMotorIdle":{"body":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                               console.log(\"playMotorIdle\");\n                                this.audioAPI.playSound(\"\", false, 100);   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","parameters":[]},"playMotorRunning":{"body":"\n\n\n\n\n\n\n       //console.log(\"playMotorRunning\");\n          // #1:\n          //this.audioAPI.playSound(\"/sas/assets/2cb9fef9\", false, 100);\n          // #2:\n          //this.audioAPI.playSound(\"/sas/assets/994ee0c8\", false, 100);\n          // #3:\n          var sound = vwf.callMethod(this.id, \"getSound\", [\"/sas/assets/c253157d\"]);\n\n          if (sound == null || !sound.isPlaying())\n          {\n              this.audioAPI.playSound(\"/sas/assets/c253157d\", false, 100);\n          } \n\n\n\n","parameters":[]},"playMotorSputtering":{"body":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                               console.log(\"playMotorSputtering\");\n                                this.audioAPI.playSound(\"\", false, 100);   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","parameters":[]},"playWarning":{"body":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                               console.log(\"playWarning\");\n                                this.audioAPI.playSound(\"\", false, 100);   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","parameters":[]},"ready":{"body":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                                                                 // The scene is now completely loaded. This will fire on each client when the client joins, so it`s not a great place to create objects\n                                this.Scene.unbind(\"keyDown\",this._kd);\n                                this.Scene.unbind(\"keyUp\",this._ku);\n                                var self = this;\n                                this._kd = function(e,d){self._keyDown(e,d)};\n                                this._ku = function(e,d){self._keyUp(e,d)};\n                                this.Scene.bind(\"keyDown\",this._kd);\n                                this.Scene.bind(\"keyUp\",this._ku);                                                     \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","parameters":[]},"tick":{"body":"\n var leader_pos = this.transformAPI.getWorldPosition();\n    this.broadcast(\"facFollowBehavior\", leader_pos, 500);\n    this.broadcast(\"facPeerPosition\", leader_pos, 30);\n\n    var waterDepth = 20;\n    var hullThick = 2.2;\n    var depthFloor = waterDepth + hullThick;\n    // The tick function is called 20 times every second.\n    // Write code here to animate over time\n    this.physicsAPI.addForceAtCenter(0, 0, 9.8);\n    this.physicsAPI.wake();\n    var mass = this.physicsAPI.getMass();\n    var corners = [\n        [this._length / 2, this.width / 2, 0],\n        [this._length / 2, -this.width / 2, 0],\n        [-this._length / 2, this.width / 2, 0],\n        [-this._length / 2, -this.width / 2, 0],\n    ];\n\n    this.counter++;\n    var rocking = -mass / 5;\n    this.physicsAPI.addForceOffset([0, 0, rocking], [Math.sin(this.counter / 30) * this._length, Math.cos(this.counter / 15) * this.width, 0]);\n    this.physicsAPI.addForceOffset([0, 0, rocking], [Math.cos(this.counter / 10) * this._length, Math.sin(this.counter / 10) * this.width, 0]);\n\n    for (var i = 0; i < corners.length; i++)\n    {\n        var corner = corners[i];\n        var worldCorner = this.transformAPI.localToGlobal(corner);\n        var depth = depthFloor - worldCorner[2];\n        depth = Math.min(depth, 5);\n        if (depth > 0)\n        {\n\n            this.physicsAPI.addForceOffset([0, 0, depth * mass * 9.8 / 3], Vec3.subtract(worldCorner, this.transformAPI.getPosition(), []));\n            var vel = this.physicsAPI.getLinearVelocity();\n            var torque = this.physicsAPI.getAngularVelocity();\n            //    vel[0] *= .6;\n            // vel[1] *= .6;\n            vel[2] *= 1 - depth / 50;\n\n            torque[0] *= 1 - depth / 100;\n            torque[1] *= 1 - depth / 100;\n            torque[2] *= 1 - depth / 100;\n            this.physicsAPI.setAngularVelocity(torque);\n            this.physicsAPI.setLinearVelocity(vel);\n        }\n        //  if (depth < 0)\n        {\n\n            this.physicsAPI.addForceOffset([0, 0, -mass * 9.8 / 4], Vec3.subtract(worldCorner, this.transformAPI.getPosition(), []));\n            var vel = this.physicsAPI.getLinearVelocity();\n            var torque = this.physicsAPI.getAngularVelocity();\n        }\n\n    }\n\n    var depth = depthFloor - this.transformAPI.getPosition()[2]\n    depth = Math.min(depth, 5);\n    if (depth > 0)\n    {\n\n        var vel = this.physicsAPI.getLinearVelocity();\n        vel = this.transformAPI.globalToLocalRotation(vel);\n        vel[0] *= 1.0 - depth / 100;\n        vel[1] *= 1.0 - depth / 30;\n        vel = this.transformAPI.localToGlobalRotation(vel);\n        this.physicsAPI.setLinearVelocity(vel);\n\n    }\n\n    if (this._keysDown.indexOf(\"W\") !== -1)\n    {\n        this.consumeFuel();\n        if (this.currentState.name === this.states[\"out_of_gas\"].name)\n        {\n            console.log(\"(W) out of gas!\");\n            this.activateState(\"out_of_gas\");\n        }\n        else\n        {\n            var force = this.transformAPI.localToGlobal(-10 * mass, 0, 0);\n            this.physicsAPI.addForceAtCenter(force[0], force[1], force[2]);\n            this.playMotorRunning();\n            switch (this.FACMovementDirection())\n            {\n                case \"approaching\":\n                    this.activateState(\"approaching\");\n                    break;\n                case \"idle\":\n                    this.activateState(\"idle\");\n                    break;\n                case \"moving_away\":\n                    this.activateState(\"moving_away\");\n                    break;\n            }\n        }\n    }\n    if (this._keysDown.indexOf(\"S\") !== -1)\n    {\n        this.consumeFuel();\n        if (this.currentState.name === this.states[\"out_of_gas\"].name)\n        {\n            console.log(\"(S) out of gas!\");\n            this.activateState(\"out_of_gas\");\n        }\n        else\n        {\n            var force = this.transformAPI.localToGlobal(10 * mass, 0, 0);\n            this.physicsAPI.addForceAtCenter(force[0], force[1], force[2]);\n            this.playMotorRunning();\n            switch (this.FACMovementDirection())\n            {\n                case \"approaching\":\n                    this.activateState(\"approaching\");\n                    break;\n                case \"idle\":\n                    this.activateState(\"idle\");\n                    break;\n                case \"moving_away\":\n                    this.activateState(\"moving_away\");\n                    break;\n            }\n        }\n    }\n    var vel = this.physicsAPI.getLinearVelocity();\n    vel = this.transformAPI.globalToLocalRotation(vel);\n    var speedTorqueFactor = (Math.abs(vel[0]) / 3);\n    if (this._keysDown.indexOf(\"A\") !== -1)\n    {\n\n        this.physicsAPI.addTorque(0, 0, speedTorqueFactor * mass * 3);\n        var force = this.transformAPI.localToGlobal(speedTorqueFactor * mass, 0, 0);\n        this.physicsAPI.addTorque(force);\n    }\n    if (this._keysDown.indexOf(\"D\") !== -1)\n    {\n        this.physicsAPI.addTorque(0, 0, -speedTorqueFactor * mass * 3);\n        var force = this.transformAPI.localToGlobal(-speedTorqueFactor * mass, 0, 0);\n        this.physicsAPI.addTorque(force);\n    }\n    if (this._keysDown.indexOf(\" \") !== -1)\n    {\n        if (this.rockets > 0)\n        {\n            this.currentState = this.states[\"fire_rocket\"];\n        }\n        else\n        {\n            this.currentState = this.states[\"moving_away\"];\n        }\n    } \n","parameters":[]},"verifyCamera":{"body":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                     return true;\n\n                        var cam = this.Scene.clientAPI.getCameraForClient(vwf.client());\n\n                        if (!cam || cam.id != this.controllingCamera) return false;\n                        return true; \n\n\n\n\n\n\n\n\n\n\n","parameters":[]},"xAPISend":{"body":"console.log(\"FAC Missile Launcher xAPI Send\");\n\n    //1 - Registration for the run of this game\n    if (!this.Scene.attempt)\n    {\n        this.Scene.attempt = ADL.ruuid();\n    }\n\n    //2 - Wrapper setup\n    var conf = {\n        \"endpoint\": \"https://lrs.adlnet.gov/xapi/\",\n        \"auth\": \"Basic \" + toBase64('iitsecDemo:1234'),\n    };\n    this.Scene.___xAPI.configure(conf);\n    // this.Scene.xAPI.configure(conf);\n\n    //3 - Who is playing\n    //Change string after actor.name field to role player is assuming\n    var actor = {\n        account:\n        {\n            name: _UserManager.GetCurrentUserName() + '/Fast Attack Craft',\n            homePage: \"https://sandbox.adlnet.gov\",\n        },\n        name: _UserManager.GetCurrentUserName(),\n    };\n\n    //4 - Verb = did\n    //Double check to have the best verb - this can be passed in\n    var verb = ADL.verbs.responded;\n\n    //5 What happened and where\n    //title and description of world along with name of object\n    //Change definition.name string of action to be recorded\n    var object = {\n        id: window.location.toString() + \"#\" + this.id,\n        definition:\n        {\n            name:\n            {\n                \"en-US\": _DataManager.getInstanceData().title + \"/\" + this.DisplayName + \"/\" + str,\n            },\n            description:\n            {\n                \"en-US\": _DataManager.getInstanceData().description,\n            }\n        }\n    };\n\n    //6 - Additional context\n    var contextActivities = {\n        \"grouping\": [\n            {\n                \"id\": \"http://adlnet.gov/event/2015/iitsecdemo/dev/vw\"\n            }\n        ],\n        \"category\": [\n            {\n                \"id\": \"http:adlnet.gov/event/2015/iitsecdemo\"\n            }\n        ],\n        \"other\": [\n            {\n                \"id\": _DataManager.getCurrentApplication(),\n                definition:\n                {\n                    type: \"https://sandbox.adlnet.gov/world\"\n                }\n            }\n        ]\n    };\n\n    //7 - Result of the goals\n    var result = {\n        duration: \"PT\" + Math.floor(this.Scene.time) + \"S\"\n    };\n\n    //8 - Roll it all into one statement\n\n    var stmt = new ADL.XAPIStatement(actor, verb, object);\n    stmt.addParentActivity(new ADL.XAPIStatement.Activity(window.location.toString(), _DataManager.getInstanceData().title, _DataManager.getInstanceData.description));\n\n    stmt.context.contextActivities = contextActivities;\n    stmt.context.registration = this.Scene.attempt;\n    stmt.result = result;\n\n    this.Scene.___xAPI.sendStatement(null, stmt);\n    // this.Scene.xAPI.sendStatement(null, stmt);","parameters":["str"]}},"properties":{"DisplayName":"FAC_MASTER","EditorData":{"_controllingCamera":{"displayname":"Controlling Camera","property":"controllingCamera","type":"nodeid"},"bullets_50_cal":{"displayname":"Bullets (50 cal)","max":100000,"min":1,"property":"bullets_50_cal","type":"slider"},"fuel":{"displayname":"Fuel","max":1000,"min":1,"property":"fuel","type":"slider"},"fuelConsumptionRate":{"displayname":"Fuel Consumption Rate","max":1,"min":0,"property":"fuelConsumptionRate","step":0.01,"type":"slider"},"health":{"displayname":"Health","max":1000,"min":1,"property":"health","type":"slider"},"hostile":{"displayname":"Hostile","property":"hostile","type":"check"},"hullStrength":{"displayname":"Hull Strength","max":1000,"min":1,"property":"hullStrength","type":"slider"},"rangeToTarget":{"displayname":"Range to Target","max":5000,"min":0,"property":"rangeToTarget","step":100,"type":"slider"},"rockets":{"displayname":"Rockets","max":25,"min":0,"property":"rockets","type":"slider"}},"___physics_activation_state":4,"___physics_angular_velocity":[-0.0205620388669852,0.137373529226051,0.000692897715996474],"___physics_damping":0.4,"___physics_deactivation_time":0,"___physics_enabled":true,"___physics_linear_velocity":[-0.115731220145219,0.602527779520543,-0.000487978426872444],"___physics_mass":8051.2,"___physics_velocity_angular":[0.02765009179711342,-0.1445750892162323,0.00038580354885198176],"___physics_velocity_linear":[-0.01912243291735649,0.10449027270078659,-0.0032515337225049734],"___sourceAssetTimestamp":"Wed Sep 30 2015 19:39:43 GMT-0400 (Eastern Daylight Time)","_keysDown":[],"_length":7,"activeState":"active","bullets_50_cal":987,"controllingCamera":"SandboxCamera-vwf-N373ec60b","counter":14602,"currentState":null,"editorData":{"controllingCamera":{"displayName":"controllingCamera","type":"nodeID"}},"explosionDef":{"continues":"/sas/assets/d3402bc3","properties":{"transform":[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]}},"fuel":100,"fuelConsumptionRate":0.01,"health":100,"height":1.2,"hostile":true,"hullStrength":100,"materialDef":{"alpha":1,"ambient":{"b":1,"g":1,"r":1},"blendMode":1,"color":{"a":1,"b":1,"g":1,"r":1},"depthtest":true,"depthwrite":true,"emit":{"b":0,"g":0,"r":0},"fog":true,"layers":[{"alpha":1,"blendMode":0,"mapInput":0,"mapTo":1,"offsetx":0,"offsety":0,"rot":0,"scalex":1,"scaley":1,"src":"checker.jpg"}],"metal":false,"reflect":0.8,"shadeless":false,"shading":true,"shadow":true,"shininess":15,"side":0,"specularColor":{"b":0.57735,"g":0.57735,"r":0.57735},"specularLevel":1,"type":"phong","vertexColors":false,"wireframe":false},"missileDef":{"continues":"/sas/assets/73e8a4a3","properties":{"fired":true,"transform":[-0.241058230400085,0.0219730380922556,0.969229340553284,0,-0.139989301562309,0.987488389015198,-0.0572049580514431,0,-0.959318161010742,-0.149620994925499,-0.235202088952065,0,4.95079517364502,-1.64401972293854,1.5334906578064,1]}},"owner":"ADLteam","physicsAPI":{},"rangeToTarget":1000,"rockets":5,"smokeDef":{"continues":"/sas/assets/aeb3d1dd","properties":{"targetEntity":"-sas-assets-73e8a4a3-N8008a8f","transform":[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]}},"sourceAssetId":"1ad6adad","states":{"approaching":{"name":"approaching","properties":{},"transitionFunction":"approachingTransition","transitions":["approaching","moving_away","idle","out_of_gas","fire_rocket","colliding","defeated"],"updateFunction":"approachingUpdate"},"colliding":{"name":"colliding","properties":{},"transitionFunction":"collidingTransition","transitions":["colliding","defeated"],"updateFunction":"collidingUpdate"},"defeated":{"name":"defeated","properties":{},"transitionFunction":"defeatedTransition","transitions":["defeated"],"updateFunction":"defeatedUpdate"},"fire_rocket":{"name":"fire_rocket","properties":{},"transitionFunction":"fire_rocketTransition","transitions":["approaching","fire_rocket","moving_away","idle","colliding","defeated"],"updateFunction":"fire_rocketUpdate"},"idle":{"name":"idle","properties":{},"transitionFunction":"idleTransition","transitions":["moving_away","idle","out_of_gas","colliding","defeated"],"updateFunction":"idleUpdate"},"moving_away":{"name":"moving_away","properties":{},"transitionFunction":"moving_awayTransition","transitions":["moving_away","idle","out_of_gas","colliding","defeated"],"updateFunction":"moving_awayUpdate"},"out_of_gas":{"name":"out_of_gas","properties":{},"transitionFunction":"out_of_gasTransition","transitions":["out_of_gas","colliding","defeated"],"updateFunction":"out_of_gasUpdate"}},"transform":[-0.9892777800559998,-0.1389492303133011,0.0048522138968110085,0,0.13903392851352692,-0.9886751770973206,0.034525297582149506,0,0,0.03486459702253342,0.9983914494514465,0,-79.07606506347656,-283.4183654785156,20.82618522644043,1],"type":"Primitive","visible":false,"warningsReceived":0,"width":2.5,"worldTransform":[-0.9892777800559998,-0.1389492303133011,0.0048522138968110085,0,0.13903392851352692,-0.9886751770973206,0.034525297582149506,0,0,0.03486459702253342,0.9983914494514465,0,-79.07606506347656,-283.4183654785156,20.82618522644043,1]},"random":{"c":1,"s0":0.134394,"s1":0.921757,"s2":0.045269},"sequence":0,"source":"vwf/model/threejs/box.js","type":"subDriver/threejs","name":"N428ce34"},{"extends":"SandboxCamera.vwf","methods":{"tick":{"body":"var node = this.Scene.findNodeByID(this.objectToLookAt);\n    var pos = [0, 0, 0];\n    if (node)\n        pos = node.transformAPI.localToGlobal([0, 0, 0]);\n    var offset = this.offset;\n    offset = MATH.scaleVec3(offset, this.zoom);\n\n    this.transformAPI.lookat(pos, '', '-Y', 'Z');","parameters":[]}},"properties":{"DisplayName":"LookatCamera","EditorData":{"Target":{"displayname":"Target","property":"objectToLookAt","type":"nodeid"}},"___sourceAssetTimestamp":"Wed Sep 30 2015 18:52:50 GMT-0400 (Eastern Daylight Time)","last_x":0,"last_y":0,"mousedown":0,"objectToLookAt":"box2-vwf-N8c8d3473","offset":[1,0,0],"owner":"ADLteam","quaternion":[-0.168120741844177,0.0131280934438109,-0.0767349526286125,0.982687532901764],"rotation":[-0.90743362903595,0.0708590298891068,-0.414177775382996,21.3538246154785],"scale":[1.00000011920929,0.998998463153839,0.999000251293182],"transform":[0.109497092664242,-0.993987441062927,8.25816481864194e-9,0,0.888575553894043,0.097884975373745,-0.44592621922493,0,0.443245470523834,0.0488276779651642,0.893951892852783,0,20,39.75,147,1],"translation":[-4.97808504104614,-9.80616760253906,1.45953845977783],"zoom":1},"random":{"c":1,"s0":0.762165069347247,"s1":0.779216341907158,"s2":0.235236180946231},"sequence":0,"source":"vwf/model/threejs/camera.js","type":"subDriver/threejs","name":"N66f7fe5d"},{"children":{"N20569f3b":{"extends":"SandboxParticleSystem.vwf","methods":{"start":{"body":"\n\n\n\n\n\n\n\n\n                     this.transformAPI.setPosition(pos);\n            this.visible = true;\n            this.counter = 10;\n            var sound = Math.floor((Math.random() - .01) * 3);\n            if(sound > 0 && sound < 2)\n            this.audioAPI.playSound(this.soundFiles[sound], false, 30);             \n\n\n\n\n","parameters":["pos"]},"tick":{"body":"\n\n\n\n\n\n\n\n\n                                                                    // The tick function is called 20 times every second.\n            // Write code here to animate over time\n            this.visible = true;\n            if(this.counter < 0)\n            this.visible = false;\n            this.counter--;                                                            \n\n\n\n\n","parameters":[]}},"properties":{"DisplayName":"ParticleSystem4","___assetServerOriginalID":"Nb5bcb9f7","additive":false,"alphaTest":0.5,"colorRange":[0,0,0,0],"counter":-218,"depthTest":false,"emitterPosition":[0,0,3],"emitterSize":[0.2,0.2,1],"emitterType":"box","endColor":[0.698039215686274,0.976470588235294,1,0.5],"endSize":1,"image":"../vwfDataManager.svc/texture?UID=water.png","mamSpin":20,"maxAcceleration":[0,0,-9.82],"maxLifeTime":1,"maxOrientation":13.2,"maxRate":0,"maxVelocity":[0,0,0],"minAcceleration":[0,0,-9.82],"minLifeTime":1,"minOrientation":-19.5,"minSpin":1.1,"minVelocity":[0,0,0],"owner":"Anonymous_zgviOjtXorD5eSi9AAAA","particleCount":50,"sizeRange":0,"solver":"AnalyticShader","soundFiles":["/sas/assets/2cb9fef9","/sas/assets/994ee0c8","/sas/assets/68b679a8"],"startColor":[1,1,1,1],"startSize":0.1,"textureTiles":4,"transform":[0.367231965065002,0,0,0,0,0.367231965065002,0,0,0,0,0.367231965065002,0,23.2088038758212,11.911276477453,1.11022302462516e-16,1],"type":"ParticleSystem","velocityMode":"cartesian","visible":false},"random":{"c":414635,"s0":0.318485354771838,"s1":0.128272331960034,"s2":0.216222008166369},"sequence":0,"name":"N20569f3b"},"N616c830d":{"extends":"SandboxParticleSystem.vwf","methods":{"start":{"body":"\n\n\n\n\n\n\n\n\n                    this.transformAPI.setPosition(pos);\n            this.visible = true;\n            this.counter = 10;\n            var sound = Math.floor((Math.random() - .01) * 3);\n            if(sound > 0 && sound < 2)\n            this.audioAPI.playSound(this.soundFiles[sound], false, 30);            \n\n\n\n\n","parameters":["pos"]},"tick":{"body":"\n\n\n\n\n\n\n\n\n                                                                   // The tick function is called 20 times every second.\n            // Write code here to animate over time\n            this.visible = true;\n            if(this.counter < 0)\n            this.visible = false;\n            this.counter--;                                                           \n\n\n\n\n","parameters":[]}},"properties":{"DisplayName":"ParticleSystem3","___assetServerOriginalID":"N6ea9f140","additive":false,"alphaTest":0.5,"colorRange":[0,0,0,0],"counter":-236,"depthTest":false,"emitterPosition":[0,0,3],"emitterSize":[0.2,0.2,1],"emitterType":"box","endColor":[0.698039215686274,0.976470588235294,1,0.5],"endSize":1,"image":"../vwfDataManager.svc/texture?UID=water.png","mamSpin":20,"maxAcceleration":[0,0,-9.82],"maxLifeTime":1,"maxOrientation":13.2,"maxRate":0,"maxVelocity":[0,0,0],"minAcceleration":[0,0,-9.82],"minLifeTime":1,"minOrientation":-19.5,"minSpin":1.1,"minVelocity":[0,0,0],"owner":"Anonymous_zgviOjtXorD5eSi9AAAA","particleCount":50,"sizeRange":0,"solver":"AnalyticShader","soundFiles":["/sas/assets/2cb9fef9","/sas/assets/994ee0c8","/sas/assets/68b679a8"],"startColor":[1,1,1,1],"startSize":0.1,"textureTiles":4,"transform":[0.367231965065002,0,0,0,0,0.367231965065002,0,0,0,0,0.367231965065002,0,26.0339719083774,14.1021328343483,0,1],"type":"ParticleSystem","velocityMode":"cartesian","visible":false},"random":{"c":414635,"s0":0.318485354771838,"s1":0.128272331960034,"s2":0.216222008166369},"sequence":0,"name":"N616c830d"},"N6ab59711":{"extends":"SandboxParticleSystem.vwf","methods":{"start":{"body":"\n\n\n\n\n\n\n\n\n                       this.transformAPI.setPosition(pos);\n            this.visible = true;\n            this.counter = 10;\n            var sound = Math.floor((Math.random() - .01) * 3);\n            if(sound > 0 && sound < 2)\n            this.audioAPI.playSound(this.soundFiles[sound], false, 30);               \n\n\n\n\n","parameters":["pos"]},"tick":{"body":"\n\n\n\n\n\n\n\n\n                                                                      // The tick function is called 20 times every second.\n            // Write code here to animate over time\n            this.visible = true;\n            if(this.counter < 0)\n            this.visible = false;\n            this.counter--;                                                              \n\n\n\n\n","parameters":[]}},"properties":{"DisplayName":"ParticleSystem7","___assetServerOriginalID":"Nec7b6ac1","additive":false,"alphaTest":0.5,"colorRange":[0,0,0,0],"counter":-222,"depthTest":false,"emitterPosition":[0,0,3],"emitterSize":[0.2,0.2,1],"emitterType":"box","endColor":[0.698039215686274,0.976470588235294,1,0.5],"endSize":1,"image":"../vwfDataManager.svc/texture?UID=water.png","mamSpin":20,"maxAcceleration":[0,0,-9.82],"maxLifeTime":1,"maxOrientation":13.2,"maxRate":0,"maxVelocity":[0,0,0],"minAcceleration":[0,0,-9.82],"minLifeTime":1,"minOrientation":-19.5,"minSpin":1.1,"minVelocity":[0,0,0],"owner":"Anonymous_zgviOjtXorD5eSi9AAAA","particleCount":50,"sizeRange":0,"solver":"AnalyticShader","soundFiles":["/sas/assets/2cb9fef9","/sas/assets/994ee0c8","/sas/assets/68b679a8"],"startColor":[1,1,1,1],"startSize":0.1,"textureTiles":4,"transform":[0.367231965065002,0,0,0,0,0.367231965065002,0,0,0,0,0.367231965065002,0,21.6046572051136,10.3720775145378,0,1],"type":"ParticleSystem","velocityMode":"cartesian","visible":false},"random":{"c":414635,"s0":0.318485354771838,"s1":0.128272331960034,"s2":0.216222008166369},"sequence":0,"name":"N6ab59711"},"N963ff4e0":{"extends":"SandboxParticleSystem.vwf","methods":{"start":{"body":"\n\n\n\n\n\n\n\n\n                        this.transformAPI.setPosition(pos);\n            this.visible = true;\n            this.counter = 10;\n            var sound = Math.floor((Math.random() - .01) * 3);\n            if(sound > 0 && sound < 2)\n            this.audioAPI.playSound(this.soundFiles[sound], false, 30);                \n\n\n\n\n","parameters":["pos"]},"tick":{"body":"\n\n\n\n\n\n\n\n\n                                                                       // The tick function is called 20 times every second.\n            // Write code here to animate over time\n            this.visible = true;\n            if(this.counter < 0)\n            this.visible = false;\n            this.counter--;                                                               \n\n\n\n\n","parameters":[]}},"properties":{"DisplayName":"ParticleSystem9","___assetServerOriginalID":"Na421bf57","additive":false,"alphaTest":0.5,"colorRange":[0,0,0,0],"counter":-216,"depthTest":false,"emitterPosition":[0,0,3],"emitterSize":[0.2,0.2,1],"emitterType":"box","endColor":[0.698039215686274,0.976470588235294,1,0.5],"endSize":1,"image":"../vwfDataManager.svc/texture?UID=water.png","mamSpin":20,"maxAcceleration":[0,0,-9.82],"maxLifeTime":1,"maxOrientation":13.2,"maxRate":0,"maxVelocity":[0,0,0],"minAcceleration":[0,0,-9.82],"minLifeTime":1,"minOrientation":-19.5,"minSpin":1.1,"minVelocity":[0,0,0],"owner":"Anonymous_zgviOjtXorD5eSi9AAAA","particleCount":50,"sizeRange":0,"solver":"AnalyticShader","soundFiles":["/sas/assets/2cb9fef9","/sas/assets/994ee0c8","/sas/assets/68b679a8"],"startColor":[1,1,1,1],"startSize":0.1,"textureTiles":4,"transform":[0.367231965065002,0,0,0,0,0.367231965065002,0,0,0,0,0.367231965065002,0,25.0058793968185,12.9082975405384,-1.11022302462516e-16,1],"type":"ParticleSystem","velocityMode":"cartesian","visible":false},"random":{"c":414635,"s0":0.318485354771838,"s1":0.128272331960034,"s2":0.216222008166369},"sequence":0,"name":"N963ff4e0"},"Na1956f64":{"extends":"SandboxParticleSystem.vwf","methods":{"start":{"body":"\n\n\n\n\n\n\n\n\n                          this.transformAPI.setPosition(pos);\n            this.visible = true;\n            this.counter = 10;\n            var sound = Math.floor((Math.random() - .01) * 3);\n            if(sound > 0 && sound < 2)\n            this.audioAPI.playSound(this.soundFiles[sound], false, 30);                  \n\n\n\n\n","parameters":["pos"]},"tick":{"body":"\n\n\n\n\n\n\n\n\n                                                                         // The tick function is called 20 times every second.\n            // Write code here to animate over time\n            this.visible = true;\n            if(this.counter < 0)\n            this.visible = false;\n            this.counter--;                                                                 \n\n\n\n\n","parameters":[]}},"properties":{"DisplayName":"ParticleSystem11","___assetServerOriginalID":"N2e89a982","additive":false,"alphaTest":0.5,"colorRange":[0,0,0,0],"counter":-238,"depthTest":false,"emitterPosition":[0,0,3],"emitterSize":[0.2,0.2,1],"emitterType":"box","endColor":[0.698039215686274,0.976470588235294,1,0.5],"endSize":1,"image":"../vwfDataManager.svc/texture?UID=water.png","mamSpin":20,"maxAcceleration":[0,0,-9.82],"maxLifeTime":1,"maxOrientation":13.2,"maxRate":0,"maxVelocity":[0,0,0],"minAcceleration":[0,0,-9.82],"minLifeTime":1,"minOrientation":-19.5,"minSpin":1.1,"minVelocity":[0,0,0],"owner":"Anonymous_zgviOjtXorD5eSi9AAAA","particleCount":50,"sizeRange":0,"solver":"AnalyticShader","soundFiles":["/sas/assets/2cb9fef9","/sas/assets/994ee0c8","/sas/assets/68b679a8"],"startColor":[1,1,1,1],"startSize":0.1,"textureTiles":4,"transform":[0.367231965065002,0,0,0,0,0.367231965065002,0,0,0,0,0.367231965065002,0,21.0707831804383,9.8161034612111,0,1],"type":"ParticleSystem","velocityMode":"cartesian","visible":false},"random":{"c":414635,"s0":0.318485354771838,"s1":0.128272331960034,"s2":0.216222008166369},"sequence":0,"name":"Na1956f64"},"Naca9902d":{"extends":"SandboxParticleSystem.vwf","methods":{"start":{"body":"\n\n\n\n\n\n\n\n\n                     this.transformAPI.setPosition(pos);\n            this.visible = true;\n            this.counter = 10;\n            var sound = Math.floor((Math.random() - .01) * 3);\n            if(sound > 0 && sound < 2)\n            this.audioAPI.playSound(this.soundFiles[sound], false, 30);             \n\n\n\n\n","parameters":["pos"]},"tick":{"body":"\n\n\n\n\n\n\n\n\n                                                                    // The tick function is called 20 times every second.\n            // Write code here to animate over time\n            this.visible = true;\n            if(this.counter < 0)\n            this.visible = false;\n            this.counter--;                                                            \n\n\n\n\n","parameters":[]}},"properties":{"DisplayName":"ParticleSystem4","___assetServerOriginalID":"Ne5fd1e14","additive":false,"alphaTest":0.5,"colorRange":[0,0,0,0],"counter":-220,"depthTest":false,"emitterPosition":[0,0,3],"emitterSize":[0.2,0.2,1],"emitterType":"box","endColor":[0.698039215686274,0.976470588235294,1,0.5],"endSize":1,"image":"../vwfDataManager.svc/texture?UID=water.png","mamSpin":20,"maxAcceleration":[0,0,-9.82],"maxLifeTime":1,"maxOrientation":13.2,"maxRate":0,"maxVelocity":[0,0,0],"minAcceleration":[0,0,-9.82],"minLifeTime":1,"minOrientation":-19.5,"minSpin":1.1,"minVelocity":[0,0,0],"owner":"Anonymous_zgviOjtXorD5eSi9AAAA","particleCount":50,"sizeRange":0,"solver":"AnalyticShader","soundFiles":["/sas/assets/2cb9fef9","/sas/assets/994ee0c8","/sas/assets/68b679a8"],"startColor":[1,1,1,1],"startSize":0.1,"textureTiles":4,"transform":[0.367231965065002,0,0,0,0,0.367231965065002,0,0,0,0,0.367231965065002,0,23.5433481911566,12.0703988308386,0,1],"type":"ParticleSystem","velocityMode":"cartesian","visible":false},"random":{"c":414635,"s0":0.318485354771838,"s1":0.128272331960034,"s2":0.216222008166369},"sequence":0,"name":"Naca9902d"},"Nad7b44d4":{"extends":"SandboxParticleSystem.vwf","methods":{"start":{"body":"\n\n\n\n\n\n\n\n\n                      this.transformAPI.setPosition(pos);\n            this.visible = true;\n            this.counter = 10;\n            var sound = Math.floor((Math.random() - .01) * 3);\n            if(sound > 0 && sound < 2)\n            this.audioAPI.playSound(this.soundFiles[sound], false, 30);              \n\n\n\n\n","parameters":["pos"]},"tick":{"body":"\n\n\n\n\n\n\n\n\n                                                                     // The tick function is called 20 times every second.\n            // Write code here to animate over time\n            this.visible = true;\n            if(this.counter < 0)\n            this.visible = false;\n            this.counter--;                                                             \n\n\n\n\n","parameters":[]}},"properties":{"DisplayName":"ParticleSystem6","___assetServerOriginalID":"N1675d244","additive":false,"alphaTest":0.5,"colorRange":[0,0,0,0],"counter":-228,"depthTest":false,"emitterPosition":[0,0,3],"emitterSize":[0.2,0.2,1],"emitterType":"box","endColor":[0.698039215686274,0.976470588235294,1,0.5],"endSize":1,"image":"../vwfDataManager.svc/texture?UID=water.png","mamSpin":20,"maxAcceleration":[0,0,-9.82],"maxLifeTime":1,"maxOrientation":13.2,"maxRate":0,"maxVelocity":[0,0,0],"minAcceleration":[0,0,-9.82],"minLifeTime":1,"minOrientation":-19.5,"minSpin":1.1,"minVelocity":[0,0,0],"owner":"Anonymous_zgviOjtXorD5eSi9AAAA","particleCount":50,"sizeRange":0,"solver":"AnalyticShader","soundFiles":["/sas/assets/2cb9fef9","/sas/assets/994ee0c8","/sas/assets/68b679a8"],"startColor":[1,1,1,1],"startSize":0.1,"textureTiles":4,"transform":[0.367231965065002,0,0,0,0,0.367231965065002,0,0,0,0,0.367231965065002,0,27.03855668276,14.7542637144711,1.11022302462516e-16,1],"type":"ParticleSystem","velocityMode":"cartesian","visible":false},"random":{"c":414635,"s0":0.318485354771838,"s1":0.128272331960034,"s2":0.216222008166369},"sequence":0,"name":"Nad7b44d4"},"Naddfe610":{"extends":"SandboxParticleSystem.vwf","methods":{"start":{"body":"\n\n\n\n\n\n\n\n\n                   this.transformAPI.setPosition(pos);\n            this.visible = true;\n            this.counter = 10;\n            var sound = Math.floor((Math.random() - .01) * 3);\n            if(sound > 0 && sound < 2)\n            this.audioAPI.playSound(this.soundFiles[sound], false, 30);           \n\n\n\n\n","parameters":["pos"]},"tick":{"body":"\n\n\n\n\n\n\n\n\n                                                                  // The tick function is called 20 times every second.\n            // Write code here to animate over time\n            this.visible = true;\n            if(this.counter < 0)\n            this.visible = false;\n            this.counter--;                                                          \n\n\n\n\n","parameters":[]}},"properties":{"DisplayName":"ParticleSystem2","___assetServerOriginalID":"N38b49f97","additive":false,"alphaTest":0.5,"colorRange":[0,0,0,0],"counter":-224,"depthTest":false,"emitterPosition":[0,0,3],"emitterSize":[0.2,0.2,1],"emitterType":"box","endColor":[0.698039215686274,0.976470588235294,1,0.5],"endSize":1,"image":"../vwfDataManager.svc/texture?UID=water.png","mamSpin":20,"maxAcceleration":[0,0,-9.82],"maxLifeTime":1,"maxOrientation":13.2,"maxRate":0,"maxVelocity":[0,0,0],"minAcceleration":[0,0,-9.82],"minLifeTime":1,"minOrientation":-19.5,"minSpin":1.1,"minVelocity":[0,0,0],"owner":"Anonymous_zgviOjtXorD5eSi9AAAA","particleCount":50,"sizeRange":0,"solver":"AnalyticShader","soundFiles":["/sas/assets/2cb9fef9","/sas/assets/994ee0c8","/sas/assets/68b679a8"],"startColor":[1,1,1,1],"startSize":0.1,"textureTiles":4,"transform":[0.367231965065002,0,0,0,0,0.367231965065002,0,0,0,0,0.367231965065002,0,29.7684660265342,17.1156595024539,1.11022302462516e-16,1],"type":"ParticleSystem","velocityMode":"cartesian","visible":false},"random":{"c":414635,"s0":0.318485354771838,"s1":0.128272331960034,"s2":0.216222008166369},"sequence":0,"name":"Naddfe610"},"Nbad2c52b":{"extends":"SandboxParticleSystem.vwf","methods":{"start":{"body":"\n\n\n\n\n\n\n\n\n                  this.transformAPI.setPosition(pos);\n            this.visible = true;\n            this.counter = 10;\n            var sound = Math.floor((Math.random() - .01) * 3);\n            if(sound > 0 && sound < 2)\n            this.audioAPI.playSound(this.soundFiles[sound], false, 30);          \n\n\n\n\n","parameters":["pos"]},"tick":{"body":"\n\n\n\n\n\n\n\n\n                                                                 // The tick function is called 20 times every second.\n            // Write code here to animate over time\n            this.visible = true;\n            if(this.counter < 0)\n            this.visible = false;\n            this.counter--;                                                         \n\n\n\n\n","parameters":[]}},"properties":{"DisplayName":"ParticleSystem9","___assetServerOriginalID":"Nf765253e","additive":false,"alphaTest":0.5,"colorRange":[0,0,0,0],"counter":-226,"depthTest":false,"emitterPosition":[0,0,3],"emitterSize":[0.2,0.2,1],"emitterType":"box","endColor":[0.698039215686274,0.976470588235294,1,0.5],"endSize":1,"image":"../vwfDataManager.svc/texture?UID=water.png","mamSpin":20,"maxAcceleration":[0,0,-9.82],"maxLifeTime":1,"maxOrientation":13.2,"maxRate":0,"maxVelocity":[0,0,0],"minAcceleration":[0,0,-9.82],"minLifeTime":1,"minOrientation":-19.5,"minSpin":1.1,"minVelocity":[0,0,0],"owner":"Anonymous_zgviOjtXorD5eSi9AAAA","particleCount":50,"sizeRange":0,"solver":"AnalyticShader","soundFiles":["/sas/assets/2cb9fef9","/sas/assets/994ee0c8","/sas/assets/68b679a8"],"startColor":[1,1,1,1],"startSize":0.1,"textureTiles":4,"transform":[0.367231965065002,0,0,0,0,0.367231965065002,0,0,0,0,0.367231965065002,0,28.7537918681036,16.1288847057294,0,1],"type":"ParticleSystem","velocityMode":"cartesian","visible":false},"random":{"c":414635,"s0":0.318485354771838,"s1":0.128272331960034,"s2":0.216222008166369},"sequence":0,"name":"Nbad2c52b"},"Ne0c5729":{"extends":"SandboxParticleSystem.vwf","methods":{"start":{"body":"\n\n\n\n\n\n\n\n\n                         this.transformAPI.setPosition(pos);\n            this.visible = true;\n            this.counter = 10;\n            var sound = Math.floor((Math.random() - .01) * 3);\n            if(sound > 0 && sound < 2)\n            this.audioAPI.playSound(this.soundFiles[sound], false, 30);                 \n\n\n\n\n","parameters":["pos"]},"tick":{"body":"\n\n\n\n\n\n\n\n\n                                                                        // The tick function is called 20 times every second.\n            // Write code here to animate over time\n            this.visible = true;\n            if(this.counter < 0)\n            this.visible = false;\n            this.counter--;                                                                \n\n\n\n\n","parameters":[]}},"properties":{"DisplayName":"ParticleSystem10","___assetServerOriginalID":"Nd132a72c","additive":false,"alphaTest":0.5,"colorRange":[0,0,0,0],"counter":-230,"depthTest":false,"emitterPosition":[0,0,3],"emitterSize":[0.2,0.2,1],"emitterType":"box","endColor":[0.698039215686274,0.976470588235294,1,0.5],"endSize":1,"image":"../vwfDataManager.svc/texture?UID=water.png","mamSpin":20,"maxAcceleration":[0,0,-9.82],"maxLifeTime":1,"maxOrientation":13.2,"maxRate":0,"maxVelocity":[0,0,0],"minAcceleration":[0,0,-9.82],"minLifeTime":1,"minOrientation":-19.5,"minSpin":1.1,"minVelocity":[0,0,0],"owner":"Anonymous_zgviOjtXorD5eSi9AAAA","particleCount":50,"sizeRange":0,"solver":"AnalyticShader","soundFiles":["/sas/assets/2cb9fef9","/sas/assets/994ee0c8","/sas/assets/68b679a8"],"startColor":[1,1,1,1],"startSize":0.1,"textureTiles":4,"transform":[0.367231965065002,0,0,0,0,0.367231965065002,0,0,0,0,0.367231965065002,0,25.6072900627637,14.0532048055558,0,1],"type":"ParticleSystem","velocityMode":"cartesian","visible":false},"random":{"c":414635,"s0":0.318485354771838,"s1":0.128272331960034,"s2":0.216222008166369},"sequence":0,"name":"Ne0c5729"},"Nef3715d2":{"extends":"SandboxParticleSystem.vwf","methods":{"start":{"body":"\n\n\n\n\n\n\n\n\n                       this.transformAPI.setPosition(pos);\n            this.visible = true;\n            this.counter = 10;\n            var sound = Math.floor((Math.random() - .01) * 3);\n            if(sound > 0 && sound < 2)\n            this.audioAPI.playSound(this.soundFiles[sound], false, 30);               \n\n\n\n\n","parameters":["pos"]},"tick":{"body":"\n\n\n\n\n\n\n\n\n                                                                      // The tick function is called 20 times every second.\n            // Write code here to animate over time\n            this.visible = true;\n            if(this.counter < 0)\n            this.visible = false;\n            this.counter--;                                                              \n\n\n\n\n","parameters":[]}},"properties":{"DisplayName":"ParticleSystem7","___assetServerOriginalID":"N95a1561c","additive":false,"alphaTest":0.5,"colorRange":[0,0,0,0],"counter":-232,"depthTest":false,"emitterPosition":[0,0,3],"emitterSize":[0.2,0.2,1],"emitterType":"box","endColor":[0.698039215686274,0.976470588235294,1,0.5],"endSize":1,"image":"../vwfDataManager.svc/texture?UID=water.png","mamSpin":20,"maxAcceleration":[0,0,-9.82],"maxLifeTime":1,"maxOrientation":13.2,"maxRate":0,"maxVelocity":[0,0,0],"minAcceleration":[0,0,-9.82],"minLifeTime":1,"minOrientation":-19.5,"minSpin":1.1,"minVelocity":[0,0,0],"owner":"Anonymous_zgviOjtXorD5eSi9AAAA","particleCount":50,"sizeRange":0,"solver":"AnalyticShader","soundFiles":["/sas/assets/2cb9fef9","/sas/assets/994ee0c8","/sas/assets/68b679a8"],"startColor":[1,1,1,1],"startSize":0.1,"textureTiles":4,"transform":[0.367231965065002,0,0,0,0,0.367231965065002,0,0,0,0,0.367231965065002,0,21.8927990393713,10.6259235944861,0,1],"type":"ParticleSystem","velocityMode":"cartesian","visible":false},"random":{"c":414635,"s0":0.318485354771838,"s1":0.128272331960034,"s2":0.216222008166369},"sequence":0,"name":"Nef3715d2"},"Nf863f097":{"extends":"SandboxParticleSystem.vwf","methods":{"start":{"body":"\n\n\n\n\n\n\n\n\n                           this.transformAPI.setPosition(pos);\n            this.visible = true;\n            this.counter = 10;\n            var sound = Math.floor((Math.random() - .01) * 3);\n            if(sound > 0 && sound < 2)\n            this.audioAPI.playSound(this.soundFiles[sound], false, 30);                   \n\n\n\n\n","parameters":["pos"]},"tick":{"body":"\n\n\n\n\n\n\n\n\n                                                                          // The tick function is called 20 times every second.\n            // Write code here to animate over time\n            this.visible = true;\n            if(this.counter < 0)\n            this.visible = false;\n            this.counter--;                                                                  \n\n\n\n\n","parameters":[]}},"properties":{"DisplayName":"ParticleSystem12","___assetServerOriginalID":"N47f111ed","additive":false,"alphaTest":0.5,"colorRange":[0,0,0,0],"counter":-234,"depthTest":false,"emitterPosition":[0,0,3],"emitterSize":[0.2,0.2,1],"emitterType":"box","endColor":[0.698039215686274,0.976470588235294,1,0.5],"endSize":1,"image":"../vwfDataManager.svc/texture?UID=water.png","mamSpin":20,"maxAcceleration":[0,0,-9.82],"maxLifeTime":1,"maxOrientation":13.2,"maxRate":0,"maxVelocity":[0,0,0],"minAcceleration":[0,0,-9.82],"minLifeTime":1,"minOrientation":-19.5,"minSpin":1.1,"minVelocity":[0,0,0],"owner":"Anonymous_zgviOjtXorD5eSi9AAAA","particleCount":50,"sizeRange":0,"solver":"AnalyticShader","soundFiles":["/sas/assets/2cb9fef9","/sas/assets/994ee0c8","/sas/assets/68b679a8"],"startColor":[1,1,1,1],"startSize":0.1,"textureTiles":4,"transform":[0.367231965065002,0,0,0,0,0.367231965065002,0,0,0,0,0.367231965065002,0,25.8694349359583,13.7481619497759,0,1],"type":"ParticleSystem","velocityMode":"cartesian","visible":false},"random":{"c":414635,"s0":0.318485354771838,"s1":0.128272331960034,"s2":0.216222008166369},"sequence":0,"name":"Nf863f097"}},"extends":"plane2.vwf","methods":{"hit":{"body":"\n\n\n\n\n\n\n\n\n          var pos = args[0];\n            if(!pos) return;\n            pos = this.transformAPI.globalToLocal(pos);\n            //this.children[this.splashCount].transformAPI.setPosition(pos);\n            this.children[this.splashCount].start(pos);\n\n            this.splashCount++;\n            console.log(this.children.length);\n            if (this.splashCount > this.children.length - 1)\n            {\n\n                this.splashCount = 0;\n            }  \n\n\n\n\n","parameters":["args"]},"splash":{"body":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n","parameters":["pos"]}},"properties":{"":null,"DisplayName":"Ocean","___physics_activation_state":1,"___physics_deactivation_time":0,"___physics_velocity_angular":[0,0,0],"___physics_velocity_linear":[0,0,0],"_length":10000,"lsegs":30,"materialDef":{"alpha":0.993506493506494,"ambient":{"b":0.658823529411765,"g":0.541176470588235,"r":0.490196078431373},"blendMode":0,"color":{"a":0.993506493506494,"b":0.658823529411765,"g":0.541176470588235,"r":0.490196078431373},"depthtest":true,"depthwrite":true,"emit":{"b":0,"g":0,"r":0},"fog":true,"layers":[{"alpha":0.15,"mapInput":0,"mapTo":4,"offsetx":0,"offsety":0,"rot":0,"scalex":100,"scaley":100,"src":"../vwfDataManager.svc/texture?UID=waternormal.jpg"}],"metal":false,"reflect":1,"shadeless":false,"shading":true,"shadow":true,"shininess":1,"side":0,"specularColor":{"b":30.5773502691896,"g":30.5773502691896,"r":30.5773502691896},"specularLevel":10,"type":"phong","vertexColors":false,"wireframe":false},"owner":"ADLteam","renderDepth":0,"sourceAssetId":"0c42853d","splashCount":2,"transform":[1,0,0,0,0,1,0,0,0,0,1,0,0,17.5,20,1],"type":"Primitive","width":10000,"wsegs":30},"random":{"c":1,"s0":0.703975566895679,"s1":0.197294719750062,"s2":0.396665057167411},"sequence":0,"source":"vwf/model/threejs/plane.js","type":"subDriver/threejs","name":"N6f03c54a"},{"children":{"N22157174":{"events":{"pointerClick":{"body":"\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n                                            this.parent.launchMissile()               ","parameters":["                                                          eventData","                                                          nodeData                                                          "]}},"extends":"box2.vwf","properties":{"DisplayName":"MissileLauncher","___assetServerOriginalID":"N8c4837dd","___physics_activation_state":1,"___physics_deactivation_time":0,"___physics_velocity_angular":[0,0,0],"___physics_velocity_linear":[0,0,0],"height":1.61,"materialDef":{"alpha":1,"ambient":{"b":1,"g":1,"r":1},"color":{"a":1,"b":1,"g":1,"r":1},"emit":{"b":0,"g":0,"r":0},"layers":[{"alpha":1,"blendMode":0,"mapInput":0,"mapTo":1,"offsetx":0,"offsety":0,"rot":0,"scalex":1,"scaley":1,"src":"checker.jpg"}],"reflect":0.8,"shadeless":false,"shadow":true,"shininess":15,"specularColor":{"b":0.57735,"g":0.57735,"r":0.57735},"specularLevel":1},"owner":"ADLteam","transform":[0.08618500083684921,-0.022557999938726425,0.9960219860076904,0,0.0010019999463111162,-0.9997419714927673,-0.02273000031709671,0,0.9962769746780396,0.002956999931484461,-0.08614099770784378,0,1,0,1.5,1],"type":"Primitive","visible":false,"width":1.36,"worldTransform":[-0.06519053876399994,-0.05887477472424507,0.9820776581764221,0,-0.8249381184577942,0.5396040678024292,-0.022411780431866646,0,-0.5361188650131226,-0.823137640953064,-0.0849350243806839,0,54.20943069458008,23.675390243530273,21.979000091552734,1]},"random":{"c":1,"s0":0.778299,"s1":0.286493,"s2":0.191579},"sequence":0,"source":"vwf/model/threejs/box.js","type":"subDriver/threejs","name":"N22157174"},"N8023d679":{"extends":"box2.vwf","properties":{"DisplayName":"box7","___assetServerOriginalID":"N83e3ec00","___physics_activation_state":1,"___physics_deactivation_time":0,"___physics_velocity_angular":[0,0,0],"___physics_velocity_linear":[0,0,0],"_length":3.45,"castShadows":false,"height":1.13,"materialDef":{"alpha":0,"ambient":{"b":1,"g":1,"r":1},"blendMode":1,"color":{"a":0,"b":1,"g":1,"r":1},"depthtest":true,"depthwrite":true,"emit":{"b":0,"g":0,"r":0},"fog":true,"layers":[],"metal":false,"reflect":0.8,"shadeless":false,"shading":true,"shadow":true,"shininess":15,"side":0,"specularColor":{"b":0.577350269189626,"g":0.577350269189626,"r":0.577350269189626},"specularLevel":1,"type":"phong","vertexColors":false,"wireframe":false},"owner":"ADLteam","renderDepth":7,"transform":[1,0,9.999999974752427e-7,0,0,1,0,0,0,0,1,0,1,0,-0.2499990016222,1],"type":"Primitive","width":2.18},"random":{"c":1,"s0":0.198099663946778,"s1":0.0275812551844865,"s2":0.352169041289017},"sequence":0,"source":"vwf/model/threejs/box.js","type":"subDriver/threejs","name":"N8023d679"},"N8138f546":{"extends":"asset.vwf","properties":{"DisplayName":"./vwfdatamanager.svc/DataFile/Navy/AttackSpeedBoat.dae1","___assetServerOriginalID":"N958e2662","___physics_activation_state":1,"___physics_deactivation_time":0,"___physics_velocity_angular":[0,0,0],"___physics_velocity_linear":[0,0,0],"materialDef":{"alpha":1,"ambient":{"b":0.584,"g":0.584,"r":0.584},"color":{"b":1,"g":1,"r":1},"emit":{"b":0,"g":0,"r":0},"layers":[{"alpha":1,"mapInput":0,"mapTo":1,"offsetx":0,"offsety":0,"scalex":1,"scaley":1,"src":"/sas/assets/7e6084c4"}],"reflect":0.001,"shininess":0.004002,"side":0,"specularColor":{"b":0,"g":0,"r":0},"specularLevel":1,"type":"phong"},"owner":"ADLteam","transform":[-9.999999974752427e-7,1,-9.999999974752427e-7,0,-1.0000009536743164,-9.999999974752427e-7,-9.999999974752427e-7,0,-9.999999974752427e-7,0,1,0,0.5,0,-0.5,1]},"random":{"c":1,"s0":0.375302,"s1":0.872168,"s2":0.110384},"sequence":0,"source":"/sas/assets/c1064312","type":"subDriver/threejs/asset/vnd.collada+xml","name":"N8138f546"},"Naba0c23a":{"extends":"http://vwf.example.com/node3.vwf","properties":{"DisplayName":"enginePos","___assetServerOriginalID":"N8cf5a8e2","glyphURL":"../vwf/view/editorview/images/icons/sphere.png","owner":"ADLteam","transform":[1,0,0,0,0,1,0,0,-9.999999974752427e-7,0,1,0,3,0,-0.75,1],"transformAPI":{"COORDINATES":{"GLOBAL":"global","LOCAL":"local","PARENT":"parent"}},"worldTransform":[-0.5405697822570801,-0.8246092200279236,0,0,0.8246092200279236,-0.5405697822570801,0,0,5.405697720561875e-7,8.246092306762876e-7,0.9860000014305115,0,53.128292083740234,22.026172637939453,19.760499954223633,1]},"random":{"c":1,"s0":0.022454,"s1":0.002702,"s2":0.55584},"sequence":0,"name":"Naba0c23a"}},"extends":"box2.vwf","methods":{"FACMovementDirection":{"body":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                // set equal to \"\" after adding calculations:\n                                var movement = \"closing\";\n                                // Perform calculations to determine approaching or moving away states:\n                                //     movement = \"closing\" if distance to target is getting smaller\n                                //     movement = \"none\" if distance to target hasn't changed\n                                //     movement = \"increasing\" if distance to target is getting larger\n                                switch (movement)\n                                {\n                                    case \"closing\":\n                                        this.currentState = this.states[\"approaching\"];\n                                        return \"approaching\";\n                                    case \"none\":\n                                        this.currentState = this.states[\"idle\"];\n                                        return \"idle\";\n                                    case \"increasing\":\n                                        this.currentState = this.states[\"moving_away\"];\n                                        return \"moving_away\";\n                                }    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","parameters":[]},"_keyDown":{"body":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                if (!this.verifyCamera()) return;\n                                if (this.currentState === null)\n                                {\n                                    console.log(\"Set initial state\");\n                                    this.currentState = this.states[\"approaching\"];\n                                }\n                                if (this._keysDown.indexOf(e.key.char) == -1)\n                                {\n                                    this._keysDown.push(e.key.char);\n                                }    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","parameters":["e","d"]},"_keyUp":{"body":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                if (!this.verifyCamera()) return;\n                                if (this._keysDown.indexOf(e.key.char) !== -1)\n                                {\n                                    this._keysDown.splice(this._keysDown.indexOf(e.key.char), 1);\n                                }\n                                if (e.key.char == \" \")\n                                {\n                                    if (this.rockets > 0)\n                                    {\n                                        this.activateState(\"fire_rocket\");\n                                        console.log(\"rockets: \" + this.rockets);\n                                    }\n                                }    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","parameters":["e","d"]},"activateState":{"body":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                //console.log(\"activateState\");\n                                var state = this.states[statename];\n\n                                if (this.currentState.transitions.indexOf(statename) == -1)\n                                {\n                                    console.log(\"invalid transition!\");\n                                    return;\n                                }\n\n                                if (state.transitionFunction)\n                                    this[state.transitionFunction](this.currentState);\n\n                                this.currentState = state;\n\n                                for (var i in state.properties)\n                                {\n                                    console.log(state.properties[i]);\n                                    this[i] = state.properties[i];\n                                }    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","parameters":["statename"]},"approachingTransition":{"body":"//console.log(\"approachingTransition\");\n    this.approachingUpdate(this.currentState);","parameters":[]},"approachingUpdate":{"body":"//console.log(\"approachingUpdate\");\n    this.currentState = this.states[\"approaching\"];","parameters":["statename"]},"collidingTransition":{"body":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                console.log(\"collidingTransition\");\n                                this.currentState = this.states[\"colliding\"];    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","parameters":[]},"collidingUpdate":{"body":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                console.log(\"collidingUpdate\");\n                                this.currentState = this.states[\"colliding\"];    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","parameters":["statename"]},"consumeFuel":{"body":"if (this.fuel <= 0.0)\n    {\n        this.currentState = this.states[\"out_of_gas\"];\n    }\n    else\n    {\n        this.fuel = this.fuel - this.fuelConsumptionRate;\n        //console.log(\"fuel: \" + this.fuel);\n    }","parameters":[]},"defeatedTransition":{"body":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                console.log(\"defeatedTransition\");\n                                this.currentState = this.states[\"defeated\"];    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","parameters":[]},"defeatedUpdate":{"body":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                console.log(\"defeatedUpdate\");\n                                this.currentState = this.states[\"defeated\"];    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","parameters":["statename"]},"fire_rocketTransition":{"body":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                console.log(\"fire_rocketTransition\");\n                                this.fire_rocketUpdate(this.currentState);    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","parameters":[]},"fire_rocketUpdate":{"body":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                console.log(\"fire_rocketUpdate\");\n                                this.launchMissile();\n                                this.playMissileLaunch();\n                                this.rockets = this.rockets - 1;\n                                if (this.rockets > 0)\n                                {\n                                    this.currentState = this.states[\"fire_rocket\"];\n                                    console.log(\"rocketUpdate state fire \");\n                                }\n                                else\n                                {\n                                    this.currentState = this.states[\"idle\"];\n                                    console.log(\"rocketUpdate state idle\");\n                                }    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","parameters":["statename"]},"hit":{"body":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                             var pos = args[0];\n                                var force = args[1];\n                                if (typeof force == 'number')\n                                    this.health -= force;\n                                else\n                                    this.health -= 101;\n\n                                if (this.health < 0)\n                                {\n                                    var def = this.explosionDef;\n                                    var pos = this.transformAPI.getWorldPosition();\n                                    def.properties.transform[12] = pos[0];\n                                    def.properties.transform[13] = pos[1];\n                                    def.properties.transform[14] = pos[2];\n                                    def.properties.fuse = 1;\n                                    vwf.createChild(vwf.application(), GUID(), _DataManager.getCleanNodePrototype(def), null);\n                                    this.parent.children.delete(this);\n                                } \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","parameters":["args"]},"idleTransition":{"body":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                               console.log(\"idleTransition\");\n                                this.currentState = this.states[\"idle\"];   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","parameters":[]},"idleUpdate":{"body":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                               console.log(\"idleUpdate\");\n                                this.currentState = this.states[\"idle\"];   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","parameters":["statename"]},"launchMissile":{"body":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                         var def = this.missileDef;\n                            var pos = this.children_by_name.MissileLauncher.worldTransform.slice();\n\n                            pos[14] += 0;\n                            def.properties.transform = pos;\n                           // def.properties.___physics_velocity_linear = this.physicsAPI.getLinearVelocity();\n                            def.properties.fired = true;\n                            var now = performance.now();\n                            // console.profile(\"launch\");\n                            vwf.createChild(vwf.application(), GUID(), _DataManager.getCleanNodePrototype(def), null, function()\n                            {\n                                console.log(performance.now() - now);\n                            }); \n\n\n\n\n\n\n\n\n\n\n\n\n","parameters":[]},"moving_awayTransition":{"body":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                               console.log(\"moving_awayTransition\");\n                                this.moving_awayUpdate(this.currentState);   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","parameters":[]},"moving_awayUpdate":{"body":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                               console.log(\"moving_awayUpdate\");\n                                this.currentState = this.states[\"moving_away\"];   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","parameters":["statename"]},"out_of_gasTransition":{"body":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                               console.log(\"out_of_gasTransition\");\n                                //this.currentState = this.states[\"out_of_gas\"];\n                                this.out_of_gasUpdate(this.currentState);   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","parameters":[]},"out_of_gasUpdate":{"body":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                               console.log(\"out_of_gasUpdate\");\n                                console.log(statename);\n                                if (this.fuel <= 0)\n                                {\n                                    this.currentState = this.states[\"out_of_gas\"];\n                                    console.log(\"out_of_gasUpdate now out_of_gas state\");\n                                }\n                                else if (this.hullStrength <= 0)\n                                {\n                                    this.currentState = this.states[\"defeated\"];\n                                    console.log(\"out_of_gasUpdate now defaeted state\");\n                                }   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","parameters":["statename"]},"playBulletHittingMetal":{"body":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                               console.log(\"playBulletHittingMetal\");\n                                this.audioAPI.playSound(\"\", false, 100);   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","parameters":[]},"playBulletHittingWater":{"body":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                               console.log(\"playBulletHittingWater\");\n                                this.audioAPI.playSound(\"\", false, 100);   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","parameters":[]},"playBulletWhizzingBy":{"body":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                               console.log(\"playBulletWhizzingBy\");\n                                this.audioAPI.playSound(\"\", false, 100);   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","parameters":[]},"playExplosion":{"body":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                               console.log(\"playExplosion\");\n                                // #1:\n                                //this.audioAPI.playSound(\"/sas/assets/8d358349\", false, 100);\n                                // #2:\n                                //this.audioAPI.playSound(\"/sas/assets/d714ebe1\", false, 100);\n                                // #3:\n                                this.audioAPI.playSound(\"/sas/assets/3c6b353e\", false, 100);   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","parameters":[]},"playHelicopter":{"body":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                               //console.log(\"playHelicopter\");\n                                // #1:\n                                //this.audioAPI.playSound(\"/sas/assets/af90534a\", false, 100);\n                                //#2:\n                                this.audioAPI.playSound(\"/sas/assets/dc81768a\", false, 100);   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","parameters":[]},"playMissileLaunch":{"body":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                               console.log(\"playMissileLaunch\");\n                                // #1:\n                                //this.audioAPI.playSound(\"/sas/assets/744acf2e\", false, 100);\n                                // #2:\n                                //this.audioAPI.playSound(\"/sas/assets/4334801b\", false, 100);\n                                // #3:\n                                //this.audioAPI.playSound(\"/sas/assets/10b027bd\", false, 100);\n                                // #4:\n                                //this.audioAPI.playSound(\"/sas/assets/94d508e3\", false, 100);\n                                // #5:\n                                this.audioAPI.playSound(\"/sas/assets/263beb86\", false, 100);   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","parameters":[]},"playMotorIdle":{"body":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                               console.log(\"playMotorIdle\");\n                                this.audioAPI.playSound(\"\", false, 100);   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","parameters":[]},"playMotorRunning":{"body":"\n\n\n\n\n\n\n       //console.log(\"playMotorRunning\");\n          // #1:\n          //this.audioAPI.playSound(\"/sas/assets/2cb9fef9\", false, 100);\n          // #2:\n          //this.audioAPI.playSound(\"/sas/assets/994ee0c8\", false, 100);\n          // #3:\n          var sound = vwf.callMethod(this.id, \"getSound\", [\"/sas/assets/c253157d\"]);\n\n          if (sound == null || !sound.isPlaying())\n          {\n              this.audioAPI.playSound(\"/sas/assets/c253157d\", false, 100);\n          } \n\n\n\n","parameters":[]},"playMotorSputtering":{"body":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                               console.log(\"playMotorSputtering\");\n                                this.audioAPI.playSound(\"\", false, 100);   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","parameters":[]},"playWarning":{"body":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                               console.log(\"playWarning\");\n                                this.audioAPI.playSound(\"\", false, 100);   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","parameters":[]},"ready":{"body":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                                                                 // The scene is now completely loaded. This will fire on each client when the client joins, so it`s not a great place to create objects\n                                this.Scene.unbind(\"keyDown\",this._kd);\n                                this.Scene.unbind(\"keyUp\",this._ku);\n                                var self = this;\n                                this._kd = function(e,d){self._keyDown(e,d)};\n                                this._ku = function(e,d){self._keyUp(e,d)};\n                                this.Scene.bind(\"keyDown\",this._kd);\n                                this.Scene.bind(\"keyUp\",this._ku);                                                     \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","parameters":[]},"tick":{"body":"var leader_pos = this.transformAPI.getWorldPosition();\n    var leader_projection = this.transformAPI.localToGlobal(-300, 0, 0);\n\n    this.broadcast(\"facLeaderInput\", [leader_projection], 500);\n    this.broadcast(\"facPeerInput\", [leader_pos, this.id], 50);\n\n    var waterDepth = 20;\n    var hullThick = 2.2;\n    var depthFloor = waterDepth + hullThick;\n    // The tick function is called 20 times every second.\n    // Write code here to animate over time\n    this.physicsAPI.addForceAtCenter(0, 0, 9.8);\n    this.physicsAPI.wake();\n    var mass = this.physicsAPI.getMass();\n    var corners = [\n        [this._length / 2, this.width / 2, 0],\n        [this._length / 2, -this.width / 2, 0],\n        [-this._length / 2, this.width / 2, 0],\n        [-this._length / 2, -this.width / 2, 0],\n    ];\n\n    this.counter++;\n    var rocking = -mass / 5;\n    this.physicsAPI.addForceOffset([0, 0, rocking], [Math.sin(this.counter / 30) * this._length, Math.cos(this.counter / 15) * this.width, 0]);\n    this.physicsAPI.addForceOffset([0, 0, rocking], [Math.cos(this.counter / 10) * this._length, Math.sin(this.counter / 10) * this.width, 0]);\n\n    for (var i = 0; i < corners.length; i++)\n    {\n        var corner = corners[i];\n        var worldCorner = this.transformAPI.localToGlobal(corner);\n        var depth = depthFloor - worldCorner[2];\n        depth = Math.min(depth, 5);\n        if (depth > 0)\n        {\n\n            this.physicsAPI.addForceOffset([0, 0, depth * mass * 9.8 / 3], Vec3.subtract(worldCorner, this.transformAPI.getPosition(), []));\n            var vel = this.physicsAPI.getLinearVelocity();\n            var torque = this.physicsAPI.getAngularVelocity();\n            //    vel[0] *= .6;\n            // vel[1] *= .6;\n            vel[2] *= 1 - depth / 50;\n\n            torque[0] *= 1 - depth / 100;\n            torque[1] *= 1 - depth / 100;\n            torque[2] *= 1 - depth / 100;\n            this.physicsAPI.setAngularVelocity(torque);\n            this.physicsAPI.setLinearVelocity(vel);\n        }\n        //  if (depth < 0)\n        {\n\n            this.physicsAPI.addForceOffset([0, 0, -mass * 9.8 / 4], Vec3.subtract(worldCorner, this.transformAPI.getPosition(), []));\n            var vel = this.physicsAPI.getLinearVelocity();\n            var torque = this.physicsAPI.getAngularVelocity();\n        }\n\n    }\n\n    var depth = depthFloor - this.transformAPI.getPosition()[2]\n    depth = Math.min(depth, 5);\n    if (depth > 0)\n    {\n\n        var vel = this.physicsAPI.getLinearVelocity();\n        vel = this.transformAPI.globalToLocalRotation(vel);\n        vel[0] *= 1.0 - depth / 100;\n        vel[1] *= 1.0 - depth / 30;\n        vel = this.transformAPI.localToGlobalRotation(vel);\n        this.physicsAPI.setLinearVelocity(vel);\n\n    }\n\n    if (this._keysDown.indexOf(\"W\") !== -1)\n    {\n        this.consumeFuel();\n        if (this.currentState.name === this.states[\"out_of_gas\"].name)\n        {\n            console.log(\"(W) out of gas!\");\n            this.activateState(\"out_of_gas\");\n        }\n        else\n        {\n            var force = this.transformAPI.localToGlobal(-10 * mass, 0, 0);\n            this.physicsAPI.addForceAtCenter(force[0], force[1], force[2]);\n            this.playMotorRunning();\n            switch (this.FACMovementDirection())\n            {\n                case \"approaching\":\n                    this.activateState(\"approaching\");\n                    break;\n                case \"idle\":\n                    this.activateState(\"idle\");\n                    break;\n                case \"moving_away\":\n                    this.activateState(\"moving_away\");\n                    break;\n            }\n        }\n    }\n    if (this._keysDown.indexOf(\"S\") !== -1)\n    {\n        this.consumeFuel();\n        if (this.currentState.name === this.states[\"out_of_gas\"].name)\n        {\n            console.log(\"(S) out of gas!\");\n            this.activateState(\"out_of_gas\");\n        }\n        else\n        {\n            var force = this.transformAPI.localToGlobal(10 * mass, 0, 0);\n            this.physicsAPI.addForceAtCenter(force[0], force[1], force[2]);\n            this.playMotorRunning();\n            switch (this.FACMovementDirection())\n            {\n                case \"approaching\":\n                    this.activateState(\"approaching\");\n                    break;\n                case \"idle\":\n                    this.activateState(\"idle\");\n                    break;\n                case \"moving_away\":\n                    this.activateState(\"moving_away\");\n                    break;\n            }\n        }\n    }\n    var vel = this.physicsAPI.getLinearVelocity();\n    vel = this.transformAPI.globalToLocalRotation(vel);\n    var speedTorqueFactor = (Math.abs(vel[0]) / 3);\n    if (this._keysDown.indexOf(\"A\") !== -1)\n    {\n\n        this.physicsAPI.addTorque(0, 0, speedTorqueFactor * mass * 3);\n        var force = this.transformAPI.localToGlobal(speedTorqueFactor * mass, 0, 0);\n        this.physicsAPI.addTorque(force);\n    }\n    if (this._keysDown.indexOf(\"D\") !== -1)\n    {\n        this.physicsAPI.addTorque(0, 0, -speedTorqueFactor * mass * 3);\n        var force = this.transformAPI.localToGlobal(-speedTorqueFactor * mass, 0, 0);\n        this.physicsAPI.addTorque(force);\n    }\n    if (this._keysDown.indexOf(\" \") !== -1)\n    {\n        if (this.rockets > 0)\n        {\n            this.currentState = this.states[\"fire_rocket\"];\n        }\n        else\n        {\n            this.currentState = this.states[\"moving_away\"];\n        }\n    }","parameters":[]},"verifyCamera":{"body":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                     return true;\n\n                        var cam = this.Scene.clientAPI.getCameraForClient(vwf.client());\n\n                        if (!cam || cam.id != this.controllingCamera) return false;\n                        return true; \n\n\n\n\n\n\n\n\n\n\n","parameters":[]}},"properties":{"DisplayName":"FAC_MASTER","EditorData":{"controllingCamera":{"displayname":"Controlling Camera","property":"controllingCamera","type":"nodeid"}},"___physics_activation_state":4,"___physics_angular_velocity":[-0.0205620388669852,0.137373529226051,0.000692897715996474],"___physics_damping":0.4,"___physics_deactivation_time":0,"___physics_enabled":true,"___physics_linear_velocity":[-0.115731220145219,0.602527779520543,-0.000487978426872444],"___physics_mass":8051.2,"___physics_velocity_angular":[0.02765009179711342,-0.1445750892162323,0.00038580354885198176],"___physics_velocity_linear":[-0.01912243291735649,0.10449027270078659,-0.0032515337225049734],"_keysDown":[],"_length":7,"activeState":"active","bullets_50_cal":1000,"controllingCamera":"SandboxCamera-vwf-N373ec60b","counter":14602,"currentState":null,"editorData":{"controllingCamera":{"displayName":"controllingCamera","type":"nodeID"}},"explosionDef":{"continues":"/sas/assets/d3402bc3","properties":{"transform":[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]}},"fuel":100,"fuelConsumptionRate":0.01,"health":100,"height":1.2,"hostile":true,"hullStrength":100,"materialDef":{"alpha":1,"ambient":{"b":1,"g":1,"r":1},"blendMode":1,"color":{"a":1,"b":1,"g":1,"r":1},"depthtest":true,"depthwrite":true,"emit":{"b":0,"g":0,"r":0},"fog":true,"layers":[{"alpha":1,"blendMode":0,"mapInput":0,"mapTo":1,"offsetx":0,"offsety":0,"rot":0,"scalex":1,"scaley":1,"src":"checker.jpg"}],"metal":false,"reflect":0.8,"shadeless":false,"shading":true,"shadow":true,"shininess":15,"side":0,"specularColor":{"b":0.57735,"g":0.57735,"r":0.57735},"specularLevel":1,"type":"phong","vertexColors":false,"wireframe":false},"missileDef":{"continues":"/sas/assets/d62299d5","properties":{"transform":[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]}},"owner":"ADLteam","physicsAPI":{},"rangeToTarget":1000,"rockets":5,"sourceAssetId":"1ad6adad","states":{"approaching":{"name":"approaching","properties":{},"transitionFunction":"approachingTransition","transitions":["approaching","moving_away","idle","out_of_gas","fire_rocket","colliding","defeated"],"updateFunction":"approachingUpdate"},"colliding":{"name":"colliding","properties":{},"transitionFunction":"collidingTransition","transitions":["colliding","defeated"],"updateFunction":"collidingUpdate"},"defeated":{"name":"defeated","properties":{},"transitionFunction":"defeatedTransition","transitions":["defeated"],"updateFunction":"defeatedUpdate"},"fire_rocket":{"name":"fire_rocket","properties":{},"transitionFunction":"fire_rocketTransition","transitions":["approaching","fire_rocket","moving_away","idle","colliding","defeated"],"updateFunction":"fire_rocketUpdate"},"idle":{"name":"idle","properties":{},"transitionFunction":"idleTransition","transitions":["moving_away","idle","out_of_gas","colliding","defeated"],"updateFunction":"idleUpdate"},"moving_away":{"name":"moving_away","properties":{},"transitionFunction":"moving_awayTransition","transitions":["moving_away","idle","out_of_gas","colliding","defeated"],"updateFunction":"moving_awayUpdate"},"out_of_gas":{"name":"out_of_gas","properties":{},"transitionFunction":"out_of_gasTransition","transitions":["out_of_gas","colliding","defeated"],"updateFunction":"out_of_gasUpdate"}},"transform":[-0.5405697822570801,-0.8246092200279236,0,0,0.8246092200279236,-0.5405697822570801,0,0,0,0,0.9860000014305115,0,54.75,24.5,20.5,1],"type":"Primitive","visible":false,"warningsReceived":0,"width":2.5,"worldTransform":[-0.5405697822570801,-0.8246092200279236,0,0,0.8246092200279236,-0.5405697822570801,0,0,0,0,0.9860000014305115,0,54.75,24.5,20.5,1]},"random":{"c":1,"s0":0.134394,"s1":0.921757,"s2":0.045269},"sequence":0,"source":"vwf/model/threejs/box.js","type":"subDriver/threejs","name":"N8c8d3473"},{"children":{"N310ad060":{"events":{"pointerClick":{"body":"\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n                                            this.parent.launchMissile()                   ","parameters":["                                                              eventData","                                                              nodeData                                                              "]}},"extends":"box2.vwf","properties":{"DisplayName":"MissileLauncher","___assetServerOriginalID":"N8c4837dd","___physics_activation_state":1,"___physics_deactivation_time":0,"___physics_velocity_angular":[0,0,0],"___physics_velocity_linear":[0,0,0],"height":1.61,"materialDef":{"alpha":1,"ambient":{"b":1,"g":1,"r":1},"color":{"a":1,"b":1,"g":1,"r":1},"emit":{"b":0,"g":0,"r":0},"layers":[{"alpha":1,"blendMode":0,"mapInput":0,"mapTo":1,"offsetx":0,"offsety":0,"rot":0,"scalex":1,"scaley":1,"src":"checker.jpg"}],"reflect":0.8,"shadeless":false,"shadow":true,"shininess":15,"specularColor":{"b":0.57735,"g":0.57735,"r":0.57735},"specularLevel":1},"owner":"ADLteam","transform":[0.08618500083684921,-0.022557999938726425,0.9960219860076904,0,0.0010019999463111162,-0.9997419714927673,-0.02273000031709671,0,0.9962769746780396,0.002956999931484461,-0.08614099770784378,0,1,0,1.5,1],"type":"Primitive","visible":false,"width":1.36},"random":{"c":1,"s0":0.778299,"s1":0.286493,"s2":0.191579},"sequence":0,"source":"vwf/model/threejs/box.js","type":"subDriver/threejs","name":"N310ad060"},"N6d2178e":{"extends":"asset.vwf","properties":{"DisplayName":"./vwfdatamanager.svc/DataFile/Navy/AttackSpeedBoat.dae1","___assetServerOriginalID":"N958e2662","___physics_activation_state":1,"___physics_deactivation_time":0,"___physics_velocity_angular":[0,0,0],"___physics_velocity_linear":[0,0,0],"materialDef":{"alpha":1,"ambient":{"b":0.584,"g":0.584,"r":0.584},"blendMode":1,"color":{"b":1,"g":1,"r":1},"depthtest":true,"depthwrite":true,"emit":{"b":0,"g":0,"r":0},"fog":true,"layers":[{"alpha":1,"mapInput":0,"mapTo":1,"offsetx":0,"offsety":0,"scalex":1,"scaley":1,"src":"/sas/assets/7e6084c4"}],"metal":false,"reflect":0.001,"shading":true,"shininess":0.004002,"side":0,"specularColor":{"b":0,"g":0,"r":0},"specularLevel":1,"type":"phong","vertexColors":false,"wireframe":false},"owner":"ADLteam","transform":[-9.999999974752427e-7,1,-9.999999974752427e-7,0,-1.0000009536743164,-9.999999974752427e-7,-9.999999974752427e-7,0,-9.999999974752427e-7,0,1,0,0.5,0,-0.5,1]},"random":{"c":1,"s0":0.375302,"s1":0.872168,"s2":0.110384},"sequence":0,"source":"/sas/assets/c1064312","type":"subDriver/threejs/asset/vnd.collada+xml","name":"N6d2178e"},"N7a366ac7":{"extends":"http://vwf.example.com/node3.vwf","properties":{"DisplayName":"enginePos","___assetServerOriginalID":"N8cf5a8e2","glyphURL":"../vwf/view/editorview/images/icons/sphere.png","owner":"ADLteam","transform":[1,0,0,0,0,1,0,0,-9.999999974752427e-7,0,1,0,3,0,-0.75,1],"transformAPI":{"COORDINATES":{"GLOBAL":"global","LOCAL":"local","PARENT":"parent"}},"worldTransform":[-0.9993908405303955,-0.034878235310316086,0.001217974815517664,0,0.03489949554204941,-0.9987820386886597,0.034878235310316086,0,9.993908633987303e-7,0.034899529069662094,0.9993908405303955,0,-2.9981725215911865,49.36919021606445,19.75411033630371,1]},"random":{"c":1,"s0":0.022454,"s1":0.002702,"s2":0.55584},"sequence":0,"name":"N7a366ac7"},"Nd6bd2c89":{"extends":"box2.vwf","properties":{"DisplayName":"box7","___assetServerOriginalID":"N83e3ec00","___physics_activation_state":1,"___physics_deactivation_time":0,"___physics_velocity_angular":[0,0,0],"___physics_velocity_linear":[0,0,0],"_length":3.45,"castShadows":false,"height":1.13,"materialDef":{"alpha":0,"ambient":{"b":1,"g":1,"r":1},"blendMode":1,"color":{"a":0,"b":1,"g":1,"r":1},"depthtest":true,"depthwrite":true,"emit":{"b":0,"g":0,"r":0},"fog":true,"layers":[],"metal":false,"reflect":0.8,"shadeless":false,"shading":true,"shadow":true,"shininess":15,"side":0,"specularColor":{"b":0.577350269189626,"g":0.577350269189626,"r":0.577350269189626},"specularLevel":1,"type":"phong","vertexColors":false,"wireframe":false},"owner":"ADLteam","renderDepth":7,"transform":[1,0,9.999999974752427e-7,0,0,1,0,0,0,0,1,0,1,0,-0.2499990016222,1],"type":"Primitive","width":2.18},"random":{"c":1,"s0":0.198099663946778,"s1":0.0275812551844865,"s2":0.352169041289017},"sequence":0,"source":"vwf/model/threejs/box.js","type":"subDriver/threejs","name":"Nd6bd2c89"}},"extends":"box2.vwf","methods":{"FACMovementDirection":{"body":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                        // set equal to \"\" after adding calculations:\n                                        var movement = \"closing\";\n                                        // Perform calculations to determine approaching or moving away states:\n                                        //     movement = \"closing\" if distance to target is getting smaller\n                                        //     movement = \"none\" if distance to target hasn't changed\n                                        //     movement = \"increasing\" if distance to target is getting larger\n                                        switch (movement)\n                                        {\n                                            case \"closing\":\n                                                this.currentState = this.states[\"approaching\"];\n                                                return \"approaching\";\n                                            case \"none\":\n                                                this.currentState = this.states[\"idle\"];\n                                                return \"idle\";\n                                            case \"increasing\":\n                                                this.currentState = this.states[\"moving_away\"];\n                                                return \"moving_away\";\n                                        }    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","parameters":[]},"_keyDown":{"body":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                        if (!this.verifyCamera()) return;\n                                        if (this.currentState === null)\n                                        {\n                                            console.log(\"Set initial state\");\n                                            this.currentState = this.states[\"approaching\"];\n                                        }\n                                        if (this._keysDown.indexOf(e.key.char) == -1)\n                                        {\n                                            this._keysDown.push(e.key.char);\n                                        }    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","parameters":["e","d"]},"_keyUp":{"body":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                        if (!this.verifyCamera()) return;\n                                        if (this._keysDown.indexOf(e.key.char) !== -1)\n                                        {\n                                            this._keysDown.splice(this._keysDown.indexOf(e.key.char), 1);\n                                        }\n                                        if (e.key.char == \" \")\n                                        {\n                                            if (this.rockets > 0)\n                                            {\n                                                this.activateState(\"fire_rocket\");\n                                                console.log(\"rockets: \" + this.rockets);\n                                            }\n                                        }    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","parameters":["e","d"]},"activateState":{"body":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                        //console.log(\"activateState\");\n                                        var state = this.states[statename];\n\n                                        if (this.currentState.transitions.indexOf(statename) == -1)\n                                        {\n                                            console.log(\"invalid transition!\");\n                                            return;\n                                        }\n\n                                        if (state.transitionFunction)\n                                            this[state.transitionFunction](this.currentState);\n\n                                        this.currentState = state;\n\n                                        for (var i in state.properties)\n                                        {\n                                            console.log(state.properties[i]);\n                                            this[i] = state.properties[i];\n                                        }    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","parameters":["statename"]},"approachingTransition":{"body":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                     //console.log(\"approachingTransition\");\n                        this.approachingUpdate(this.currentState); \n\n\n\n\n\n\n\n\n\n\n","parameters":[]},"approachingUpdate":{"body":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                     //console.log(\"approachingUpdate\");\n                        this.currentState = this.states[\"approaching\"]; \n\n\n\n\n\n\n\n\n\n\n","parameters":["statename"]},"collidingTransition":{"body":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                        console.log(\"collidingTransition\");\n                                        this.currentState = this.states[\"colliding\"];    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","parameters":[]},"collidingUpdate":{"body":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                        console.log(\"collidingUpdate\");\n                                        this.currentState = this.states[\"colliding\"];    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","parameters":["statename"]},"consumeFuel":{"body":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                        if (this.fuel <= 0.0)\n                                        {\n                                            this.currentState = this.states[\"out_of_gas\"];\n                                        }\n                                        else\n                                        {\n                                            this.fuel = this.fuel - this.fuelConsumptionRate;\n                                            console.log(\"fuel: \" + this.fuel);\n                                        }    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","parameters":[]},"defeatedTransition":{"body":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                        console.log(\"defeatedTransition\");\n                                        this.currentState = this.states[\"defeated\"];    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","parameters":[]},"defeatedUpdate":{"body":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                        console.log(\"defeatedUpdate\");\n                                        this.currentState = this.states[\"defeated\"];    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","parameters":["statename"]},"facLeaderInput":{"body":"//console.log(\"facLeaderInput Received: \" + JSON.stringify(args));\n\n    if (this.facLeaderMovementCandidate.length == 0)\n    {\n        this.facLeaderMovementCandidate = args;\n    }\n    else\n    {\n        console.log(\"weighted leader input\");\n        \n        var current_pos = this.facLeaderMovementCandidate[0];\n        var target_pos = args[0];\n\n        current_pos = MATH.scaleVec3(current_pos, 1000);\n        target_pos = MATH.scaleVec3(target_pos, 1);\n\n        var new_target = MATH.addVec3(current_pos, target_pos);\n        new_target = MATH.scaleVec3(new_target, 1 / 1001);\n        this.facLeaderMovementCandidate = [new_target];\n    }","parameters":["args"]},"facPeerInput":{"body":"console.log(\"facPeerInput Received: \" + args);\n\n    if (args[1] == this.id) return;\n\n    if (this.facPeerMovementCandidate.length > 0)\n    {\n        var current_pos = this.transformAPI.getPosition();\n        var last_pos = this.facPeerMovementCandidate;\n        var incoming_pos = args[0];\n\n        if (MATH.distanceVec3(current_pos, incoming_pos) < MATH.distanceVec3(current_pos, last_pos))\n        {\n            this.facPeerMovementCandidate = args;\n        }\n    }\n    else\n    {\n        this.facPeerMovementCandidate = args;\n    }","parameters":["args"]},"fire_rocketTransition":{"body":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                        console.log(\"fire_rocketTransition\");\n                                        this.fire_rocketUpdate(this.currentState);    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","parameters":[]},"fire_rocketUpdate":{"body":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                        console.log(\"fire_rocketUpdate\");\n                                        this.launchMissile();\n                                        this.playMissileLaunch();\n                                        this.rockets = this.rockets - 1;\n                                        if (this.rockets > 0)\n                                        {\n                                            this.currentState = this.states[\"fire_rocket\"];\n                                            console.log(\"rocketUpdate state fire \");\n                                        }\n                                        else\n                                        {\n                                            this.currentState = this.states[\"idle\"];\n                                            console.log(\"rocketUpdate state idle\");\n                                        }    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","parameters":["statename"]},"hit":{"body":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                     var pos = args[0];\n                                        var force = args[1];\n                                        if (typeof force == 'number')\n                                            this.health -= force;\n                                        else\n                                            this.health -= 101;\n\n                                        if (this.health < 0)\n                                        {\n                                            var def = this.explosionDef;\n                                            var pos = this.transformAPI.getWorldPosition();\n                                            def.properties.transform[12] = pos[0];\n                                            def.properties.transform[13] = pos[1];\n                                            def.properties.transform[14] = pos[2];\n                                            def.properties.fuse = 1;\n                                            vwf.createChild(vwf.application(), GUID(), _DataManager.getCleanNodePrototype(def), null);\n                                            this.parent.children.delete(this);\n                                        } \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","parameters":["args"]},"idleTransition":{"body":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                       console.log(\"idleTransition\");\n                                        this.currentState = this.states[\"idle\"];   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","parameters":[]},"idleUpdate":{"body":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                       console.log(\"idleUpdate\");\n                                        this.currentState = this.states[\"idle\"];   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","parameters":["statename"]},"launchMissile":{"body":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                 var def = this.missileDef;\n                                    var pos = this.children_by_name.MissileLauncher.worldTransform.slice();\n\n                                    pos[14] += 0;\n                                    def.properties.transform = pos;\n                                   // def.properties.___physics_velocity_linear = this.physicsAPI.getLinearVelocity();\n                                    def.properties.fired = true;\n                                    var now = performance.now();\n                                    // console.profile(\"launch\");\n                                    vwf.createChild(vwf.application(), GUID(), _DataManager.getCleanNodePrototype(def), null, function()\n                                    {\n                                        console.log(performance.now() - now);\n                                    }); \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","parameters":[]},"moveBackwards":{"body":"//console.log(\"move backwards\");\n\n    var mass = this.physicsAPI.getMass();\n\n    this.consumeFuel();\n    if (this.currentState && this.currentState.name === this.states[\"out_of_gas\"].name)\n    {\n        console.log(\"(S) out of gas!\");\n        this.activateState(\"out_of_gas\");\n    }\n    else\n    {\n        var force = this.transformAPI.localToGlobal(10 * mass, 0, 0);\n        this.physicsAPI.addForceAtCenter(force[0], force[1], force[2]);\n        this.playMotorRunning();\n        switch (this.FACMovementDirection())\n        {\n            case \"approaching\":\n                this.activateState(\"approaching\");\n                break;\n            case \"idle\":\n                this.activateState(\"idle\");\n                break;\n            case \"moving_away\":\n                this.activateState(\"moving_away\");\n                break;\n        }\n    }","parameters":[]},"moveForward":{"body":"//console.log(\"move forward\");\n\n    var mass = this.physicsAPI.getMass();\n\n    this.consumeFuel();\n    if (this.currentState && this.currentState.name === this.states[\"out_of_gas\"].name)\n    {\n        console.log(\"(W) out of gas!\");\n        this.activateState(\"out_of_gas\");\n    }\n    else\n    {\n        var force = this.transformAPI.localToGlobal(-10 * mass, 0, 0);\n        this.physicsAPI.addForceAtCenter(force[0], force[1], force[2]);\n        this.playMotorRunning();\n        switch (this.FACMovementDirection())\n        {\n            case \"approaching\":\n                this.activateState(\"approaching\");\n                break;\n            case \"idle\":\n                this.activateState(\"idle\");\n                break;\n            case \"moving_away\":\n                this.activateState(\"moving_away\");\n                break;\n        }\n    }","parameters":["mass"]},"moveLeft":{"body":"//console.log(\"Move Left\");\n    var mass = this.physicsAPI.getMass();\n\n    var vel = this.physicsAPI.getLinearVelocity();\n    vel = this.transformAPI.globalToLocalRotation(vel);\n    var speedTorqueFactor = (Math.abs(vel[0]) / 3);\n\n    this.physicsAPI.addTorque(0, 0, peerValue * speedTorqueFactor * mass * 3);\n    var force = this.transformAPI.localToGlobal(peerValue * speedTorqueFactor * mass, 0, 0);\n    this.physicsAPI.addTorque(force);","parameters":["peerValue"]},"moveRight":{"body":"//console.log(\"move Right\");\n    var mass = this.physicsAPI.getMass();\n\n    var vel = this.physicsAPI.getLinearVelocity();\n    vel = this.transformAPI.globalToLocalRotation(vel);\n    var speedTorqueFactor = (Math.abs(vel[0]) / 3);\n\n    this.physicsAPI.addTorque(0, 0, peerValue * -speedTorqueFactor * mass * 3);\n    var force = this.transformAPI.localToGlobal(peerValue * -speedTorqueFactor * mass, 0, 0);\n    this.physicsAPI.addTorque(force);","parameters":["peerValue"]},"moveToAvoidPeer":{"body":"//console.log(\"peer position: \" + args[0]);\n    //console.log(\"sender: \" + args[1]);\n\n    if (this.facPeerMovementCandidate[1] == this.id) return;\n\n    var max_distance = 50;\n    var mass = this.physicsAPI.getMass();\n\n    // Get leader world position\n    var leader_pos = this.facPeerMovementCandidate[0];\n\n    // Get my world position\n    var follower_pos = this.transformAPI.getWorldPosition();\n\n    // Get the distance between me and the leader\n    var distance = MATH.distanceVec3(leader_pos, follower_pos);\n    //console.log(\"facFollowBehavior: distance: \" + distance);\n\n    // If there is a big gap, go towards leader\n    if (distance < max_distance)\n    {\n        var direction = MATH.subVec3(follower_pos, leader_pos);\n        //console.log(\"diff: \" + direction);\n\n        direction[2] = 0;\n\n        var norm_direction = MATH.toUnitVec3(direction);\n\n        norm_direction = this.transformAPI.globalToLocalRotation(norm_direction);\n\n        if (norm_direction[1] > 0)\n        {\n            this.moveRight(.2);\n        }\n        else\n        {\n            this.moveLeft(.2);\n        }\n    }\n\n    // Go forward\n    var force = this.transformAPI.localToGlobalRotation(-5 * mass, 0, 0);\n    this.physicsAPI.addForceAtCenter(force);\n    this.playMotorRunning();\n\n    return;","parameters":[]},"moveTowardLeader":{"body":"var max_distance = 30;\n    var mass = this.physicsAPI.getMass();\n\n    // Get leader world position\n    var leader_pos = this.facLeaderMovementCandidate[0];\n\n    // Get my world position\n    var follower_pos = this.transformAPI.getWorldPosition();\n\n    // Get the distance between me and the leader\n    var distance = MATH.distanceVec3(leader_pos, follower_pos);\n    //console.log(\"facFollowBehavior: distance: \" + distance);\n\n    // If there is a big gap, go towards leader\n    if (distance > max_distance)\n    {\n        // Get the direction to the leader\n        var direction = MATH.subVec3(follower_pos, leader_pos);\n        //console.log(\"direction: \" + direction);\n\n        // We're not worried about the Z dimension\n        direction[2] = 0;\n\n        // Normalize the vector for the direction\n        var norm_direction = MATH.toUnitVec3(direction);\n\n        // Rotate the global normal direction to the local normal direction\n        norm_direction = this.transformAPI.globalToLocalRotation(norm_direction);\n\n        // Turn towards the leader\n        // Because the model forward is x, anything with a positive y is to the model's left\n        if (norm_direction[1] > 0)\n        {\n            this.moveLeft(1);\n        }\n        else\n        {\n            this.moveRight(1);\n        }\n\n        // Go forward\n        var force = this.transformAPI.localToGlobalRotation(-10 * mass, 0, 0);\n        this.physicsAPI.addForceAtCenter(force);\n        this.playMotorRunning();\n    }\n\n    return;\n\n    if (args[0].indexOf(\" \") !== -1)\n    {\n        if (this.rockets > 0)\n        {\n            this.currentState = this.states[\"fire_rocket\"];\n        }\n        else\n        {\n            this.currentState = this.states[\"moving_away\"];\n        }\n    }","parameters":[]},"movementDecision":{"body":"//console.log(\"movementDecision...\");\n\n    if (this.facPeerMovementCandidate.length > 0)\n    {\n        // Move to avoid peer, which trumps\n        this.moveToAvoidPeer();\n\n        // Clear movement candidates\n        this.facPeerMovementCandidate = [];\n        this.facLeaderMovementCandidate = [];\n\n        return;\n    }\n    else\n    {\n        console.log(\"NOT MOVING AWAY FROM PEER\");\n        console.log(\"movement candidate input:\" + this.facLeaderMovementCandidate);\n        if (this.facLeaderMovementCandidate.length < 0)\n        {\n            // No input to move on\n            return;\n        }\n        else\n        {\n\n            console.log(\"move toward leader\");\n            // Move toward leader \n            this.moveTowardLeader();\n        }\n    }","parameters":[]},"moving_awayTransition":{"body":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                       console.log(\"moving_awayTransition\");\n                                        this.moving_awayUpdate(this.currentState);   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","parameters":[]},"moving_awayUpdate":{"body":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                       console.log(\"moving_awayUpdate\");\n                                        this.currentState = this.states[\"moving_away\"];   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","parameters":["statename"]},"out_of_gasTransition":{"body":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                       console.log(\"out_of_gasTransition\");\n                                        //this.currentState = this.states[\"out_of_gas\"];\n                                        this.out_of_gasUpdate(this.currentState);   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","parameters":[]},"out_of_gasUpdate":{"body":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                       console.log(\"out_of_gasUpdate\");\n                                        console.log(statename);\n                                        if (this.fuel <= 0)\n                                        {\n                                            this.currentState = this.states[\"out_of_gas\"];\n                                            console.log(\"out_of_gasUpdate now out_of_gas state\");\n                                        }\n                                        else if (this.hullStrength <= 0)\n                                        {\n                                            this.currentState = this.states[\"defeated\"];\n                                            console.log(\"out_of_gasUpdate now defaeted state\");\n                                        }   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","parameters":["statename"]},"playBulletHittingMetal":{"body":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                       console.log(\"playBulletHittingMetal\");\n                                        this.audioAPI.playSound(\"\", false, 100);   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","parameters":[]},"playBulletHittingWater":{"body":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                       console.log(\"playBulletHittingWater\");\n                                        this.audioAPI.playSound(\"\", false, 100);   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","parameters":[]},"playBulletWhizzingBy":{"body":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                       console.log(\"playBulletWhizzingBy\");\n                                        this.audioAPI.playSound(\"\", false, 100);   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","parameters":[]},"playExplosion":{"body":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                       console.log(\"playExplosion\");\n                                        // #1:\n                                        //this.audioAPI.playSound(\"/sas/assets/8d358349\", false, 100);\n                                        // #2:\n                                        //this.audioAPI.playSound(\"/sas/assets/d714ebe1\", false, 100);\n                                        // #3:\n                                        this.audioAPI.playSound(\"/sas/assets/3c6b353e\", false, 100);   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","parameters":[]},"playHelicopter":{"body":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                       //console.log(\"playHelicopter\");\n                                        // #1:\n                                        //this.audioAPI.playSound(\"/sas/assets/af90534a\", false, 100);\n                                        //#2:\n                                        this.audioAPI.playSound(\"/sas/assets/dc81768a\", false, 100);   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","parameters":[]},"playMissileLaunch":{"body":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                       console.log(\"playMissileLaunch\");\n                                        // #1:\n                                        //this.audioAPI.playSound(\"/sas/assets/744acf2e\", false, 100);\n                                        // #2:\n                                        //this.audioAPI.playSound(\"/sas/assets/4334801b\", false, 100);\n                                        // #3:\n                                        //this.audioAPI.playSound(\"/sas/assets/10b027bd\", false, 100);\n                                        // #4:\n                                        //this.audioAPI.playSound(\"/sas/assets/94d508e3\", false, 100);\n                                        // #5:\n                                        this.audioAPI.playSound(\"/sas/assets/263beb86\", false, 100);   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","parameters":[]},"playMotorIdle":{"body":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                       console.log(\"playMotorIdle\");\n                                        this.audioAPI.playSound(\"\", false, 100);   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","parameters":[]},"playMotorRunning":{"body":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                 //console.log(\"playMotorRunning\");\n                    // #1:\n                    //this.audioAPI.playSound(\"/sas/assets/2cb9fef9\", false, 100);\n                    // #2:\n                    //this.audioAPI.playSound(\"/sas/assets/994ee0c8\", false, 100);\n                    // #3:\n                    var sound = vwf.callMethod(this.id, \"getSound\", [\"/sas/assets/c253157d\"]);\n\n                    if (sound == null || !sound.isPlaying())\n                    {\n                        this.audioAPI.playSound(\"/sas/assets/c253157d\", false, 100);\n                    } \n\n\n\n\n\n\n\n\n","parameters":[]},"playMotorSputtering":{"body":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                       console.log(\"playMotorSputtering\");\n                                        this.audioAPI.playSound(\"\", false, 100);   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","parameters":[]},"playWarning":{"body":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                       console.log(\"playWarning\");\n                                        this.audioAPI.playSound(\"\", false, 100);   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","parameters":[]},"ready":{"body":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                                                                         // The scene is now completely loaded. This will fire on each client when the client joins, so it`s not a great place to create objects\n                                        this.Scene.unbind(\"keyDown\",this._kd);\n                                        this.Scene.unbind(\"keyUp\",this._ku);\n                                        var self = this;\n                                        this._kd = function(e,d){self._keyDown(e,d)};\n                                        this._ku = function(e,d){self._keyUp(e,d)};\n                                        this.Scene.bind(\"keyDown\",this._kd);\n                                        this.Scene.bind(\"keyUp\",this._ku);                                                     \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","parameters":[]},"tick":{"body":"// Broadcast position to nearby peers\n    var my_position = this.transformAPI.getWorldPosition();\n    this.broadcast(\"facPeerInput\", [my_position, this.id], 50)\n\n    var waterDepth = 20;\n    var hullThick = 2.2;\n    var depthFloor = waterDepth + hullThick;\n    // The tick function is called 20 times every second.\n    // Write code here to animate over time\n    this.physicsAPI.addForceAtCenter(0, 0, 9.8);\n    this.physicsAPI.wake();\n    var mass = this.physicsAPI.getMass();\n    var corners = [\n        [this._length / 2, this.width / 2, 0],\n        [this._length / 2, -this.width / 2, 0],\n        [-this._length / 2, this.width / 2, 0],\n        [-this._length / 2, -this.width / 2, 0],\n    ];\n\n    this.counter++;\n    var rocking = -mass / 5;\n    this.physicsAPI.addForceOffset([0, 0, rocking], [Math.sin(this.counter / 30) * this._length, Math.cos(this.counter / 15) * this.width, 0]);\n    this.physicsAPI.addForceOffset([0, 0, rocking], [Math.cos(this.counter / 10) * this._length, Math.sin(this.counter / 10) * this.width, 0]);\n\n    for (var i = 0; i < corners.length; i++)\n    {\n        var corner = corners[i];\n        var worldCorner = this.transformAPI.localToGlobal(corner);\n        var depth = depthFloor - worldCorner[2];\n        depth = Math.min(depth, 5);\n        if (depth > 0)\n        {\n\n            this.physicsAPI.addForceOffset([0, 0, depth * mass * 9.8 / 3], Vec3.subtract(worldCorner, this.transformAPI.getPosition(), []));\n            var vel = this.physicsAPI.getLinearVelocity();\n            var torque = this.physicsAPI.getAngularVelocity();\n            //    vel[0] *= .6;\n            // vel[1] *= .6;\n            vel[2] *= 1 - depth / 50;\n\n            torque[0] *= 1 - depth / 100;\n            torque[1] *= 1 - depth / 100;\n            torque[2] *= 1 - depth / 100;\n            this.physicsAPI.setAngularVelocity(torque);\n            this.physicsAPI.setLinearVelocity(vel);\n        }\n        //  if (depth < 0)\n        {\n\n            this.physicsAPI.addForceOffset([0, 0, -mass * 9.8 / 4], Vec3.subtract(worldCorner, this.transformAPI.getPosition(), []));\n            var vel = this.physicsAPI.getLinearVelocity();\n            var torque = this.physicsAPI.getAngularVelocity();\n        }\n\n    }\n\n    var depth = depthFloor - this.transformAPI.getPosition()[2]\n    depth = Math.min(depth, 5);\n    if (depth > 0)\n    {\n\n        var vel = this.physicsAPI.getLinearVelocity();\n        vel = this.transformAPI.globalToLocalRotation(vel);\n        vel[0] *= 1.0 - depth / 100;\n        vel[1] *= 1.0 - depth / 30;\n        vel = this.transformAPI.localToGlobalRotation(vel);\n        this.physicsAPI.setLinearVelocity(vel);\n    }\n\n    if (this._keysDown.length == 0)\n    {\n        // No user input detected, so move based on AI\n        this.movementDecision();\n        return;\n    }\n\n    if (this._keysDown.indexOf(\"W\") !== -1)\n    {\n        this.consumeFuel();\n        if (this.currentState.name === this.states[\"out_of_gas\"].name)\n        {\n            console.log(\"(W) out of gas!\");\n            this.activateState(\"out_of_gas\");\n        }\n        else\n        {\n            var force = this.transformAPI.localToGlobal(-10 * mass, 0, 0);\n            this.physicsAPI.addForceAtCenter(force[0], force[1], force[2]);\n            this.playMotorRunning();\n            switch (this.FACMovementDirection())\n            {\n                case \"approaching\":\n                    this.activateState(\"approaching\");\n                    break;\n                case \"idle\":\n                    this.activateState(\"idle\");\n                    break;\n                case \"moving_away\":\n                    this.activateState(\"moving_away\");\n                    break;\n            }\n        }\n    }\n    if (this._keysDown.indexOf(\"S\") !== -1)\n    {\n        this.consumeFuel();\n        if (this.currentState.name === this.states[\"out_of_gas\"].name)\n        {\n            console.log(\"(S) out of gas!\");\n            this.activateState(\"out_of_gas\");\n        }\n        else\n        {\n            var force = this.transformAPI.localToGlobal(10 * mass, 0, 0);\n            this.physicsAPI.addForceAtCenter(force[0], force[1], force[2]);\n            this.playMotorRunning();\n            switch (this.FACMovementDirection())\n            {\n                case \"approaching\":\n                    this.activateState(\"approaching\");\n                    break;\n                case \"idle\":\n                    this.activateState(\"idle\");\n                    break;\n                case \"moving_away\":\n                    this.activateState(\"moving_away\");\n                    break;\n            }\n        }\n    }\n    var vel = this.physicsAPI.getLinearVelocity();\n    vel = this.transformAPI.globalToLocalRotation(vel);\n    var speedTorqueFactor = (Math.abs(vel[0]) / 10);\n    if (this._keysDown.indexOf(\"A\") !== -1)\n    {\n\n        this.physicsAPI.addTorque(0, 0, speedTorqueFactor * mass * 3);\n        var force = this.transformAPI.localToGlobal(speedTorqueFactor * mass, 0, 0);\n        this.physicsAPI.addTorque(force);\n    }\n    if (this._keysDown.indexOf(\"D\") !== -1)\n    {\n        this.physicsAPI.addTorque(0, 0, -speedTorqueFactor * mass * 3);\n        var force = this.transformAPI.localToGlobal(-speedTorqueFactor * mass, 0, 0);\n        this.physicsAPI.addTorque(force);\n    }\n    if (this._keysDown.indexOf(\" \") !== -1)\n    {\n        if (this.rockets > 0)\n        {\n            this.currentState = this.states[\"fire_rocket\"];\n        }\n        else\n        {\n            this.currentState = this.states[\"moving_away\"];\n        }\n    }","parameters":[]},"verifyCamera":{"body":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                          var cam = this.Scene.clientAPI.getCameraForClient(vwf.client());\n\n                                        if (!cam || cam.id != this.controllingCamera) return false;\n                                        return true;      \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","parameters":[]}},"properties":{"DisplayName":"FAC_SLAVE_GOOD","EditorData":{"controllingCamera":{"displayname":"Controlling Camera","property":"controllingCamera","type":"nodeid"}},"___physics_activation_state":4,"___physics_angular_velocity":[-0.0205620388669852,0.137373529226051,0.000692897715996474],"___physics_damping":0.4,"___physics_deactivation_time":0,"___physics_enabled":true,"___physics_linear_velocity":[-0.115731220145219,0.602527779520543,-0.000487978426872444],"___physics_mass":8051.2,"___physics_velocity_angular":[0.02765009179711342,-0.1445750892162323,0.00038580354885198176],"___physics_velocity_linear":[-0.01912243291735649,0.10449027270078659,-0.0032515337225049734],"_keysDown":[],"_length":7,"activeState":"active","bullets_50_cal":1000,"controllingCamera":"SandboxCamera-vwf-N373ec60b","counter":14602,"currentState":null,"editorData":{"controllingCamera":{"displayName":"controllingCamera","type":"nodeID"}},"explosionDef":{"continues":"/sas/assets/d3402bc3","properties":{"transform":[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]}},"facLeaderMovementCandidate":[],"facPeerMovementCandidate":[],"fuel":100,"fuelConsumptionRate":0.01,"health":100,"height":1.2,"hostile":true,"hullStrength":100,"materialDef":{"alpha":1,"ambient":{"b":1,"g":1,"r":1},"blendMode":1,"color":{"a":1,"b":1,"g":1,"r":1},"depthtest":true,"depthwrite":true,"emit":{"b":0,"g":0,"r":0},"fog":true,"layers":[{"alpha":1,"blendMode":0,"mapInput":0,"mapTo":1,"offsetx":0,"offsety":0,"rot":0,"scalex":1,"scaley":1,"src":"checker.jpg"}],"metal":false,"reflect":0.8,"shadeless":false,"shading":true,"shadow":true,"shininess":15,"side":0,"specularColor":{"b":0.57735,"g":0.57735,"r":0.57735},"specularLevel":1,"type":"phong","vertexColors":false,"wireframe":false},"missileDef":{"continues":"/sas/assets/d62299d5","properties":{"transform":[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]}},"owner":"ADLteam","physicsAPI":{},"rangeToTarget":1000,"rockets":5,"sourceAssetId":"f997b70e","states":{"approaching":{"name":"approaching","properties":{},"transitionFunction":"approachingTransition","transitions":["approaching","moving_away","idle","out_of_gas","fire_rocket","colliding","defeated"],"updateFunction":"approachingUpdate"},"colliding":{"name":"colliding","properties":{},"transitionFunction":"collidingTransition","transitions":["colliding","defeated"],"updateFunction":"collidingUpdate"},"defeated":{"name":"defeated","properties":{},"transitionFunction":"defeatedTransition","transitions":["defeated"],"updateFunction":"defeatedUpdate"},"fire_rocket":{"name":"fire_rocket","properties":{},"transitionFunction":"fire_rocketTransition","transitions":["approaching","fire_rocket","moving_away","idle","colliding","defeated"],"updateFunction":"fire_rocketUpdate"},"idle":{"name":"idle","properties":{},"transitionFunction":"idleTransition","transitions":["moving_away","idle","out_of_gas","colliding","defeated"],"updateFunction":"idleUpdate"},"moving_away":{"name":"moving_away","properties":{},"transitionFunction":"moving_awayTransition","transitions":["moving_away","idle","out_of_gas","colliding","defeated"],"updateFunction":"moving_awayUpdate"},"out_of_gas":{"name":"out_of_gas","properties":{},"transitionFunction":"out_of_gasTransition","transitions":["out_of_gas","colliding","defeated"],"updateFunction":"out_of_gasUpdate"}},"transform":[-0.9993908405303955,-0.034878235310316086,0.001217974815517664,0,0.03489949554204941,-0.9987820386886597,0.034878235310316086,0,0,0.03489949554204941,0.9993908405303955,0,0,49.5,20.5,1],"type":"Primitive","visible":false,"warningsReceived":0,"width":2.5,"worldTransform":[-0.9993908405303955,-0.034878235310316086,0.001217974815517664,0,0.03489949554204941,-0.9987820386886597,0.034878235310316086,0,0,0.03489949554204941,0.9993908405303955,0,0,49.5,20.5,1]},"random":{"c":1,"s0":0.134394,"s1":0.921757,"s2":0.045269},"sequence":0,"source":"vwf/model/threejs/box.js","type":"subDriver/threejs","name":"Nd3f24a3c"},{"DisplayName":null,"glyphURL":"../vwf/view/editorview/images/icons/scene.png","simTime":0,"placemarks":{"Origin":[0,0,0]},"navmode":"none","sunColor":[1,0.945098039215686,0.6],"sunDirection":[1.55,-0.2,1],"sunIntensity":1.3,"shadowDarkness":0.65,"ambientColor":[0.35,0.35,0.35],"fogColor":[0.980392156862745,0.803921568627451,0.588235294117647],"fogNear":0,"fogFar":50,"fogType":"exp","fogDensity":0.001,"fogVFalloff":0.539,"fogVFalloffStart":22.6,"skyColorBlend":0.5,"skyFogBlend":0.16,"skyApexColor":[0.305882352941176,0.603921568627451,0.949019607843137],"skyHorizonColor":[1,0.92156862745098,0.749019607843137],"___physics_gravity":[0,0,-9.8],"___physics_accuracy":10,"___physics_active":true,"vAtmosphereDensity":0.0005,"playMode":"stop","octreeObjects":5,"octreeDepth":16,"octreeExtents":640,"materialDef":{"shininess":4,"alpha":1,"ambient":{"r":0.8,"g":0.8,"b":0.8},"color":{"r":1,"g":1,"b":1,"a":1},"emit":{"r":0,"g":0,"b":0},"reflect":0,"shadeless":false,"shadow":true,"specularColor":{"r":1,"g":0.6509803921568628,"b":0},"specularLevel":0.305,"layers":[{"alpha":1,"blendMode":0,"mapInput":0,"mapTo":1,"offsetx":0.11,"offsety":0.11,"rot":0,"scalex":10,"scaley":10,"src":"./contentlibraries/environments/assets/dirt.jpg"},{"offsetx":0,"offsety":0,"scalex":1,"scaley":1,"rot":0,"blendMode":0,"mapTo":"4","mapInput":0,"alpha":0.27,"src":"./contentlibraries/environments/assets/waternormal.jpg"}],"type":"phong","side":2,"wireframe":false,"metal":false,"combine":0,"depthtest":true,"depthwrite":true,"blendMode":1,"fog":true,"shading":true,"vertexColors":false},"skyTexture":"cloudy_noon","owner":"ADLteam","type":"scene","skyAtmosphereDensity":1}]