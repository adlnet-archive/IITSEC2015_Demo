{
    "children": {
        "Nb40e5396": {
            "extends": "asset.vwf",
            "properties": {
                "DisplayName": "./vwfdatamanager.svc/DataFile/Navy/AttackSpeedBoat.dae1",
                "___physics_activation_state": 1,
                "___physics_deactivation_time": 0,
                "___physics_velocity_angular": [0, 0, 0],
                "___physics_velocity_linear": [0, 0, 0],
                "materialDef": {
                    "alpha": 1,
                    "ambient": {
                        "b": 0.584,
                        "g": 0.584,
                        "r": 0.584
                    },
                    "color": {
                        "b": 1,
                        "g": 1,
                        "r": 1
                    },
                    "emit": {
                        "b": 0,
                        "g": 0,
                        "r": 0
                    },
                    "layers": [{
                            "alpha": 1,
                            "mapInput": 0,
                            "mapTo": 1,
                            "offsetx": 0,
                            "offsety": 0,
                            "scalex": 1,
                            "scaley": 1,
                            "src": "/sas/assets/7e6084c4"
                        }
                    ],
                    "reflect": 0.001,
                    "shininess": 0.004002,
                    "side": 0,
                    "specularColor": {
                        "b": 0,
                        "g": 0,
                        "r": 0
                    },
                    "specularLevel": 1,
                    "type": "phong"
                },
                "owner": "ADLteam",
                "transform": [-9.999999974752427e-7, 1, -9.999999974752427e-7, 0, -1.0000009536743164, -9.999999974752427e-7, -9.999999974752427e-7, 0, -9.999999974752427e-7, 0, 1, 0, 0.5, 0, -0.5, 1]
            },
            "random": {
                "c": 1,
                "s0": 0.375302,
                "s1": 0.872168,
                "s2": 0.110384
            },
            "sequence": 0,
            "source": "/sas/assets/c1064312",
            "type": "subDriver/threejs/asset/vnd.collada+xml"
        },
        "N1ffd3b5": {
            "extends": "http://vwf.example.com/node3.vwf",
            "properties": {
                "DisplayName": "enginePos",
                "glyphURL": "../vwf/view/editorview/images/icons/sphere.png",
                "owner": "ADLteam",
                "transform": [1, 0, 0, 0, 0, 1, 0, 0, -9.999999974752427e-7, 0, 1, 0, 3, 0, -0.75, 1],
                "transformAPI": {
                    "COORDINATES": {
                        "LOCAL": "local",
                        "GLOBAL": "global",
                        "PARENT": "parent"
                    }
                },
                "worldTransform": [0.18804042041301727, -0.9821426272392273, 0.006052142940461636, 0, 0.98142409324646, 0.18813441693782806, 0.03757866099476814, 0, -0.03804640844464302, -0.0011256062425673008, 0.9992753267288208, 0, 41.50437927246094, -62.07962417602539, 19.93284797668457, 1]
            },
            "random": {
                "c": 1,
                "s0": 0.022454,
                "s1": 0.002702,
                "s2": 0.55584
            },
            "sequence": 0
        },
        "N1e93562f": {
            "events": {
                "pointerClick": {
                    "body": "                                                   this.parent.launchMissile()",
                    "parameters": ["                                                   eventData", "                                                   nodeData                                                   "]
                }
            },
            "extends": "box2.vwf",
            "properties": {
                "DisplayName": "MissileLauncher",
                "___physics_activation_state": 1,
                "___physics_deactivation_time": 0,
                "___physics_velocity_angular": [0, 0, 0],
                "___physics_velocity_linear": [0, 0, 0],
                "height": 1.61,
                "materialDef": {
                    "alpha": 1,
                    "ambient": {
                        "b": 1,
                        "g": 1,
                        "r": 1
                    },
                    "blendMode": 1,
                    "color": {
                        "a": 1,
                        "b": 1,
                        "g": 1,
                        "r": 1
                    },
                    "depthtest": true,
                    "depthwrite": true,
                    "emit": {
                        "b": 0,
                        "g": 0,
                        "r": 0
                    },
                    "fog": true,
                    "layers": [{
                            "alpha": 1,
                            "blendMode": 0,
                            "mapInput": 0,
                            "mapTo": 1,
                            "offsetx": 0,
                            "offsety": 0,
                            "rot": 0,
                            "scalex": 1,
                            "scaley": 1,
                            "src": "checker.jpg"
                        }
                    ],
                    "metal": false,
                    "reflect": 0.8,
                    "shadeless": false,
                    "shading": true,
                    "shadow": true,
                    "shininess": 15,
                    "side": 0,
                    "specularColor": {
                        "b": 0.57735,
                        "g": 0.57735,
                        "r": 0.57735
                    },
                    "specularLevel": 1,
                    "type": "phong",
                    "vertexColors": false,
                    "wireframe": false
                },
                "owner": "ADLteam",
                "transform": [0.08618500083684921, -0.022557999938726425, 0.9960219860076904, 0, 0.0010019999463111162, -0.9997419714927673, -0.02273000031709671, 0, 0.9962769746780396, 0.002956999931484461, -0.08614099770784378, 0, 1, 0, 1.5, 1],
                "type": "Primitive",
                "visible": false,
                "width": 1.36
            },
            "random": {
                "c": 1,
                "s0": 0.778299,
                "s1": 0.286493,
                "s2": 0.191579
            },
            "sequence": 0,
            "source": "vwf/model/threejs/box.js",
            "type": "subDriver/threejs"
        },
        "Nea9b484f": {
            "extends": "box2.vwf",
            "properties": {
                "DisplayName": "box7",
                "___physics_activation_state": 1,
                "___physics_deactivation_time": 0,
                "___physics_velocity_angular": [0, 0, 0],
                "___physics_velocity_linear": [0, 0, 0],
                "_length": 3.45,
                "castShadows": false,
                "height": 1.13,
                "materialDef": {
                    "alpha": 0,
                    "ambient": {
                        "b": 1,
                        "g": 1,
                        "r": 1
                    },
                    "color": {
                        "a": 1,
                        "b": 1,
                        "g": 1,
                        "r": 1
                    },
                    "emit": {
                        "b": 0,
                        "g": 0,
                        "r": 0
                    },
                    "layers": [{
                            "alpha": 1,
                            "blendMode": 0,
                            "mapInput": 0,
                            "mapTo": 1,
                            "offsetx": 0,
                            "offsety": 0,
                            "rot": 0,
                            "scalex": 1,
                            "scaley": 1,
                            "src": "checker.jpg"
                        }
                    ],
                    "reflect": 0.8,
                    "shadeless": false,
                    "shadow": true,
                    "shininess": 15,
                    "specularColor": {
                        "b": 0.577350269189626,
                        "g": 0.577350269189626,
                        "r": 0.577350269189626
                    },
                    "specularLevel": 1,
                    "type": "phong"
                },
                "owner": "ADLteam",
                "renderDepth": 7,
                "transform": [1, 0, 9.999999974752427e-7, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, -0.2499990016222, 1],
                "type": "Primitive",
                "width": 2.18
            },
            "random": {
                "c": 1,
                "s0": 0.198099663946778,
                "s1": 0.0275812551844865,
                "s2": 0.352169041289017
            },
            "sequence": 0,
            "source": "vwf/model/threejs/box.js",
            "type": "subDriver/threejs"
        }
    },
    "events": {
        "pointerClick": {
            "body": "        console.log(\"pointerClick\");",
            "parameters": ["        eventData", "        nodeData        "]
        },
        "pointerDown": {
            "body": "           console.log(\"pointerDown\");\n    this.currentState = this.states[\"approaching\"];",
            "parameters": ["           eventData", "           nodeData           "]
        }
    },
    "extends": "box2.vwf",
    "methods": {
        "FACMovementDirection": {
            "body": " // set equal to \"\" after adding calculations:\n    var movement = \"closing\";\n    // Perform calculations to determine approaching or moving away states:\n    //     movement = \"closing\" if distance to target is getting smaller\n    //     movement = \"none\" if distance to target hasn't changed\n    //     movement = \"increasing\" if distance to target is getting larger\n    switch (movement)\n    {\n        case \"closing\":\n            this.currentState = this.states[\"approaching\"];\n            return \"approaching\";\n        case \"none\":\n            this.currentState = this.states[\"idle\"];\n            return \"idle\";\n        case \"increasing\":\n            this.currentState = this.states[\"moving_away\"];\n            return \"moving_away\";\n    } ",
            "parameters": []
        },
        "_keyDown": {
            "body": " console.log(\"Key down\");\n    if (this.currentState === null)\n    {\n        console.log(\"Set initial state\");\n        this.currentState = this.states[\"approaching\"];\n    }\n    // if (this.Scene.clientAPI.getCameraForClient(vwf.client()).id != this.controllingCamera) return;\n    if (this._keysDown.indexOf(e.key.char) == -1)\n    {\n        this._keysDown.push(e.key.char);\n    } ",
            "parameters": ["e", "d"]
        },
        "_keyUp": {
            "body": "       // if (this.Scene.clientAPI.getCameraForClient(vwf.client()).id != this.controllingCamera) return;\n    if (this._keysDown.indexOf(e.key.char) !== -1)\n    {\n        this._keysDown.splice(this._keysDown.indexOf(e.key.char), 1);\n    }\n    if (e.key.char == \" \")\n    {\n        if (this.rockets > 0)\n        {\n            this.activateState(\"fire_rocket\");\n            console.log(\"rockets: \" + this.rockets);            \n        }\n    }       ",
            "parameters": ["e", "d"]
        },
        "activateState": {
            "body": "    //console.log(\"activateState\");\n    var state = this.states[statename];\n\n    if (this.currentState.transitions.indexOf(statename) == -1)\n    {\n        console.log(\"invalid transition!\");\n        return;\n    }\n\n    if (state.transitionFunction)\n        this[state.transitionFunction](this.currentState);\n\n    this.currentState = state;\n\n    for (var i in state.properties)\n    {\n        console.log(state.properties[i]);\n        this[i] = state.properties[i];\n    }    ",
            "parameters": ["statename"]
        },
        "approachingTransition": {
            "body": "    console.log(\"approachingTransition\");\n    this.approachingUpdate(this.currentState);    ",
            "parameters": []
        },
        "approachingUpdate": {
            "body": "    console.log(\"approachingUpdate\");\n    this.currentState = this.states[\"approaching\"];    ",
            "parameters": ["statename"]
        },
        "collidingTransition": {
            "body": "                   console.log(\"collidingTransition\");\n    this.currentState = this.states[\"colliding\"];                   ",
            "parameters": []
        },
        "collidingUpdate": {
            "body": "                   console.log(\"collidingUpdate\");\n    console.log(statename);                   ",
            "parameters": ["statename"]
        },
        "consumeFuel": {
            "body": "   if (this.fuel <= 0.0)\n    {\n        this.currentState = this.states[\"out_of_gas\"];\n    }\n    else\n    {\n        this.fuel = this.fuel - this.fuelConsumptionRate;\n        console.log(\"fuel: \" + this.fuel);    \n    }   ",
            "parameters": []
        },
        "defeatedTransition": {
            "body": "                   console.log(\"defeatedTransition\");\n    this.currentState = this.states[\"defeated\"];                   ",
            "parameters": []
        },
        "defeatedUpdate": {
            "body": "                   console.log(\"defeatedUpdate\");\n    console.log(statename);                   ",
            "parameters": ["statename"]
        },
        "fire_rocketTransition": {
            "body": "    console.log(\"fire_rocketTransition\");\n    this.fire_rocketUpdate(this.currentState);    ",
            "parameters": []
        },
        "fire_rocketUpdate": {
            "body": "    console.log(\"fire_rocketUpdate\");\n    this.launchMissile();\n    this.playMissileLaunch();\n    this.rockets = this.rockets - 1;\n    if (this.rockets > 0)\n    {\n        this.currentState = this.states[\"fire_rocket\"];\n        console.log(\"rocketUpdate state fire \");\n    }\n    else\n    {\n        this.currentState = this.states[\"idle\"];\n        console.log(\"rocketUpdate state idle\");\n    }    ",
            "parameters": ["statename"]
        },
        "hit": {
            "body": "                                if(typeof force == 'number')\n        this.health -= force;\n    else\n        this.health -= 101;\n    \n    if (this.health < 0)\n    {\n        var def = this.explosionDef.internal_val;\n        var pos = this.transformAPI.getWorldPosition();\n        def.properties.transform[12] = pos[0];\n        def.properties.transform[13] = pos[1];\n        def.properties.transform[14] = pos[2];\n        def.properties.fuse = 1;\n        vwf.createChild(vwf.application(), GUID(), _DataManager.getCleanNodePrototype(def), null);\n        this.parent.children.delete(this);\n    }                                ",
            "parameters": ["pos", "force"]
        },
        "idleTransition": {
            "body": "                   console.log(\"idleTransition\");\n    this.currentState = this.states[\"idle\"];                   ",
            "parameters": []
        },
        "idleUpdate": {
            "body": "                   console.log(\"idleUpdate\");\n    console.log(statename);                   ",
            "parameters": ["statename"]
        },
        "initialize": {
            "body": " // Initialize is called when the node is constructed.\n    // Write code here to setup the object, or hook up event handlers.\n    // Note that the object is not yet hooked into the scene - that will happen during the 'Added' event.\n    // You cannot access this.parent in this function.\n    console.log(\"FAC ready\"); ",
            "parameters": []
        },
        "launchMissile": {
            "body": "        var def = this.missileDef.internal_val;\n    var pos = this.children_by_name.MissileLauncher.worldTransform.internal_val.slice();\n\n    pos[14] += 0;\n    def.properties.transform = pos;\n    def.properties.___physics_velocity_linear = this.physicsAPI.getLinearVelocity();\n    def.properties.fired = true;\n    var now = performance.now();\n\n    vwf.createChild(vwf.application(), GUID(), _DataManager.getCleanNodePrototype(def), null, function()\n    {\n        console.log(performance.now() - now);\n    });        ",
            "parameters": []
        },
        "moving_awayTransition": {
            "body": "    console.log(\"moving_awayTransition\");\n    this.moving_awayUpdate(this.currentState);    ",
            "parameters": []
        },
        "moving_awayUpdate": {
            "body": "    console.log(\"moving_awayUpdate\");\n    this.currentState = this.states[\"moving_away\"];    ",
            "parameters": ["statename"]
        },
        "out_of_gasTransition": {
            "body": "      console.log(\"out_of_gasTransition\");\n    //this.currentState = this.states[\"out_of_gas\"];\n    this.out_of_gasUpdate(this.currentState);      ",
            "parameters": []
        },
        "out_of_gasUpdate": {
            "body": "      console.log(\"out_of_gasUpdate\");\n    console.log(statename);\n    if (this.fuel <= 0)\n    {\n        this.currentState = this.states[\"out_of_gas\"];\n        console.log(\"out_of_gasUpdate now out_of_gas state\");\n    }\n    else if (this.hullStrength <= 0)\n    {\n        this.currentState = this.states[\"defeated\"];\n        console.log(\"out_of_gasUpdate now defaeted state\");\n    }      ",
            "parameters": ["statename"]
        },
        "playBulletHittingMetal": {
            "body": "            console.log(\"playBulletHittingMetal\");\n    this.audioAPI.playSound(\"\", false, 100);            ",
            "parameters": []
        },
        "playBulletHittingWater": {
            "body": "            console.log(\"playBulletHittingWater\");\n    this.audioAPI.playSound(\"\", false, 100);            ",
            "parameters": []
        },
        "playBulletWhizzingBy": {
            "body": "            console.log(\"playBulletWhizzingBy\");\n    this.audioAPI.playSound(\"\", false, 100);            ",
            "parameters": []
        },
        "playExplosion": {
            "body": "  console.log(\"playExplosion\");\n    // #1:\n    //this.audioAPI.playSound(\"/sas/assets/8d358349\", false, 100);\n    // #2:\n    //this.audioAPI.playSound(\"/sas/assets/d714ebe1\", false, 100);\n    // #3:\n    this.audioAPI.playSound(\"/sas/assets/3c6b353e\", false, 100);  ",
            "parameters": []
        },
        "playHelicopter": {
            "body": "  //console.log(\"playHelicopter\");\n    // #1:\n    //this.audioAPI.playSound(\"/sas/assets/af90534a\", false, 100);\n    //#2:\n    this.audioAPI.playSound(\"/sas/assets/dc81768a\", false, 100);  ",
            "parameters": []
        },
        "playMissileLaunch": {
            "body": "  console.log(\"playMissileLaunch\");\n    // #1:\n    //this.audioAPI.playSound(\"/sas/assets/744acf2e\", false, 100);\n    // #2:\n    //this.audioAPI.playSound(\"/sas/assets/4334801b\", false, 100);\n    // #3:\n    //this.audioAPI.playSound(\"/sas/assets/10b027bd\", false, 100);\n    // #4:\n    //this.audioAPI.playSound(\"/sas/assets/94d508e3\", false, 100);\n    // #5:\n    this.audioAPI.playSound(\"/sas/assets/263beb86\", false, 100);  ",
            "parameters": []
        },
        "playMotorIdle": {
            "body": "                  console.log(\"playMotorIdle\");\n    this.audioAPI.playSound(\"\", false, 100);                  ",
            "parameters": []
        },
        "playMotorRunning": {
            "body": "  //console.log(\"playMotorRunning\");\n    // #1:\n    //this.audioAPI.playSound(\"/sas/assets/2cb9fef9\", false, 100);\n    // #2:\n    //this.audioAPI.playSound(\"/sas/assets/994ee0c8\", false, 100);\n    // #3:\n    this.audioAPI.playSound(\"/sas/assets/68b679a8\", false, 100);  ",
            "parameters": []
        },
        "playMotorSputtering": {
            "body": "                  console.log(\"playMotorSputtering\");\n    this.audioAPI.playSound(\"\", false, 100);                  ",
            "parameters": []
        },
        "playWarning": {
            "body": "                  console.log(\"playWarning\");\n    this.audioAPI.playSound(\"\", false, 100);                  ",
            "parameters": []
        },
        "ready": {
            "body": " // The scene is now completely loaded. This will fire on each client when the client joins, so it`s not a great place to create objects\n    this.Scene.unbind(\"keyDown\", this._kd);\n    this.Scene.unbind(\"keyUp\", this._ku);\n    var self = this;\n    this._kd = function(e, d)\n    {\n        self._keyDown(e, d)\n    };\n    this._ku = function(e, d)\n    {\n        self._keyUp(e, d)\n    };\n    this.Scene.bind(\"keyDown\", this._kd);\n    this.Scene.bind(\"keyUp\", this._ku); ",
            "parameters": []
        },
        "tick": {
            "body": " var waterDepth = 20;\n    var hullThick = 2.2;\n    var depthFloor = waterDepth + hullThick;\n    // The tick function is called 20 times every second.\n    // Write code here to animate over time\n    this.physicsAPI.addForceAtCenter(0, 0, 9.8);\n    this.physicsAPI.wake();\n    var mass = this.physicsAPI.getMass();\n    var corners = [\n        [this._length / 2, this.width / 2, 0],\n        [this._length / 2, -this.width / 2, 0],\n        [-this._length / 2, this.width / 2, 0],\n        [-this._length / 2, -this.width / 2, 0],\n    ];\n\n    this.counter++;\n    var rocking = -mass / 5;\n    this.physicsAPI.addForceOffset([0, 0, rocking], [Math.sin(this.counter / 30) * this._length, Math.cos(this.counter / 15) * this.width, 0]);\n    this.physicsAPI.addForceOffset([0, 0, rocking], [Math.cos(this.counter / 10) * this._length, Math.sin(this.counter / 10) * this.width, 0]);\n\n    for (var i = 0; i < corners.length; i++)\n    {\n        var corner = corners[i];\n        var worldCorner = this.transformAPI.localToGlobal(corner);\n        var depth = depthFloor - worldCorner[2];\n        depth = Math.min(depth, 5);\n        if (depth > 0)\n        {\n\n            this.physicsAPI.addForceOffset([0, 0, depth * mass * 9.8 / 3], Vec3.subtract(worldCorner, this.transformAPI.getPosition(), []));\n            var vel = this.physicsAPI.getLinearVelocity();\n            var torque = this.physicsAPI.getAngularVelocity();\n            //    vel[0] *= .6;\n            // vel[1] *= .6;\n            vel[2] *= 1 - depth / 50;\n\n            torque[0] *= 1 - depth / 100;\n            torque[1] *= 1 - depth / 100;\n            torque[2] *= 1 - depth / 100;\n            this.physicsAPI.setAngularVelocity(torque);\n            this.physicsAPI.setLinearVelocity(vel);\n        }\n        //  if (depth < 0)\n        {\n\n            this.physicsAPI.addForceOffset([0, 0, -mass * 9.8 / 4], Vec3.subtract(worldCorner, this.transformAPI.getPosition(), []));\n            var vel = this.physicsAPI.getLinearVelocity();\n            var torque = this.physicsAPI.getAngularVelocity();\n        }\n\n    }\n\n    var depth = depthFloor - this.transformAPI.getPosition()[2]\n    depth = Math.min(depth, 5);\n    if (depth > 0)\n    {\n\n        var vel = this.physicsAPI.getLinearVelocity();\n        vel = this.transformAPI.globalToLocalRotation(vel);\n        vel[0] *= 1.0 - depth / 100;\n        vel[1] *= 1.0 - depth / 30;\n        vel = this.transformAPI.localToGlobalRotation(vel);\n        this.physicsAPI.setLinearVelocity(vel);\n\n    }\n\n    if (this._keysDown.indexOf(\"W\") !== -1)\n    {\n        this.consumeFuel();\n        if (this.currentState.name === this.states[\"out_of_gas\"].name)\n        {\n            console.log(\"(W) out of gas!\");\n            this.activateState(\"out_of_gas\");\n        }\n        else\n        {\n            var force = this.transformAPI.localToGlobal(-10 * mass, 0, 0);\n            this.physicsAPI.addForceAtCenter(force[0], force[1], force[2]);\n            this.playMotorRunning();\n            switch (this.FACMovementDirection())\n            {\n                case \"approaching\":\n                    this.activateState(\"approaching\");\n                    break;\n                case \"idle\":\n                    this.activateState(\"idle\");\n                    break;\n                case \"moving_away\":\n                    this.activateState(\"moving_away\");\n                    break;\n            }\n        }\n    }\n    if (this._keysDown.indexOf(\"S\") !== -1)\n    {\n        this.consumeFuel();\n        if (this.currentState.name === this.states[\"out_of_gas\"].name)\n        {\n            console.log(\"(S) out of gas!\");\n            this.activateState(\"out_of_gas\");\n        }\n        else\n        {\n            var force = this.transformAPI.localToGlobal(10 * mass, 0, 0);\n            this.physicsAPI.addForceAtCenter(force[0], force[1], force[2]);\n            this.playMotorRunning();\n            switch (this.FACMovementDirection())\n            {\n                case \"approaching\":\n                    this.activateState(\"approaching\");\n                    break;\n                case \"idle\":\n                    this.activateState(\"idle\");\n                    break;\n                case \"moving_away\":\n                    this.activateState(\"moving_away\");\n                    break;\n            }\n        }\n    }\n    var vel = this.physicsAPI.getLinearVelocity();\n    vel = this.transformAPI.globalToLocalRotation(vel);\n    var speedTorqueFactor = (Math.abs(vel[0]) / 3);\n    if (this._keysDown.indexOf(\"A\") !== -1)\n    {\n\n        this.physicsAPI.addTorque(0, 0, speedTorqueFactor * mass * 3);\n        var force = this.transformAPI.localToGlobal(speedTorqueFactor * mass, 0, 0);\n        this.physicsAPI.addTorque(force);\n    }\n    if (this._keysDown.indexOf(\"D\") !== -1)\n    {\n        this.physicsAPI.addTorque(0, 0, -speedTorqueFactor * mass * 3);\n        var force = this.transformAPI.localToGlobal(-speedTorqueFactor * mass, 0, 0);\n        this.physicsAPI.addTorque(force);\n    }\n    if (this._keysDown.indexOf(\" \") !== -1)\n    {\n        if (this.rockets > 0)\n        {\n            this.currentState = this.states[\"fire_rocket\"];\n        }\n        else\n        {\n            this.currentState = this.states[\"moving_away\"];\n        }\n    } ",
            "parameters": []
        }
    },
    "properties": {
        "DisplayName": "FAC",
        "EditorData": {
            "controllingCamera": {
                "displayname": "Controlling Camera",
                "property": "controllingCamera",
                "type": "nodeid"
            }
        },
        "___physics_activation_state": 4,
        "___physics_angular_velocity": [-0.0205620388669852, 0.137373529226051, 0.000692897715996474],
        "___physics_damping": 0.4,
        "___physics_deactivation_time": 0,
        "___physics_enabled": true,
        "___physics_linear_velocity": [-0.115731220145219, 0.602527779520543, -0.000487978426872444],
        "___physics_mass": 8051.2,
        "___physics_velocity_angular": [0.02765009179711342, -0.1445750892162323, 0.00038580354885198176],
        "___physics_velocity_linear": [-0.01912243291735649, 0.10449027270078659, -0.0032515337225049734],
        "_keysDown": [],
        "_length": 7,
        "bullets_50_cal": 1000,
        "controllingCamera": "SandboxCamera-vwf-N373ec60b",
        "counter": 14602,
        "currentState": null,
        "editorData": {
            "controllingCamera": {
                "displayName": "controllingCamera",
                "type": "nodeID"
            }
        },
        "explosionDef": {
            "continues": "./vwfdatamanager.svc/datafile/vwf/fragmentRound.vwf.json",
            "properties": {
                "transform": [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]
            }
        },
        "fuel": 100,
        "fuelConsumptionRate": 0.01,
        "health": 100,
        "height": 1.2,
        "hullStrength": 100,
        "materialDef": {
            "alpha": 1,
            "ambient": {
                "b": 1,
                "g": 1,
                "r": 1
            },
            "blendMode": 1,
            "color": {
                "a": 1,
                "b": 1,
                "g": 1,
                "r": 1
            },
            "depthtest": true,
            "depthwrite": true,
            "emit": {
                "b": 0,
                "g": 0,
                "r": 0
            },
            "fog": true,
            "layers": [{
                    "alpha": 1,
                    "blendMode": 0,
                    "mapInput": 0,
                    "mapTo": 1,
                    "offsetx": 0,
                    "offsety": 0,
                    "rot": 0,
                    "scalex": 1,
                    "scaley": 1,
                    "src": "checker.jpg"
                }
            ],
            "metal": false,
            "reflect": 0.8,
            "shadeless": false,
            "shading": true,
            "shadow": true,
            "shininess": 15,
            "side": 0,
            "specularColor": {
                "b": 0.57735,
                "g": 0.57735,
                "r": 0.57735
            },
            "specularLevel": 1,
            "type": "phong",
            "vertexColors": false,
            "wireframe": false
        },
        "missileDef": {
            "continues": "./vwfdatamanager.svc/datafile/vwf/missile.vwf.json",
            "properties": {
                "transform": [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]
            }
        },
        "owner": "ADLteam",
        "physicsAPI": {},
        "rangeToTarget": 1000,
        "rockets": 5,
        "states": {
            "approaching": {
                "name": "approaching",
                "properties": {},
                "transitionFunction": "approachingTransition",
                "transitions": ["approaching", "moving_away", "idle", "out_of_gas", "fire_rocket", "colliding", "defeated"],
                "updateFunction": "approachingUpdate"
            },
            "colliding": {
                "name": "colliding",
                "properties": {},
                "transitionFunction": "collidingTransition",
                "transitions": ["colliding", "defeated"],
                "updateFunction": "collidingUpdate"
            },
            "defeated": {
                "name": "defeated",
                "properties": {},
                "transitionFunction": "defeatedTransition",
                "transitions": ["defeated"],
                "updateFunction": "defeatedUpdate"
            },
            "fire_rocket": {
                "name": "fire_rocket",
                "properties": {},
                "transitionFunction": "fire_rocketTransition",
                "transitions": ["approaching", "fire_rocket", "moving_away", "idle", "colliding", "defeated"],
                "updateFunction": "fire_rocketUpdate"
            },
            "idle": {
                "name": "idle",
                "properties": {},
                "transitionFunction": "idleTransition",
                "transitions": ["moving_away", "idle", "out_of_gas", "colliding", "defeated"],
                "updateFunction": "idleUpdate"
            },
            "moving_away": {
                "name": "moving_away",
                "properties": {},
                "transitionFunction": "moving_awayTransition",
                "transitions": ["moving_away", "idle", "out_of_gas", "colliding", "defeated"],
                "updateFunction": "moving_awayUpdate"
            },
            "out_of_gas": {
                "name": "out_of_gas",
                "properties": {},
                "transitionFunction": "out_of_gasTransition",
                "transitions": ["out_of_gas", "colliding", "defeated"],
                "updateFunction": "out_of_gasUpdate"
            }
        },
        "transform": [0.18804042041301727, -0.9821426272392273, 0.006052142940461636, 0, 0.98142409324646, 0.18813441693782806, 0.03757866099476814, 0, -0.0380462221801281, -0.0011265884386375546, 0.9992753267288208, 0, 40.91172409057617, -59.13404083251953, 20.664148330688477, 1],
        "type": "Primitive",
        "visible": false,
        "warningsReceived": 0,
        "width": 2.5
    },
    "random": {
        "c": 1,
        "s0": 0.134394,
        "s1": 0.921757,
        "s2": 0.045269
    },
    "sequence": 0,
    "source": "vwf/model/threejs/box.js",
    "type": "subDriver/threejs"
}